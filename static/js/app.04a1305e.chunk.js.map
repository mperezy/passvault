{"version":3,"sources":["src/services/database.ts","src/utils/localStorageFuncs.ts","src/components/LoadingIndicator/loadingIndicator.tsx","src/utils/infoMessages.ts","src/utils/constants.ts","src/redux/slices/passwordSlice.ts","src/components/CustomSnackbar/customSnackbar.tsx","src/redux/sagas/passwordGeneratorSaga.ts","src/redux/sagas/getPasswordsSaga.ts","src/redux/sagas/getSocialMediaSaga.ts","src/redux/sagas/savePasswordSaga.ts","src/redux/sagas/deletePasswordSaga.ts","src/redux/sagas/updatePasswordSaga.ts","src/redux/sagas/index.ts","src/redux/slices/rootReducer.ts","src/redux/store/index.ts","assets/main/passvault-512px.png","App.tsx","src/screens/SignUp/signup.tsx","src/components/CustomStatusbar/customStatusbar.tsx","src/components/SocialMediaIcon/socialMediaIcon.tsx","src/utils/imageDataRetriever.ts","src/components/PasswordItem/styles.ts","src/components/PasswordIcons/passwordIcon.tsx","src/components/PasswordItem/passwordItem.tsx","src/components/CustomModal/styles.ts","src/components/CustomModal/customModal.tsx","src/screens/PasswordList/styles.ts","src/screens/PasswordList/passwordList.tsx","src/components/CustomSidebar/styles.ts","src/components/CustomSidebar/customSidebar.tsx","src/screens/Drawer/drawer.tsx","src/components/OnBoarding/OnBoardingItem/styles.ts","src/components/OnBoarding/OnBoardingItem/onBoardingItem.tsx","src/components/OnBoarding/Paginator/styles.ts","src/components/OnBoarding/Paginator/paginator.tsx","src/components/OnBoarding/NextButton/styles.ts","src/components/OnBoarding/NextButton/nextButton.tsx","src/screens/OnBoarding/slides.tsx","src/screens/OnBoarding/onBoarding.tsx","src/components/SliderContainer/styles.ts","src/components/SliderContainer/sliderContainer.tsx","src/components/PasswordConfigurator/CustomCheckBox/customCheckBox.tsx","src/utils/configuratorUtils.ts","src/components/PasswordConfigurator/passwordConfigurator.tsx","src/components/CreateEditPasswordConfigurator/styles.ts","src/components/CreateEditPasswordConfigurator/createEditPasswordConfigurator.tsx","src/screens/PasswordGenerator/passwordGenerator.tsx","src/components/Popover/styles.ts","src/components/Popover/popover.tsx","src/screens/Login/login.tsx","webpack:///./index.js?41f5","src/screens/PasswordGenerator/styles.ts","assets/amazon.png","assets/discord.png","assets/google.png","assets/slack.png","assets/okta.png","assets/outlook.png","assets/twitch.png","assets/img/sidebar-banner.png","src/redux/slices/uiElementsSlice.ts","src/redux/slices/configuratorSlice.ts","src/screens/Login/styles.ts","src/redux/slices/socialMediaSlice.ts","src/redux/slices/userSlice.ts","src/services/firebase.ts","src/redux/slices/applicationStatusSlice.ts"],"names":["log","logger","createLogger","getPasswordsByUserId","userId","passwordsCollection","where","get","then","querySnapshot","docs","map","doc","id","passwordGenerated","data","password_generated","socialMedia","social_media","description","defaultEmptyPasswordDescription","createdAt","sort","x","y","obj1","obj2","field","kind","sortBy","catch","error","sendPassword2Firebase","password","a","async","add","Date","getTime","uid","info","deletePasswordById","passwordId","delete","updatePasswordByIdFromFirebase","update","getSocialMedia","socialMediaCollection","name","appName","isObject","value","storeData","key","finalValue","JSON","stringify","toString","AsyncStorage","setItem","asyncStorageException","getData","getItem","parse","removeItem","setUserData2LS","email","setPasswordGenerated","clearUserDataFromLS","res","setOnBoardingViewed","getOnBoardingViewed","firstLaunchFlag","err","styles","StyleSheet","create","container","flex","justifyContent","horizontal","flexDirection","padding","LoadingIndicator","style","size","color","showInfoMessage","message","ToastAndroid","show","SHORT","lower","upper","number","symbols","devWarnings","popoverMessage","infoMessages","copied2Clipboard","newPassword","about2CreatePassword","FIREBASE_STORAGE_URL","FIREBASE_STORAGE_BUCKET","imagesTokens","FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN","appColors","textTint","maximumTintColorSlider","disabledColorSlider","activeTint","primary","primaryDark","red","initialState","passwordIdPicked","passwordPicked","passwordDescriptionPicked","length","isCreateMode","isEditMode","isDeleteMode","passwords","passwordSlice","createSlice","reducers","setPassword","state","payload","setPasswordPicked","setPasswordIdPicked","resetPasswordPicked","setPasswordDescriptionPicked","setLength","setIsCreateMode","setIsEditMode","setIsDeleteMode","setPasswords","resetPasswordGeneratorState","resetPasswordState","unsetPasswords","generatePassword","getPasswordsFromFirebase","savePassword2Firebase","deletePasswordFromFirebase","editPasswordFromFirebase","actions","selectPassword","selectPasswordIdPicked","selectPasswordPicked","selectPasswordDescriptionPicked","selectIsCreateMode","selectIsEditMode","selectIsDeleteMode","selectPasswordLength","selectPasswords","CustomSnackbar","isSnackbarVisible","onDismiss","visible","duration","getPasswordGeneratorFlow","select","selectIsUpperCase","isUpperCase","selectIsLowerCase","isLowerCase","selectIsNumbers","isNumbers","selectIsSymbols","isSymbols","isUpper","isLower","isNumber","isSymbol","all","i","charAt","Math","floor","random","put","exception","passwordGeneratorSaga","takeLeading","type","getPasswordsFlow","selectUserId","call","getPasswordsSaga","getSocialMediaFlow","socialMediaList","setSocialMediaList","getSocialMediaSaga","getSocialMediaListFromFirebase","savePasswordFlow","savePasswordSaga","deletePasswordFlow","setIsRequest","unsetIsRequest","deletePasswordSaga","updatePasswordFlow","selectSocialMediaPicked","updatePasswordSaga","IndexSagas","createRootReducer","combineReducers","user","userSlice","reducer","configurator","configuratorSlice","applicationStatus","applicationStatusSlice","socialMediaSlice","uiElements","uiElementsSlice","sagaMiddleware","createSagaMiddleware","middleware","store","configureStore","run","module","exports","process","LogBox","ignoreLogs","window","Stack","createNativeStackNavigator","App","useState","loading","setLoading","onBoardingViewed","useEffect","undefined","finally","Navigator","Screen","component","options","headerShown","Platform","OS","OnBoarding","Login","SignUp","PasswordGenerator","headerStyle","backgroundColor","headerTintColor","Drawer","navigation","username","setUsername","dispatch","useDispatch","auth","onAuthStateChanged","setUserData","replace","unsetUserData","loginImage","source","require","inputContainer","placeholder","input","shadow","onChangeText","text","buttonContainer","onPress","signUp","button","buttonText","linkContainer","navigate","link","linkText","CustomStatusbar","animated","barStyle","SocialMediaIcon","includes","imageSource","imageSourceRetriever","Image","socialMediaIcon","socialMediaColor","socialMediaIconColor","AntDesign","item","borderRadius","alignItems","marginLeft","marginRight","marginBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","socialIconAndPasswordInfo","passwordAndDescription","paddingHorizontal","descriptionTextLabel","fontSize","passwordInput","fontFamily","fontWeight","icons","singleIcon","PasswordIcons","passwordVisible","setPasswordVisible","mSocialMedia","toUpperCase","slice","View","TouchableOpacity","Entypo","setSnackbarMessage","snackbarMessage","setSnackbarVisible","snackbarVisible","Clipboard","setString","MaterialCommunityIcons","setSocialMediaPicked","socialMediaPicked","FontAwesome","setModalTitle","modalTitle","setModalMessage","modalMessage","setModalVisible","modalVisible","Ionicons","PasswordItem","Text","TextInput","showSoftInputOnFocus","caretHidden","secureTextEntry","content","borderColor","title","alignSelf","borderWidth","marginTop","paddingVertical","CustomModal","props","toggle","onSubmit","okButtonMessage","cancelButtonMessage","isVisible","onBackdropPress","onBackButtonPress","MaterialIcons","Button","sectionTitle","paddingBottom","items","margin","writeTaskWrapper","position","bottom","addWrapper","addText","navWrapper","navButtonContainer","marginHorizontal","navButton","fab","right","PasswordList","useSelector","selectSnackbarVisible","selectSnackbarMessage","selectModalTitle","selectModalMessage","selectModalVisible","scrollIsClose2Bottom","setScrollIsClose2Bottom","isRequesting","selectRequest","handleBackAction","BackHandler","exitApp","addEventListener","unsubscribePasswordsCollection","onSnapshot","unsubscribeSocialMediaCollection","removeEventListener","ScrollView","scrollEventThrottle","onScroll","event","nativeEvent","layoutMeasurement","contentOffset","contentSize","paddingToBottom","result","contentContainerStyle","flexGrow","keyboardShouldPersistTaps","FAB","icon","resetSnackbar","resetModal","imageBackground","paddingTop","textShadowColor","textShadowOffset","textShadowRadius","divider","paddingLeft","CustomSidebar","userEmail","selectUserEmail","substring","indexOf","userName","ImageBackground","Section","DrawerItemList","DrawerItem","label","closeDrawer","signOut","CustomDrawer","createDrawerNavigator","screenOptions","drawerStyle","Dimensions","drawerActiveBackgroundColor","drawerActiveTintColor","drawerItemStyle","drawerContent","drawerIcon","Feather","image","textAlign","OnBoardingItem","useWindowDimensions","uri","resizeMode","marginVertical","dot","Paginator","scrollX","_","inputRange","dotWidth","interpolate","outputRange","extrapolate","opacity","Animated","NextButton","scrollTo","percentage","circumference","PI","progressAnimation","useRef","Value","current","progressRef","toValue","timing","useNativeDriver","start","addListener","strokeDashoffset","setNativeProps","removeAllListeners","rotation","origin","stroke","cx","cy","r","strokeWidth","ref","strokeDasharray","activeOpacity","FIREBASE_STORAGE_FINAL_URL","slides","currentIndex","setCurrentIndex","slidesRef","viewableItemsChanged","viewableItems","index","viewConfig","viewAreaCoveragePercentThreshold","FlatList","renderItem","showsHorizontalScrollIndicator","pagingEnabled","bounces","keyExtractor","onViewableItemsChanged","viewabilityConfig","scrollToIndex","sliderContainer","activeMark","left","inactiveMark","SliderContainer","switchEnabled","defaultValue","setValue","Number","isNaN","disabled","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","onValueChange","CustomCheckBox","isChecked","Checkbox","defaultProps","resetConfigurationState","unsetSocialMediaPicked","handleLeftCheckboxes","setCheck1","setCheck2","selector1","selector2","handleOtherCheckboxes","payloadString1","payloadString2","payload1","payload2","handleRightCheckboxes","checkbox1","checkbox2","checkbox3","configuratorAction","updateConfiguratorStateAndGeneratePassword","PasswordConfigurator","isEasy2Read","selectIsEasy2Read","isAllChar","selectIsAllChar","handleRightCheckboxesGivenLeftCheckboxes","setIsUpperCaseAndIsLowerCase","setIsNumbersAndIsSymbols","checkBox","section","setIsEasy2Read","setIsAllChar","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSymbols","createEditPassword","userInputContainer","textInput","dropdown","textLabel","descriptionLengthIndicator","CreateEditPasswordConfigurator","setDescription","selectSocialMediaList","createEditButtonLabel","cardView","Picker","selectedValue","itemValue","Item","maxLength","scrollViewRef","setSwitchEnabled","mPassword","mSetPassword","passwordFromState","screenTitle","isCreatedMode","showAuthenticatedMessage","useLayoutEffect","setOptions","screen","passwordStyle","onBlur","configuration","textContainer","textHeader","Divider","switchToggle","Switch","passwordLengthContainer","lengthSliderContainer","inputLength","keyboardType","popoverStyles","arrow","borderTopColor","background","CustomPopover","popoverVisible","closePopover","popoverAnchorRect","touchableRef","contentStyle","arrowStyle","backgroundStyle","onClose","fromRect","placement","supportedOrientations","usePopover","openPopover","signIn","buttonOutLine","buttonOutLineText","registerRootComponent","paragraph","checkbox","initialSnackbarState","initialModalState","extraReducers","builder","addCase","resetPasswordConfiguratorState","tooltipImage","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","firebase","apps","initializeApp","database","firestore","collection","signInWithEmailAndPassword","toLowerCase","userCredentials","alert","createUserWithEmailAndPassword","isRequest"],"mappings":"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","file":"static/js/app.04a1305e.chunk.js","sourcesContent":["import { logger } from 'react-native-logs';\n\nimport { passwordsCollection, socialMediaCollection } from 'services/firebase';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst log = logger.createLogger();\n\nconst sortBy = (obj1: any, obj2: any, field: string, kind: string = 'asc') => {\n  const x = kind === 'asc' ? 1 : -1;\n  return obj1[field] < obj2[field] ? -1 * x : obj1[field] > obj2[field] ? 1 * x : 0;\n};\n\nexport const getPasswordsByUserId = (userId: any) =>\n  passwordsCollection\n    .where('uid', '==', userId)\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.docs\n        .map((doc) => ({\n          id: doc.id,\n          passwordGenerated: doc.data().password_generated,\n          socialMedia: doc.data().social_media,\n          description: doc.data().description || defaultEmptyPasswordDescription,\n          createdAt: doc.data().createdAt,\n        }))\n        .sort((x, y) => sortBy(x, y, 'createdAt', process.env.PASSWORD_LIST_ORDER_TYPE))\n    )\n    .catch((error) => {\n      log.error('Error getting documents: ', error);\n    });\n\nexport const sendPassword2Firebase = async (\n  userId: string,\n  password: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .add({\n      createdAt: new Date().getTime(),\n      password_generated: password,\n      social_media: socialMedia,\n      description,\n      uid: userId,\n    })\n    .then(() => {\n      log.info('A new password was added in database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to add a new password in database: ', error);\n    });\n};\n\nexport const deletePasswordById = async (passwordId: string) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .delete()\n    .then(() => {\n      log.info('A password was deleted from database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to delete a password from database: ', error);\n    });\n};\n\nexport const updatePasswordByIdFromFirebase = async (\n  passwordId: string,\n  passwordGenerated: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .update({\n      password_generated: passwordGenerated,\n      description,\n      social_media: socialMedia,\n    })\n    .then(() => {\n      log.info('A password was updated from database.');\n    })\n    .catch((error) => {\n      log.error('Something went wrong trying to update a password from database: ', error);\n    });\n};\n\nexport const getSocialMedia = () =>\n  socialMediaCollection\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.docs.map((doc) => ({\n        id: doc.id,\n        name: doc.data().name,\n      }))\n    )\n    .catch((error) => {\n      log.error('Something went wrong trying to get social media list: ', error);\n    });\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { logger } from 'react-native-logs';\n\nconst appName = 'passvault';\nconst isObject = (value: string) => typeof value === 'object';\nconst log = logger.createLogger();\n\nconst storeData = async (key: string, value: any) => {\n  try {\n    const finalValue = isObject(value) ? JSON.stringify(value) : value.toString();\n    await AsyncStorage.setItem(key, finalValue);\n  } catch (e) {\n    log.error('From storeData: ', { asyncStorageException: e });\n  }\n};\n\n// eslint-disable-next-line consistent-return\nconst getData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (value !== null) {\n      return isObject(value) ? JSON.parse(value) : value;\n    }\n  } catch (e) {\n    log.error('From getData: ', { asyncStorageException: e });\n  }\n};\n\nconst removeItem = async (key: string) => {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch (e) {\n    log.error('From removeItem: ', { asyncStorageException: e });\n  }\n};\n\nconst setUserData2LS = (userId: string | undefined, email: string | null | undefined) => {\n  storeData(`${appName}.userId`, userId || '').then((data) => data);\n  storeData(`${appName}.email`, email || '').then((data) => data);\n};\n\nconst setPasswordGenerated = (password: string) => {\n  storeData(`${appName}.password`, password).then((data: void) => data);\n};\n\nconst getPasswordGenerated = () => {\n  const empty = { password: '' };\n\n  return getData(`${appName}.password`)\n    .then((password: string) => ({ password }))\n    .catch((err) => {\n      log.error('From getPasswordGenerated: ', { err });\n      return empty;\n    });\n};\n\nconst getUserDataFromLS = () => {\n  const empty = { userId: '', email: '' };\n\n  return getData(`${appName}.userId`)\n    .then((userId: string) => {\n      getData(`${appName}.email`)\n        .then((email: string) => ({\n          userId,\n          email,\n        }))\n        .catch((err: any) => {\n          log.error('From getData -> email: ', { err });\n          return empty;\n        });\n    })\n    .catch((err) => {\n      log.error('From getData -> userId: ', { err });\n      return empty;\n    });\n};\n\nconst clearUserDataFromLS = () => {\n  removeItem(`${appName}.userId`).then((res: void) => res);\n  removeItem(`${appName}.email`).then((res: void) => res);\n};\n\nconst setOnBoardingViewed = (value: any) => {\n  storeData(`${appName}.alreadyLaunched`, value).then((data: void) => data);\n};\n\nconst getOnBoardingViewed = () =>\n  getData(`${appName}.alreadyLaunched`)\n    .then((firstLaunchFlag) => firstLaunchFlag)\n    .catch((err) => {\n      log.error('From getOnBoardingViewed: ', { err });\n      return null;\n    });\n\nexport {\n  setUserData2LS,\n  getUserDataFromLS,\n  clearUserDataFromLS,\n  setPasswordGenerated,\n  getPasswordGenerated,\n  setOnBoardingViewed,\n  getOnBoardingViewed,\n};\n","import React from 'react';\n\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n});\n\nexport const LoadingIndicator = () => (\n  <View style={[styles.container, styles.horizontal]}>\n    <ActivityIndicator size='large' color='#3091e0' />\n  </View>\n);\n","import { ToastAndroid } from 'react-native';\n\nexport const showInfoMessage = (message: string) => {\n  ToastAndroid.show(message, ToastAndroid.SHORT);\n};\n","const lower = 'abcdefghijklmñopqrstuvwxyz';\nconst upper = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\nconst number = '0123456789';\nconst symbols = '[]{}<>\":|!@#$%^&*()_+`~/';\n\nconst devWarnings = [\n  'Clipboard has been extracted from react-native core',\n  'AsyncStorage has been extracted from react-native core',\n  'Setting a timer for a long period of time, i.e. multiple minutes',\n  'Picker has been extracted from react-native core and will be removed',\n];\n\nconst popoverMessage = 'You can generate passwords without store them.';\n\nconst defaultEmptyPasswordDescription = 'This password has no description. Please update it.';\n\nconst infoMessages = {\n  copied2Clipboard: 'The password was copied to clipboard',\n  newPassword: 'New password generated',\n  about2CreatePassword: \"You're about to create a new password\",\n};\n\nconst FIREBASE_STORAGE_URL = 'https://firebasestorage.googleapis.com';\nconst { FIREBASE_STORAGE_BUCKET } = process.env;\n\nconst imagesTokens = {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN: '9a72b084-fbf7-4ec0-bfc7-4c0c4fe923c7',\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN: '48ac40a8-14ac-4b31-8246-1b9a64efc19e',\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN: '9a4c9252-2f1e-4580-868c-e5d6fd383cd9',\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN: '65edc2f3-657d-43f9-89b1-a2e1be19e41f',\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN: '287fce56-7f18-4d06-a85b-24b6fbc42171',\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN: '79295f0a-cf45-4ed2-aa1d-0e7c29cafea3',\n  FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN: 'daa4acf7-8be3-4210-aae0-e9de589b846d',\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN: '5f6da2b8-26cc-48ca-8352-30afd0cb3dd3',\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN: '5cf416cc-0f22-4ca6-be38-fc816742a76e',\n};\n\nconst appColors = {\n  textTint: '#FFF',\n  maximumTintColorSlider: '#d3d3d3',\n  disabledColorSlider: '#D3D3D3',\n  activeTint: '#9ac8fc',\n  primary: '#3091e0',\n  primaryDark: '#236daa',\n  red: '#DB4437',\n};\n\nexport interface PasswordI {\n  id: string;\n  description: string;\n  passwordGenerated: string;\n  socialMedia: string;\n}\n\nexport {\n  devWarnings,\n  lower,\n  upper,\n  number,\n  symbols,\n  popoverMessage,\n  defaultEmptyPasswordDescription,\n  appColors,\n  infoMessages,\n  FIREBASE_STORAGE_URL,\n  FIREBASE_STORAGE_BUCKET,\n  imagesTokens,\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\ninterface PasswordI {\n  id: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  createdAt: number;\n}\n\nexport const initialState: {\n  password: string;\n  passwordIdPicked: string;\n  passwordPicked: string;\n  passwordDescriptionPicked: string;\n  length: number;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  isDeleteMode: boolean;\n  passwords: Array<PasswordI>;\n} = {\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n  passwords: [],\n};\n\nconst resetPasswordState = (state: any) => ({\n  ...state,\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n});\n\nexport const passwordSlice = createSlice({\n  name: 'password',\n  initialState,\n  reducers: {\n    setPassword: (state, { payload }) => ({\n      ...state,\n      password: payload.password,\n    }),\n    setPasswordPicked: (state, { payload }) => ({\n      ...state,\n      passwordPicked: payload.passwordPicked,\n    }),\n    setPasswordIdPicked: (state, { payload }) => ({\n      ...state,\n      passwordIdPicked: payload.passwordIdPicked,\n    }),\n    resetPasswordPicked: (state) => ({\n      ...state,\n      passwordPicked: '',\n    }),\n    setPasswordDescriptionPicked: (state, { payload }) => ({\n      ...state,\n      passwordDescriptionPicked: payload.passwordDescriptionPicked,\n    }),\n    setLength: (state, { payload }) => ({\n      ...state,\n      length: payload.length,\n    }),\n    setIsCreateMode: (state, { payload }) => ({\n      ...state,\n      isCreateMode: payload.isCreateMode,\n    }),\n    setIsEditMode: (state, { payload }) => ({\n      ...state,\n      isEditMode: payload.isEditMode,\n    }),\n    setIsDeleteMode: (state, { payload }) => ({\n      ...state,\n      isDeleteMode: payload.isDeleteMode,\n    }),\n    setPasswords: (state, { payload }) => ({\n      ...state,\n      passwords: payload.passwords,\n    }),\n    resetPasswordGeneratorState: (state) => resetPasswordState(state),\n    unsetPasswords: () => ({ ...initialState }),\n    generatePassword: () => {},\n    getPasswordsFromFirebase: () => {},\n    savePassword2Firebase: (state, { payload }) => {},\n    deletePasswordFromFirebase: () => {},\n    editPasswordFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setPassword,\n  setPasswordPicked,\n  setPasswordIdPicked,\n  resetPasswordPicked,\n  setPasswordDescriptionPicked,\n  setLength,\n  setIsCreateMode,\n  setIsEditMode,\n  setIsDeleteMode,\n  setPasswords,\n  resetPasswordGeneratorState,\n  unsetPasswords,\n  generatePassword,\n  getPasswordsFromFirebase,\n  savePassword2Firebase,\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n} = passwordSlice.actions;\n\nexport const selectPassword = (state: { password: { password: string } }) =>\n  state.password.password;\nexport const selectPasswordIdPicked = (state: { password: { passwordIdPicked: string } }) =>\n  state.password.passwordIdPicked;\nexport const selectPasswordPicked = (state: { password: { passwordPicked: string } }) =>\n  state.password.passwordPicked;\nexport const selectPasswordDescriptionPicked = (state: {\n  password: { passwordDescriptionPicked: string };\n}) => state.password.passwordDescriptionPicked;\nexport const selectIsCreateMode = (state: { password: { isCreateMode: boolean } }) =>\n  state.password.isCreateMode;\nexport const selectIsEditMode = (state: { password: { isEditMode: boolean } }) =>\n  state.password.isEditMode;\nexport const selectIsDeleteMode = (state: { password: { isDeleteMode: boolean } }) =>\n  state.password.isDeleteMode;\nexport const selectPasswordLength = (state: { password: { length: number } }) =>\n  state.password.length;\nexport const selectPasswords = (state: { password: { passwords: Array<PasswordI> } }) =>\n  state.password.passwords;\n","import React from 'react';\nimport { Snackbar } from 'react-native-paper';\n\n// Reference for Icons usage: https://icons.expo.fyi/\n\nexport const CustomSnackbar = ({ message, isSnackbarVisible, onDismiss }: Props) => (\n  <Snackbar visible={isSnackbarVisible} onDismiss={onDismiss} duration={1500}>\n    {message}\n  </Snackbar>\n);\n\ninterface Props {\n  message: string;\n  isSnackbarVisible: boolean;\n  onDismiss: any;\n}\n","import { select, put, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  generatePassword,\n  selectIsEditMode,\n  selectPasswordLength,\n  selectPasswordPicked,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { lower, upper, number, symbols } from 'utils/constants';\nimport { setPasswordGenerated } from 'utils/localStorageFuncs';\n\nimport {\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n  selectIsUpperCase,\n} from 'reduxStore/slices/configuratorSlice';\n\nconst log = logger.createLogger();\n\nfunction* getPasswordGeneratorFlow(): Generator {\n  try {\n    const length = yield select(selectPasswordLength);\n    const isUpperCase = yield select(selectIsUpperCase);\n    const isLowerCase = yield select(selectIsLowerCase);\n    const isNumbers = yield select(selectIsNumbers);\n    const isSymbols = yield select(selectIsSymbols);\n\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const isUpper: string = isUpperCase ? upper : '';\n    const isLower: string = isLowerCase ? lower : '';\n    const isNumber: string = isNumbers ? number : '';\n    const isSymbol: string = isSymbols ? symbols : '';\n\n    const all = isUpper + isLower + isNumber + isSymbol;\n    let password = '';\n\n    // @ts-ignore\n    for (let i = 0; i < length; i++) {\n      password += all.charAt(Math.floor(Math.random() * all.length));\n    }\n\n    setPasswordGenerated(password);\n\n    if (isEditMode) {\n      if (passwordPicked) {\n        // TODO: This flow needs to be updated in future\n        /* This condition will only be applied at the first time the user\n         * click in edit password, the password picked will be set as\n         * a generated password, and then will be deleted from the state.\n         * */\n        // @ts-ignore\n        password = passwordPicked;\n      }\n    }\n    yield put(setPassword({ password }));\n  } catch (exception) {\n    log.error('PasswordGeneratorSaga: ', { exception: exception.message });\n  }\n}\n\nexport const passwordGeneratorSaga = [takeLeading(generatePassword.type, getPasswordGeneratorFlow)];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { getPasswordsByUserId } from 'services/database';\n\nconst log = logger.createLogger();\n\nfunction* getPasswordsFlow(): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const passwords = yield call(getPasswordsByUserId, userId);\n\n    yield put(setPasswords({ passwords }));\n  } catch (exception) {\n    log.error('GetPasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const getPasswordsSaga = [takeLeading(getPasswordsFromFirebase.type, getPasswordsFlow)];\n","import { call, put, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\nimport { getSocialMedia } from 'services/database';\n\nconst log = logger.createLogger();\n\nfunction* getSocialMediaFlow(): Generator {\n  try {\n    const socialMediaList = yield call(getSocialMedia);\n\n    yield put(setSocialMediaList({ socialMediaList }));\n  } catch (exception) {\n    log.error('GetSocialMediaSaga: ', { exception: exception.message });\n  }\n}\n\nexport const getSocialMediaSaga = [\n  takeLeading(getSocialMediaListFromFirebase.type, getSocialMediaFlow),\n];\n","import { select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport { savePassword2Firebase } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { sendPassword2Firebase } from 'services/database';\n\nconst log = logger.createLogger();\n\nfunction* savePasswordFlow({ payload }: Params): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const { socialMedia, password, description } = payload;\n\n    // @ts-ignore\n    yield call(sendPassword2Firebase, userId, password, description, socialMedia);\n  } catch (exception) {\n    log.error('SavePasswordSaga: ', { exception: exception.message });\n  }\n}\n\n// @ts-ignore\nexport const savePasswordSaga = [takeLeading(savePassword2Firebase.type, savePasswordFlow)];\n\ninterface Params {\n  payload: {\n    socialMedia: string;\n    password: string;\n    description: string;\n  };\n}\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  deletePasswordFromFirebase,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { deletePasswordById } from 'services/database';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nconst log = logger.createLogger();\n\nfunction* deletePasswordFlow(): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n\n    yield put(setIsRequest());\n\n    // @ts-ignore\n    yield call(deletePasswordById, passwordId);\n\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('DeletePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const deletePasswordSaga = [\n  // @ts-ignore\n  takeLeading(deletePasswordFromFirebase.type, deletePasswordFlow),\n];\n","import { select, call, takeLeading, put } from 'redux-saga/effects';\nimport { logger } from 'react-native-logs';\n\nimport {\n  editPasswordFromFirebase,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { updatePasswordByIdFromFirebase } from 'services/database';\nimport { selectSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nconst log = logger.createLogger();\n\nfunction* updatePasswordFlow(): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n    const socialMedia = yield select(selectSocialMediaPicked);\n    const password = yield select(selectPassword);\n    const description = yield select(selectPasswordDescriptionPicked);\n\n    yield put(setIsRequest());\n    yield call(\n      // @ts-ignore\n      updatePasswordByIdFromFirebase,\n      passwordId,\n      password,\n      description,\n      socialMedia\n    );\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    log.error('UpdatePasswordSaga: ', { exception: exception.message });\n  }\n}\n\nexport const updatePasswordSaga = [takeLeading(editPasswordFromFirebase.type, updatePasswordFlow)];\n","import { all } from 'redux-saga/effects';\nimport { passwordGeneratorSaga } from 'reduxStore/sagas/passwordGeneratorSaga';\nimport { getPasswordsSaga } from 'reduxStore/sagas/getPasswordsSaga';\nimport { getSocialMediaSaga } from 'reduxStore/sagas/getSocialMediaSaga';\nimport { savePasswordSaga } from 'reduxStore/sagas/savePasswordSaga';\nimport { deletePasswordSaga } from 'reduxStore/sagas/deletePasswordSaga';\nimport { updatePasswordSaga } from 'reduxStore/sagas/updatePasswordSaga';\n\nexport default function* IndexSagas() {\n  yield all([\n    ...passwordGeneratorSaga,\n    ...getPasswordsSaga,\n    ...getSocialMediaSaga,\n    ...savePasswordSaga,\n    ...deletePasswordSaga,\n    ...updatePasswordSaga,\n  ]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { userSlice } from './userSlice';\nimport { passwordSlice } from './passwordSlice';\nimport { configuratorSlice } from 'reduxStore/slices/configuratorSlice';\nimport { applicationStatusSlice } from 'reduxStore/slices/applicationStatusSlice';\nimport { socialMediaSlice } from 'reduxStore/slices/socialMediaSlice';\nimport { uiElementsSlice } from 'reduxStore/slices/uiElementsSlice';\n\nconst createRootReducer = () =>\n  combineReducers({\n    user: userSlice.reducer,\n    password: passwordSlice.reducer,\n    configurator: configuratorSlice.reducer,\n    applicationStatus: applicationStatusSlice.reducer,\n    socialMedia: socialMediaSlice.reducer,\n    uiElements: uiElementsSlice.reducer,\n  });\n\nexport default createRootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport IndexSagas from 'reduxStore/sagas/index';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from 'reduxStore/slices/rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = configureStore({\n  reducer: createRootReducer(),\n  middleware,\n});\n\nsagaMiddleware.run(IndexSagas);\n\nexport default store;\n","module.exports = __webpack_public_path__ + \"static/media/passvault-512px.fb8f2fd2.png\";","import React, { useEffect, useState } from 'react';\n\nimport { LogBox, Platform } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport { logger } from 'react-native-logs';\n\nimport { Provider } from 'react-redux';\nimport { OnBoarding } from 'screens/OnBoarding/onBoarding';\nimport { Login } from 'screens/Login/login';\nimport { SignUp } from 'screens/SignUp/signup';\nimport { PasswordGenerator } from 'screens/PasswordGenerator/passwordGenerator';\nimport { Drawer } from 'screens/Drawer/drawer';\n\nimport store from 'reduxStore/store/index';\nimport { devWarnings } from 'utils/constants';\nimport { CustomStatusbar } from 'components/CustomStatusbar/customStatusbar';\nimport { getOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\n\nif (process.env.ENV === 'dev') {\n  LogBox.ignoreLogs(devWarnings);\n}\n\ndeclare global {\n  // eslint-disable-next-line no-unused-vars\n  interface Window {\n    store: any;\n  }\n}\n\nwindow.store = store;\nconst Stack = createNativeStackNavigator();\nconst log = logger.createLogger();\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [onBoardingViewed, setOnBoardingViewed] = useState(false);\n\n  useEffect(() => {\n    getOnBoardingViewed()\n      .then((value) => {\n        if (value === 'false' || value === undefined) {\n          setOnBoardingViewed(false);\n        } else {\n          setOnBoardingViewed(true);\n        }\n      })\n      .catch((err) => {\n        log.error('Error checking is first launch: ', { err });\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  if (onBoardingViewed === null) {\n    return null;\n  }\n  return (\n    <Provider store={store}>\n      <CustomStatusbar />\n      <NavigationContainer>\n        <Stack.Navigator>\n          {loading && (\n            <Stack.Screen\n              name='Loading'\n              component={LoadingIndicator}\n              options={{ headerShown: false }}\n            />\n          )}\n          {!onBoardingViewed && Platform.OS !== 'web' && (\n            <Stack.Screen\n              name='OnBoarding'\n              component={OnBoarding}\n              options={{ headerShown: false }}\n            />\n          )}\n          <Stack.Screen name='Login' component={Login} options={{ headerShown: false }} />\n          <Stack.Screen name='SignUp' component={SignUp} options={{ headerShown: false }} />\n          <Stack.Screen\n            name='PasswordGenerator'\n            component={PasswordGenerator}\n            options={{\n              headerStyle: {\n                backgroundColor: '#3091e0',\n              },\n              headerTintColor: '#FFF',\n            }}\n          />\n          <Stack.Screen\n            name='Drawer'\n            component={Drawer}\n            options={{\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { View, Text, Image, TextInput, TouchableOpacity } from 'react-native';\n\nimport { auth, signUp } from 'services/firebase';\n\nimport { shadow } from 'screens/PasswordGenerator/styles';\nimport styles from 'screens/Login/styles';\n\nexport const SignUp = ({ navigation }: Props) => {\n  const [username, setUsername] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleSignUp = () => {\n    signUp(username);\n    setUsername('');\n  };\n\n  return (\n    <View style={styles.container}>\n      <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder='Username'\n          value={username}\n          style={[styles.input, shadow.container]}\n          onChangeText={(text) => setUsername(text)}\n        />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={handleSignUp} style={styles.button}>\n          <Text style={styles.buttonText}>Sign up</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.linkContainer}>\n        <TouchableOpacity\n          onPress={() => {\n            // @ts-ignore\n            navigation.navigate('Login');\n          }}\n          style={styles.link}\n        >\n          <Text style={styles.linkText}>Go to Login if you have an account</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import React from 'react';\nimport { StatusBar } from 'react-native';\nimport { appColors } from 'utils/constants';\n\n/*\n * For more reference check this snack:\n *   https://snack.expo.dev/@ahmed_gaber/safe-area-context?platform=ios\n */\n\nexport const CustomStatusbar = () => (\n  <StatusBar animated barStyle='light-content' backgroundColor={appColors.primaryDark} />\n);\n\nexport default CustomStatusbar;\n","import React from 'react';\nimport { Image } from 'react-native';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nimport {\n  imageSourceRetriever,\n  socialMediaIcon,\n  socialMediaIconColor,\n} from 'utils/imageDataRetriever';\n\nexport const SocialMediaIcon = ({ style, socialMedia }: Props) => {\n  if (['amazon', 'discord', 'google', 'slack', 'okta', 'outlook', 'twitch'].includes(socialMedia)) {\n    const imageSource = imageSourceRetriever(socialMedia);\n\n    return <Image style={style} source={imageSource} />;\n  }\n  const getSocialMedia: any = socialMediaIcon(socialMedia);\n  const socialMediaColor = socialMediaIconColor(socialMedia);\n\n  return <AntDesign style={style} name={getSocialMedia} size={24} color={socialMediaColor} />;\n};\n\ninterface Props {\n  style: any;\n  socialMedia: string;\n}\n","export const imageSourceRetriever = (socialMedia: string) =>\n  socialMedia === 'amazon'\n    ? require('assets/amazon.png')\n    : socialMedia === 'discord'\n    ? require('assets/discord.png')\n    : socialMedia === 'google'\n    ? require('assets/google.png')\n    : socialMedia === 'slack'\n    ? require('assets/slack.png')\n    : socialMedia === 'okta'\n    ? require('assets/okta.png')\n    : socialMedia === 'outlook'\n    ? require('assets/outlook.png')\n    : socialMedia === 'twitch'\n    ? require('assets/twitch.png')\n    : '';\n\nexport const socialMediaIcon = (socialMedia: string) =>\n  socialMedia === 'facebook'\n    ? 'facebook-square'\n    : socialMedia === 'linkedin'\n    ? 'linkedin-square'\n    : socialMedia === 'other'\n    ? 'questioncircle'\n    : socialMedia;\n\nexport const socialMediaIconColor = (socialMedia: string) =>\n  socialMedia === 'facebook'\n    ? '#4267B2'\n    : socialMedia === 'twitter'\n    ? '#00ACEE'\n    : socialMedia === 'linkedin'\n    ? '#2867B2'\n    : 'black';\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const item = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFF',\n    padding: 10,\n    borderRadius: 5,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginLeft: 3,\n    marginRight: 3,\n    marginBottom: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n\n  socialIconAndPasswordInfo: { flex: 1, width: '50%', flexDirection: 'row', alignItems: 'center' },\n\n  passwordAndDescription: {\n    width: '81%',\n    paddingHorizontal: 5,\n    flexDirection: 'column',\n  },\n\n  descriptionTextLabel: { fontSize: 13, marginBottom: 5 },\n\n  passwordInput: {\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 15 : 14,\n  },\n});\n\nexport const icons = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n\n  socialMedia: { width: 24, height: 24, marginRight: 10 },\n\n  singleIcon: {\n    marginRight: 10,\n  },\n});\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  setIsDeleteMode,\n  setIsEditMode,\n  setPassword,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\n\nimport { Clipboard, Platform, TouchableOpacity, View } from 'react-native';\nimport { Entypo, FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { icons } from 'components/PasswordItem/styles';\n\nimport { appColors, infoMessages } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport {\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\n\nexport const PasswordIcons = ({\n  passwordId,\n  socialMedia,\n  description,\n  passwordGenerated,\n  passwordVisible,\n  setPasswordVisible,\n  navigation,\n}: Props) => {\n  const dispatch = useDispatch();\n\n  const mSocialMedia = socialMedia.charAt(0).toUpperCase() + socialMedia.slice(1);\n\n  const handleShowHidePassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.copied2Clipboard);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.copied2Clipboard }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    Clipboard.setString(passwordGenerated);\n  };\n\n  const handleEditButton = () => {\n    dispatch(setIsEditMode({ isEditMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setPasswordPicked({ passwordPicked: passwordGenerated }));\n    dispatch(setPassword({ password: passwordGenerated }));\n    dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n    dispatch(setSocialMediaPicked({ socialMediaPicked: socialMedia }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleDeleteButton = () => {\n    dispatch(setIsDeleteMode({ isDeleteMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setModalTitle({ modalTitle: 'Delete password warning' }));\n    dispatch(\n      setModalMessage({\n        modalMessage: `Are you sure you want to delete this ${mSocialMedia}'s password?`,\n      })\n    );\n    dispatch(setModalVisible({ modalVisible: true }));\n  };\n\n  return (\n    <View style={icons.container}>\n      <TouchableOpacity onPress={handleShowHidePassword}>\n        <Entypo\n          style={icons.singleIcon}\n          name={passwordVisible ? 'eye' : 'eye-with-line'}\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleCopyButton}>\n        <MaterialCommunityIcons\n          style={icons.singleIcon}\n          name='content-copy'\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleEditButton}>\n        <FontAwesome style={{ marginRight: 5 }} name='edit' size={18} color='grey' />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleDeleteButton}>\n        <Ionicons name='trash' size={18} color={appColors.red} />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  socialMedia: string;\n  description: string;\n  passwordGenerated: string;\n  passwordVisible: boolean;\n  setPasswordVisible: any;\n  navigation: any;\n}\n","import React, { useState } from 'react';\nimport { View, Text, TextInput } from 'react-native';\n\nimport { SocialMediaIcon } from 'components/SocialMediaIcon/socialMediaIcon';\nimport { PasswordIcons } from 'components/PasswordIcons/passwordIcon';\n\nimport { icons, item } from './styles';\n\nexport const PasswordItem = ({\n  passwordId,\n  passwordGenerated,\n  socialMedia,\n  description,\n  navigation,\n}: Props) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  return (\n    <View style={item.container}>\n      <View style={item.socialIconAndPasswordInfo}>\n        <SocialMediaIcon style={icons.socialMedia} socialMedia={socialMedia} />\n        <View style={item.passwordAndDescription}>\n          <Text style={item.descriptionTextLabel}>{description}</Text>\n          <TextInput\n            style={item.passwordInput}\n            showSoftInputOnFocus={false}\n            caretHidden\n            value={passwordGenerated}\n            secureTextEntry={!passwordVisible}\n          />\n        </View>\n      </View>\n      <PasswordIcons\n        passwordId={passwordId}\n        socialMedia={socialMedia}\n        description={description}\n        passwordGenerated={passwordGenerated}\n        passwordVisible={passwordVisible}\n        setPasswordVisible={setPasswordVisible}\n        navigation={navigation}\n      />\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  navigation: any;\n}\n","import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  content: {\n    flexDirection: 'column',\n    backgroundColor: 'white',\n    padding: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 4,\n    borderColor: 'rgba(0, 0, 0, 0.1)',\n  },\n\n  title: {\n    alignSelf: 'flex-start',\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 12,\n  },\n\n  message: {\n    alignSelf: 'flex-start',\n    marginBottom: 10,\n  },\n\n  input: {\n    width: '90%',\n    alignSelf: 'flex-start',\n    borderWidth: 1,\n    borderRadius: 10,\n    marginTop: 15,\n    marginBottom: 20,\n    paddingVertical: 3,\n    paddingHorizontal: 15,\n  },\n\n  buttonContainer: {\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    paddingHorizontal: 5,\n  },\n});\n","import React, { useEffect } from 'react';\nimport { Text, View } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport Modal from 'react-native-modal';\nimport { appColors } from 'utils/constants';\n\nimport { styles } from './styles';\n\nexport const CustomModal = (props: {\n  visible: boolean;\n  toggle: any;\n  onSubmit: any;\n  title: string;\n  message: string;\n  okButtonMessage: string;\n  cancelButtonMessage: string;\n}) => {\n  const { visible, toggle, onSubmit, title, message, okButtonMessage, cancelButtonMessage } = props;\n\n  return (\n    <Modal isVisible={visible} onBackdropPress={toggle} onBackButtonPress={toggle}>\n      <View style={styles.content}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.message}>{message}</Text>\n        <View style={styles.buttonContainer}>\n          <View style={styles.button}>\n            <MaterialIcons.Button name='close' onPress={toggle} backgroundColor={appColors.red}>\n              No\n            </MaterialIcons.Button>\n          </View>\n          <View style={styles.button}>\n            <MaterialIcons.Button\n              name='check'\n              onPress={onSubmit}\n              backgroundColor={appColors.primary}\n            >\n              Yes\n            </MaterialIcons.Button>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#EBEAED',\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingBottom: 20,\n  },\n  items: {\n    margin: 20,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 20,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    width: 250,\n    backgroundColor: '#FFF',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    borderRadius: 60,\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {\n    position: 'absolute',\n    alignItems: 'center',\n    fontSize: 45,\n    color: '#C0C0C0',\n  },\n  navWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  navButtonContainer: {\n    justifyContent: 'center',\n    backgroundColor: '#E13333',\n    width: '78%',\n    padding: 6,\n    marginTop: 2,\n    marginHorizontal: 10,\n    borderRadius: 10,\n  },\n  navButton: {\n    alignItems: 'center',\n    fontSize: 13,\n    fontWeight: '700',\n    color: 'white',\n  },\n\n  fab: {\n    position: 'absolute',\n    margin: 26,\n    right: 0,\n    backgroundColor: appColors.primary,\n  },\n});\n\nexport default styles;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n  getPasswordsFromFirebase,\n  selectIsDeleteMode,\n  selectIsEditMode,\n  selectPasswords,\n  setIsCreateMode,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport {\n  resetModal,\n  resetSnackbar,\n  selectModalMessage,\n  selectModalTitle,\n  selectModalVisible,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\nimport { getSocialMediaListFromFirebase } from 'reduxStore/slices/socialMediaSlice';\n\nimport { View, ScrollView, BackHandler, Platform } from 'react-native';\nimport { FAB } from 'react-native-paper';\n\nimport { PasswordItem } from 'components/PasswordItem/passwordItem';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { CustomModal as Modal } from 'components/CustomModal/customModal';\n\nimport { passwordsCollection, socialMediaCollection } from 'services/firebase';\n\nimport { appColors, PasswordI } from 'utils/constants';\nimport styles from './styles';\n\nexport const PasswordList = ({ navigation }: Props) => {\n  const snackbarVisible = useSelector(selectSnackbarVisible);\n  const snackbarMessage = useSelector(selectSnackbarMessage);\n\n  const modalTitle = useSelector(selectModalTitle);\n  const modalMessage = useSelector(selectModalMessage);\n  const modalVisible = useSelector(selectModalVisible);\n\n  const isEditMode = useSelector(selectIsEditMode);\n  const isDeleteMode = useSelector(selectIsDeleteMode);\n\n  const [scrollIsClose2Bottom, setScrollIsClose2Bottom] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const passwords = useSelector(selectPasswords);\n  const isRequesting = useSelector(selectRequest);\n\n  const handleBackAction = () => {\n    BackHandler.exitApp();\n    return false;\n  };\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n\n    const unsubscribePasswordsCollection = passwordsCollection.onSnapshot(() => {\n      dispatch(getPasswordsFromFirebase());\n    });\n\n    const unsubscribeSocialMediaCollection = socialMediaCollection.onSnapshot(() => {\n      dispatch(getSocialMediaListFromFirebase());\n    });\n\n    // remove those next once the component got unmounted\n    return () => {\n      unsubscribeSocialMediaCollection();\n      unsubscribePasswordsCollection();\n      BackHandler.removeEventListener('hardwareBackPress', handleBackAction);\n    };\n  }, []);\n\n  const handleScrollIsClose2Bottom = (event: any) => {\n    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;\n    const paddingToBottom = Platform.OS === 'web' ? 7 : 10;\n    const result =\n      layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n\n    setScrollIsClose2Bottom(result);\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnPressFAB = () => {\n    dispatch(setIsCreateMode({ isCreateMode: true }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleModalToggle = () => {\n    dispatch(resetModal());\n  };\n  const handleModalOnSubmit = () => {\n    if (isDeleteMode) {\n      dispatch(deletePasswordFromFirebase());\n    } else if (isEditMode) {\n      dispatch(editPasswordFromFirebase());\n      navigation.navigate('PasswordList');\n    }\n    dispatch(resetModal());\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <ScrollView\n            scrollEventThrottle={16}\n            onScroll={handleScrollIsClose2Bottom}\n            contentContainerStyle={{ flexGrow: 1 }}\n            keyboardShouldPersistTaps='handled'\n          >\n            <View style={styles.items}>\n              {passwords.map(({ id, description, passwordGenerated, socialMedia }: PasswordI) => (\n                <PasswordItem\n                  key={id}\n                  passwordId={id}\n                  passwordGenerated={passwordGenerated}\n                  socialMedia={socialMedia}\n                  description={description}\n                  navigation={navigation}\n                />\n              ))}\n            </View>\n          </ScrollView>\n          <FAB\n            style={[styles.fab, { bottom: snackbarVisible ? 40 : 0 }]}\n            color={appColors.textTint}\n            visible={!scrollIsClose2Bottom}\n            icon='plus'\n            onPress={handleOnPressFAB}\n          />\n          <CustomSnackbar\n            message={snackbarMessage}\n            isSnackbarVisible={snackbarVisible}\n            onDismiss={handleOnDismissSnackbar}\n          />\n          <Modal\n            visible={modalVisible}\n            toggle={handleModalToggle}\n            onSubmit={handleModalOnSubmit}\n            title={modalTitle}\n            message={modalMessage}\n            okButtonMessage='Yes'\n            cancelButtonMessage='No'\n          />\n        </View>\n      )}\n    </>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import { StyleSheet, Platform } from 'react-native';\n\nexport const imageBackground = StyleSheet.create({\n  container: {\n    width: undefined,\n    padding: 16,\n    paddingTop: 48,\n  },\n  name: {\n    marginTop: 60,\n    paddingHorizontal: 5,\n    color: '#F0F0F0',\n    backgroundColor: 'rgba(48, 145, 224, 0.6)',\n    borderRadius: 5,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textShadowColor: '#000',\n    textShadowOffset: { width: 5, height: 5 },\n    textShadowRadius: 10,\n  },\n});\n\nexport const divider = StyleSheet.create({\n  divider: {\n    marginHorizontal: 20,\n    marginTop: 40,\n    marginBottom: 20,\n    backgroundColor: '#464646',\n  },\n});\n\nexport const signout = StyleSheet.create({\n  container: {\n    backgroundColor: '#F3BBBB',\n    borderRadius: 5,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    marginHorizontal: 10,\n    paddingVertical: 15,\n    paddingLeft: Platform.OS === 'web' ? 19 : 17,\n  },\n  icon: {\n    marginRight: 32,\n  },\n  text: {\n    color: '#F11D1D',\n  },\n});\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport { Text, ScrollView, ImageBackground } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Drawer } from 'react-native-paper';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { selectUserEmail } from 'reduxStore/slices/userSlice';\nimport { unsetPasswords, setIsCreateMode } from 'reduxStore/slices/passwordSlice';\n\nimport { signOut } from 'services/firebase';\n\n// eslint-disable-next-line import/no-unresolved\nimport { DrawerDescriptorMap } from '@react-navigation/drawer/lib/typescript/src/types';\nimport { DrawerNavigationState, ParamListBase } from '@react-navigation/routers';\nimport { imageBackground } from './styles';\n\nexport const CustomSidebar = (props: Props) => {\n  const userEmail = useSelector(selectUserEmail);\n  const name = userEmail ? userEmail.substring(0, userEmail.indexOf('@')) : '';\n  const userName = name.charAt(0).toUpperCase() + name.slice(1);\n  const { navigation } = props;\n  const dispatch = useDispatch();\n\n  const handleSignOut = () => {\n    signOut().then(() => {\n      dispatch(unsetPasswords());\n      navigation.replace('Login');\n    });\n  };\n\n  return (\n    <SafeAreaProvider>\n      <ImageBackground\n        source={require('assets/img/sidebar-banner.png')}\n        style={imageBackground.container}\n      >\n        <Text style={imageBackground.name}>Hi there, {userName} !</Text>\n      </ImageBackground>\n      <Drawer.Section title='Pages'>\n        <ScrollView style={{ paddingTop: 10 }}>\n          <DrawerItemList {...props} />\n          <DrawerItem\n            label='Password Generator'\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons name='engine-outline' size={size * 0.75} color={color} />\n            )}\n            onPress={() => {\n              navigation.closeDrawer();\n              dispatch(setIsCreateMode({ isCreateMode: true }));\n              navigation.navigate('PasswordGenerator');\n            }}\n          />\n        </ScrollView>\n      </Drawer.Section>\n\n      <Drawer.Section>\n        <DrawerItem\n          icon={({ color, size }) => (\n            <MaterialIcons name='logout' size={size * 0.75} color={color} />\n          )}\n          label='Sign out'\n          onPress={handleSignOut}\n        />\n      </Drawer.Section>\n    </SafeAreaProvider>\n  );\n};\n\ninterface Props {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: any;\n  descriptors: DrawerDescriptorMap;\n}\n","import React from 'react';\n\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport { PasswordList } from 'screens/PasswordList/passwordList';\nimport { CustomSidebar } from 'components/CustomSidebar/customSidebar';\n\nimport { Feather } from '@expo/vector-icons';\nimport { Dimensions } from 'react-native';\n\nconst CustomDrawer = createDrawerNavigator();\n\nexport const Drawer = () => (\n  <CustomDrawer.Navigator\n    screenOptions={{\n      drawerStyle: {\n        width: Dimensions.get('window').width * 0.7,\n      },\n      drawerActiveBackgroundColor: '#9ac8fc',\n      drawerActiveTintColor: '#3091e0',\n      drawerItemStyle: {\n        borderRadius: 5,\n      },\n    }}\n    drawerContent={(props) => <CustomSidebar {...props} />}\n  >\n    <CustomDrawer.Screen\n      name='PasswordList'\n      component={PasswordList}\n      options={{\n        title: 'Password List',\n        headerStyle: {\n          backgroundColor: '#3091e0',\n        },\n        headerTintColor: '#FFF',\n        drawerIcon: ({ color, size }) => <Feather name='list' size={size * 0.75} color={color} />,\n      }}\n    />\n  </CustomDrawer.Navigator>\n);\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 10,\n  },\n\n  image: {\n    flex: 0.7,\n    borderRadius: 3,\n    justifyContent: 'center',\n  },\n\n  title: {\n    fontWeight: 'bold',\n    fontSize: 25,\n    marginBottom: 5,\n    color: appColors.primaryDark,\n    textAlign: 'center',\n  },\n\n  description: {\n    fontSize: 14,\n    color: 'grey',\n    textAlign: 'center',\n    paddingHorizontal: 64,\n  },\n});\n","import { Image, Text, useWindowDimensions, View } from 'react-native';\nimport React from 'react';\n\nimport { styles } from './styles';\n\nexport const OnBoardingItem = ({ item }: Props) => {\n  const { title, description, image } = item;\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={[styles.container, { width }]}>\n      <Image\n        source={{\n          uri: image,\n        }}\n        style={[styles.image, { width, resizeMode: 'contain' }]}\n      />\n\n      <View style={{ flex: 0.3, marginTop: 15, paddingTop: 5, paddingHorizontal: 8 }}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.description}>{description}</Text>\n      </View>\n    </View>\n  );\n};\n\ninterface Props {\n  item: { id: number; title: string; description: string; image: string };\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    height: 15,\n    marginVertical: 5,\n    marginBottom: 10,\n  },\n\n  dot: {\n    height: 10,\n    borderRadius: 10,\n    backgroundColor: appColors.primaryDark,\n    marginHorizontal: 8,\n  },\n});\n","import React from 'react';\nimport { View, Animated, useWindowDimensions } from 'react-native';\n\nimport { styles } from './styles';\n\nexport function Paginator({ data, scrollX }: Props) {\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={styles.container}>\n      {data.map((_: any, i: number) => {\n        const inputRange = [(i - 1) * width, i * width, (i + 1) * width];\n        const dotWidth = scrollX.interpolate({\n          inputRange,\n          outputRange: [10, 20, 10],\n          extrapolate: 'clamp',\n        });\n        const opacity = scrollX.interpolate({\n          inputRange,\n          outputRange: [0.3, 1, 0.3],\n          extrapolate: 'clamp',\n        });\n\n        return <Animated.View key={i} style={[styles.dot, { width: dotWidth, opacity }]} />;\n      })}\n    </View>\n  );\n}\n\ninterface Props {\n  data: any;\n  scrollX: any;\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n\n  button: {\n    position: 'absolute',\n    backgroundColor: appColors.primary,\n    borderRadius: 100,\n    padding: 15,\n  },\n});\n","import React, { useEffect, useRef } from 'react';\nimport { View, TouchableOpacity, Animated } from 'react-native';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport { AntDesign } from '@expo/vector-icons';\nimport { appColors } from 'utils/constants';\n\nimport { styles } from './styles';\n\nexport const NextButton = ({ scrollTo, percentage }: Props) => {\n  const size = 80;\n  const strokeWidth = 2;\n  const center = size / 2;\n  const radius = size / 2 - strokeWidth / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  const progressAnimation = useRef(new Animated.Value(0)).current;\n  const progressRef = useRef(null);\n\n  const animation = (toValue: any) =>\n    Animated.timing(progressAnimation, {\n      toValue,\n      duration: 250,\n      useNativeDriver: true,\n    }).start();\n\n  useEffect(() => {\n    animation(percentage);\n  }, [percentage]);\n\n  useEffect(() => {\n    progressAnimation.addListener(\n      (value) => {\n        const strokeDashoffset = circumference - (circumference * value.value) / 100;\n\n        if (progressRef?.current) {\n          // @ts-ignore\n          progressRef.current.setNativeProps({\n            strokeDashoffset,\n          });\n        }\n      },\n      // @ts-ignore\n      [percentage]\n    );\n\n    return () => {\n      progressAnimation.removeAllListeners();\n    };\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Svg width={size} height={size}>\n        <G rotation='-90' origin={center}>\n          <Circle\n            stroke={appColors.maximumTintColorSlider}\n            cx={center}\n            cy={center}\n            r={radius}\n            strokeWidth={strokeWidth}\n          />\n          <Circle\n            ref={progressRef}\n            stroke={appColors.primaryDark}\n            cx={center}\n            cy={center}\n            r={radius}\n            strokeWidth={strokeWidth}\n            strokeDasharray={circumference}\n            // strokeDashoffset={circumference - (circumference * 100) / 100}\n          />\n        </G>\n      </Svg>\n      <TouchableOpacity style={styles.button} activeOpacity={0.6} onPress={scrollTo}>\n        <AntDesign name='arrowright' size={20} color='#FFF' />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\ninterface Props {\n  scrollTo: any;\n  percentage: any;\n}\n","import { FIREBASE_STORAGE_BUCKET, FIREBASE_STORAGE_URL, imagesTokens } from 'utils/constants';\n\nconst {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN,\n} = imagesTokens;\nconst FIREBASE_STORAGE_FINAL_URL = `${FIREBASE_STORAGE_URL}/v0/b/${FIREBASE_STORAGE_BUCKET}/o`;\n\nexport const slides = [\n  {\n    id: 1,\n    title: 'Welcome to Passvault!',\n    description: 'The main goal of this app is to generate secure and configurable passwords',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/welcome.png?alt=media&token=${FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN}`,\n  },\n  {\n    id: 2,\n    title: 'Password Generator',\n    description: 'Configure and generate a password is very simple!',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password_generator.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN}`,\n  },\n  {\n    id: 3,\n    title: 'Storing Generated Passwords',\n    description: 'Optionally you can enroll up and store many generated passwords',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/sign-up.png?alt=media&token=${FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 4,\n    title: 'Signup is very easy!',\n    description:\n      \"No passwords required, duh! you only need a username with more than 6 characters for signup and login. That's it!\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/easy-signup.gif?alt=media&token=${FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 5,\n    title: 'Free to use',\n    description:\n      \"If you don't feel comfortable creating an account, you can still generate passwords but those wont't be stored\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/free-to-use.png?alt=media&token=${FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN}`,\n  },\n  {\n    id: 6,\n    title: 'Check your Generated Passwords listed',\n    description:\n      \"If you're an authenticated user all your passwords will be listed (latest listed first), and navigate with a sidebar menu\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/passwords-listed.png?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN}`,\n  },\n  {\n    id: 7,\n    title: 'Place your initial password',\n    description:\n      \"If you prefer, you can place an initial password when you're creating a new entry, otherwise generate a password\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/initial-password.gif?alt=media&token=${FIREBASE_FIRESTORAGE_INITIAL_PASSWORD_IMAGE_TOKEN}`,\n  },\n  {\n    id: 8,\n    title: 'Update your existing passwords',\n    description:\n      'In order to avoid to create more entries, you can update an existing password and save the changes',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password-edit.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN}`,\n  },\n  {\n    id: 9,\n    title: \"Let's go with it!\",\n    description: \"Now we're ready to start to use Passvault!\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/onboarding-completed.png?alt=media&token=${FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN}`,\n  },\n];\n","import React, { useRef, useState } from 'react';\nimport { View, StyleSheet, FlatList, Animated } from 'react-native';\nimport { OnBoardingItem } from 'components/OnBoarding/OnBoardingItem/onBoardingItem';\nimport { Paginator } from 'components/OnBoarding/Paginator/paginator';\nimport { NextButton } from 'components/OnBoarding/NextButton/nextButton';\nimport { setOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { slides } from './slides';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport const OnBoarding = ({ navigation }: Props) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const scrollX = useRef(new Animated.Value(0)).current;\n  const slidesRef = useRef(null);\n\n  const viewableItemsChanged = useRef((item: { viewableItems: any }) => {\n    const { viewableItems } = item;\n    setCurrentIndex(viewableItems[0].index);\n  }).current;\n\n  const viewConfig = useRef({ viewAreaCoveragePercentThreshold: 50 }).current;\n\n  const scrollTo = () => {\n    if (currentIndex < slides.length - 1) {\n      // @ts-ignore\n      slidesRef.current.scrollToIndex({ index: currentIndex + 1 });\n    } else {\n      setOnBoardingViewed('true');\n      navigation.replace('Login');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={{ flex: 1 }}>\n        <FlatList\n          ref={slidesRef}\n          data={slides}\n          renderItem={({ item }) => <OnBoardingItem item={item} />}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          pagingEnabled\n          bounces={false}\n          keyExtractor={(item) => `${item.id}`}\n          onScroll={Animated.event([{ nativeEvent: { contentOffset: { x: scrollX } } }], {\n            useNativeDriver: false,\n          })}\n          onViewableItemsChanged={viewableItemsChanged}\n          viewabilityConfig={viewConfig}\n        />\n      </View>\n      <Paginator data={slides} scrollX={scrollX} />\n      <NextButton scrollTo={scrollTo} percentage={(currentIndex + 1) * (100 / slides.length)} />\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import { Platform, StyleSheet } from 'react-native';\n\nconst borderWidth = 4;\n\nexport const styles = StyleSheet.create({\n  sliderContainer: {\n    width: Platform.OS === 'web' ? '85%' : '80%',\n    paddingVertical: 10,\n    paddingLeft: 10,\n    flexDirection: 'column',\n  },\n});\n\nexport const trackMarkStyles = StyleSheet.create({\n  activeMark: {\n    borderColor: 'red',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n  inactiveMark: {\n    borderColor: 'grey',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { generatePassword, selectPasswordPicked, setLength } from 'reduxStore/slices/passwordSlice';\n\nimport { View } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport { appColors } from 'utils/constants';\nimport { styles } from './styles';\n\n// Reference: https://youtu.be/MwSudWtT7ps?t=271\n\nconst SliderContainer = ({ switchEnabled, defaultValue }: Props) => {\n  const [value, setValue] = useState(defaultValue);\n  const passwordPicked = useSelector(selectPasswordPicked);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!Number.isNaN(value) && !passwordPicked && !switchEnabled) {\n      // TODO: This flow needs to be updated in future\n      /* If there was a password picked for the edit flow\n       * a new password won't be generated.\n       * */\n      dispatch(setLength({ length: value }));\n      dispatch(generatePassword());\n    }\n  }, [value]);\n\n  return (\n    <View style={styles.sliderContainer}>\n      <Slider\n        disabled={switchEnabled}\n        step={1}\n        value={switchEnabled ? 0 : defaultValue}\n        minimumValue={switchEnabled ? 0 : 6}\n        maximumValue={switchEnabled ? 1 : 50}\n        minimumTrackTintColor={switchEnabled ? appColors.disabledColorSlider : appColors.primary}\n        maximumTrackTintColor={\n          switchEnabled ? appColors.disabledColorSlider : appColors.maximumTintColorSlider\n        }\n        thumbTintColor={switchEnabled ? appColors.disabledColorSlider : appColors.primary}\n        onValueChange={setValue}\n      />\n    </View>\n  );\n};\n\nexport default SliderContainer;\n\ninterface Props {\n  switchEnabled: boolean;\n  defaultValue: number;\n}\n","import React from 'react';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nexport const CustomCheckBox = ({ label, isChecked, disabled, color, onPress }: Props) => (\n  <TouchableOpacity\n    disabled={disabled}\n    style={{ flexDirection: 'row', alignItems: 'center' }}\n    onPress={onPress}\n  >\n    <Checkbox\n      style={{ margin: 8 }}\n      value={isChecked}\n      disabled={disabled}\n      color={isChecked ? color : undefined}\n    />\n    <Text style={{ fontSize: 14, opacity: !disabled ? 1 : 0.3 }}>{label}</Text>\n  </TouchableOpacity>\n);\n\nconst defaultProps = {\n  disabled: false,\n};\n\ninterface Props {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  color: string;\n  onPress: any;\n}\n\nCustomCheckBox.defaultProps = defaultProps;\n","import { generatePassword, resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { infoMessages } from 'utils/constants';\nimport { unsetSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\n/* Password Generator utils */\nexport const resetConfigurationState = (dispatch: any) => {\n  dispatch(resetPasswordGeneratorState());\n  dispatch(unsetSocialMediaPicked());\n};\n\nexport const handleGeneratePassword = (passwordFromState: string, dispatch: any) => {\n  if (!passwordFromState) {\n    dispatch(generatePassword());\n  }\n};\n\nexport const showAuthenticatedMessage = (userId: string, isCreatedMode: boolean) => {\n  if (userId && isCreatedMode) {\n    showInfoMessage(infoMessages.about2CreatePassword);\n  }\n};\n\n/* Password Generator Configurator utils */\nexport const handleLeftCheckboxes = (\n  dispatch: any,\n  setCheck1: any,\n  setCheck2: any,\n  selector1: string,\n  selector2: string,\n  value: boolean,\n  handleOtherCheckboxes: any\n) => {\n  const payloadString1 = `{ \"${selector1}\": ${value} }`;\n  const payloadString2 = `{ \"${selector2}\": ${!value} }`;\n  const payload1 = JSON.parse(payloadString1);\n  const payload2 = JSON.parse(payloadString2);\n\n  dispatch(setCheck1(payload1));\n  dispatch(setCheck2(payload2));\n\n  handleOtherCheckboxes();\n};\n\nexport const handleRightCheckboxes = (\n  value: boolean,\n  checkbox1: boolean,\n  checkbox2: boolean,\n  checkbox3: boolean,\n  dispatch: any,\n  configuratorAction: any,\n  payload: object\n) => {\n  if (checkbox1 || checkbox2 || checkbox3) {\n    dispatch(configuratorAction(payload));\n  }\n};\n\nexport const updateConfiguratorStateAndGeneratePassword = (dispatch: any) => {\n  dispatch(generatePassword());\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { View } from 'react-native';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { checkBox } from 'screens/PasswordGenerator/styles';\nimport {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n  selectIsEasy2Read,\n  selectIsAllChar,\n  selectIsUpperCase,\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n} from 'reduxStore/slices/configuratorSlice';\nimport { generatePassword } from 'reduxStore/slices/passwordSlice';\n\nimport {\n  handleLeftCheckboxes,\n  handleRightCheckboxes,\n  updateConfiguratorStateAndGeneratePassword,\n} from 'utils/configuratorUtils';\nimport { appColors } from 'utils/constants';\n\n/* Reference for checkbox usage: [\n  https://docs.expo.dev/versions/latest/sdk/checkbox/,\n  https://snack.expo.dev/\n]\n */\n\nexport const PasswordConfigurator = ({ switchEnabled }: Props) => {\n  const dispatch = useDispatch();\n\n  const isEasy2Read = useSelector(selectIsEasy2Read);\n  const isAllChar = useSelector(selectIsAllChar);\n\n  const isUpperCase = useSelector(selectIsUpperCase);\n  const isLowerCase = useSelector(selectIsLowerCase);\n  const isNumbers = useSelector(selectIsNumbers);\n  const isSymbols = useSelector(selectIsSymbols);\n\n  const handleRightCheckboxesGivenLeftCheckboxes = () => {\n    dispatch(setIsUpperCaseAndIsLowerCase({ isUpperCase: true, isLowerCase: true }));\n\n    if (!isEasy2Read || isAllChar) {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: false, isSymbols: false }));\n    } else {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: true, isSymbols: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  return (\n    <View style={checkBox.container}>\n      {/* Left checkboxes */}\n      <View style={{ flexDirection: 'column', marginLeft: -20 }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Easy to read'\n            isChecked={isEasy2Read}\n            disabled={switchEnabled}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsEasy2Read,\n                setIsAllChar,\n                'isEasy2Read',\n                'isAllChar',\n                !isEasy2Read,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='All characters'\n            isChecked={isAllChar}\n            disabled={switchEnabled}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsAllChar,\n                setIsEasy2Read,\n                'isAllChar',\n                'isEasy2Read',\n                !isAllChar,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n      </View>\n\n      {/* Right checkboxes */}\n      <View style={{ flexDirection: 'column' }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Uppercase'\n            isChecked={isUpperCase}\n            disabled={switchEnabled}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isUpperCase,\n                isLowerCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsUpperCase,\n                { isUpperCase: !isUpperCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Lowercase'\n            isChecked={isLowerCase}\n            disabled={switchEnabled}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isLowerCase,\n                isUpperCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsLowerCase,\n                { isLowerCase: !isLowerCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Numbers'\n            isChecked={isNumbers}\n            disabled={!isAllChar || switchEnabled}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isNumbers,\n                isUpperCase,\n                isLowerCase,\n                isSymbols,\n                dispatch,\n                setIsNumbers,\n                {\n                  isNumbers: !isNumbers,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Symbols'\n            isChecked={isSymbols}\n            disabled={!isAllChar || switchEnabled}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isSymbols,\n                isUpperCase,\n                isLowerCase,\n                isNumbers,\n                dispatch,\n                setIsSymbols,\n                {\n                  isSymbols: !isSymbols,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch);\n            }}\n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n\ninterface Props {\n  switchEnabled: boolean;\n}\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const createEditPassword = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n\n  userInputContainer: {\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: 10,\n    marginBottom: 5,\n  },\n\n  textInput: {\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n    marginBottom: 5,\n  },\n\n  dropdown: {\n    borderRadius: 10,\n    backgroundColor: 'white',\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n  },\n\n  textLabel: { fontSize: 17, marginRight: 5, marginBottom: 5 },\n\n  descriptionLengthIndicator: {\n    fontSize: 12,\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  savePassword2Firebase,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n  selectPasswordIdPicked,\n  setPasswordIdPicked,\n  setPasswordDescriptionPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport {\n  selectSocialMediaList,\n  selectSocialMediaPicked,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\n\nimport { Picker, Text, TextInput, View } from 'react-native';\nimport { Entypo } from '@expo/vector-icons';\n\nimport { cardView, shadow } from 'screens/PasswordGenerator/styles';\nimport { appColors, defaultEmptyPasswordDescription } from 'utils/constants';\nimport { setModalMessage, setModalTitle, setModalVisible } from 'reduxStore/slices/uiElementsSlice';\nimport { createEditPassword } from './styles';\n\nexport const CreateEditPasswordConfigurator = ({ navigation }: Props) => {\n  const dispatch = useDispatch();\n  const passwordDescriptionMaxLen = 60;\n  const [description, setDescription] = useState('');\n\n  const socialMediaPicked = useSelector(selectSocialMediaPicked);\n  const passwordDescriptionPicked = useSelector(selectPasswordDescriptionPicked);\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordIdPicked = useSelector(selectPasswordIdPicked);\n  const password = useSelector(selectPassword);\n\n  const createEditButtonLabel = isCreateMode ? 'Save' : 'Edit';\n\n  useEffect(() => {\n    if (isCreateMode || isEditMode) {\n      if (isCreateMode) {\n        dispatch(setSocialMediaPicked({ socialMediaPicked: socialMediaList[0].name || '' }));\n      }\n      if (isEditMode) {\n        setDescription(\n          passwordDescriptionPicked !== defaultEmptyPasswordDescription\n            ? passwordDescriptionPicked\n            : ''\n        );\n      }\n    }\n  }, []);\n\n  const handleCreateEditButton = () => {\n    const data = {\n      password,\n      description,\n      socialMedia: socialMediaPicked,\n    };\n    if (isEditMode) {\n      dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n      dispatch(setPasswordIdPicked({ passwordIdPicked }));\n      dispatch(setModalTitle({ modalTitle: 'Edit password warning !' }));\n      dispatch(\n        setModalMessage({\n          modalMessage: \"If you update this password, you won't be able to recover it.\",\n        })\n      );\n      dispatch(setModalVisible({ modalVisible: true }));\n    } else if (isCreateMode) {\n      dispatch(savePassword2Firebase(data));\n      navigation.navigate('PasswordList');\n    }\n  };\n\n  return (\n    <View style={[cardView.container, shadow.container, createEditPassword.container]}>\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Social media:</Text>\n        <Picker\n          // ref={pickerRef}\n          style={createEditPassword.dropdown}\n          selectedValue={socialMediaPicked}\n          onValueChange={(itemValue) => {\n            dispatch(setSocialMediaPicked({ socialMediaPicked: itemValue }));\n          }}\n        >\n          {socialMediaList.map((item: { id: string; name: string }) => {\n            const label = item.name.charAt(0).toUpperCase() + item.name.slice(1);\n            return <Picker.Item key={item.id} label={label} value={item.name} />;\n          })}\n        </Picker>\n      </View>\n\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Description:</Text>\n        <TextInput\n          style={createEditPassword.textInput}\n          placeholder='Type in here...'\n          maxLength={passwordDescriptionMaxLen}\n          value={description}\n          onChangeText={(text: string) => setDescription(text)}\n        />\n        <Text style={createEditPassword.descriptionLengthIndicator}>\n          {description.length}/{passwordDescriptionMaxLen}\n        </Text>\n      </View>\n\n      <Entypo.Button\n        style={createEditPassword.button}\n        name={isCreateMode ? 'save' : 'edit'}\n        size={24}\n        color={appColors.textTint}\n        backgroundColor={appColors.primary}\n        onPress={handleCreateEditButton}\n      >\n        {createEditButtonLabel}\n      </Entypo.Button>\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import React, { useEffect, useState, useLayoutEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  generatePassword,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  setPassword,\n  resetPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport {\n  resetSnackbar,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\n\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Clipboard,\n  BackHandler,\n  Platform,\n  ScrollView,\n} from 'react-native';\nimport { Divider, Switch } from 'react-native-paper';\n\nimport SliderContainer from 'components/SliderContainer/sliderContainer';\nimport { PasswordConfigurator } from 'components/PasswordConfigurator/passwordConfigurator';\nimport { CreateEditPasswordConfigurator } from 'components/CreateEditPasswordConfigurator/createEditPasswordConfigurator';\n\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { appColors, infoMessages } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { resetConfigurationState, showAuthenticatedMessage } from 'utils/configuratorUtils';\nimport { cardView, shadow, screen, passwordStyle, configuration } from './styles';\n\nexport const PasswordGenerator = ({ navigation }: Props) => {\n  const scrollViewRef = useRef<ScrollView>(null);\n  const [switchEnabled, setSwitchEnabled] = useState(false);\n  const [mPassword, mSetPassword] = useState('');\n\n  const snackbarMessage = useSelector(selectSnackbarMessage);\n  const snackbarVisible = useSelector(selectSnackbarVisible);\n\n  const passwordFromState = useSelector(selectPassword);\n\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n\n  const userId = useSelector(selectUserId);\n\n  const screenTitle = isEditMode\n    ? 'Password Edit'\n    : `Password Generator ${!userId ? '(Only)' : ''}`;\n\n  const dispatch = useDispatch();\n\n  const handleCopyButton = () => {\n    Clipboard.setString(passwordFromState);\n  };\n\n  const handleRefreshButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.newPassword);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.newPassword }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const handleBackAction = () => {\n    resetConfigurationState(dispatch);\n    navigation.navigate(userId ? 'PasswordList' : 'Login');\n    return true;\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnChangePassword = (text: string) => {\n    if (switchEnabled) {\n      mSetPassword(text);\n    }\n  };\n\n  const handleOnBlurPassword = () => {\n    if (switchEnabled) {\n      dispatch(setPassword({ password: mPassword }));\n    }\n  };\n\n  const handleSwitch = () => {\n    setSwitchEnabled(!switchEnabled);\n    if (switchEnabled) {\n      mSetPassword('');\n      dispatch(generatePassword());\n    }\n  };\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n\n    if (Platform.OS === 'android') {\n      showAuthenticatedMessage(userId, isCreateMode);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.about2CreatePassword }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    (() => isEditMode && dispatch(resetPasswordPicked()))();\n\n    return () => {\n      navigation.navigate(userId ? 'PasswordList' : 'Login');\n      resetConfigurationState(dispatch);\n      BackHandler.removeEventListener('hardwareBackPress', () => false);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: screenTitle,\n    });\n  });\n\n  return (\n    <>\n      <ScrollView ref={scrollViewRef}>\n        <View style={screen.container}>\n          <View style={[cardView.container, passwordStyle.container, shadow.container]}>\n            <View style={passwordStyle.inputContainer}>\n              <TextInput\n                showSoftInputOnFocus={switchEnabled}\n                caretHidden={!switchEnabled}\n                style={passwordStyle.input}\n                value={switchEnabled ? mPassword : passwordFromState}\n                onChangeText={handleOnChangePassword}\n                onBlur={handleOnBlurPassword}\n              />\n              <View style={passwordStyle.icons}>\n                <TouchableOpacity onPress={handleCopyButton}>\n                  <MaterialCommunityIcons\n                    style={{ marginRight: 10 }}\n                    name='content-copy'\n                    size={24}\n                    color='grey'\n                  />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={handleRefreshButton}>\n                  <Ionicons name='reload' size={24} color='grey' />\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n\n          <View style={[cardView.container, configuration.container, shadow.container]}>\n            <View style={configuration.textContainer}>\n              <Text style={configuration.textHeader}>Configure your password</Text>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            {isCreateMode && (\n              <>\n                <View style={configuration.switchToggle}>\n                  <Text style={{ fontSize: 17 }}>Place your own password:</Text>\n                  <Switch\n                    style={{ marginLeft: 10 }}\n                    value={switchEnabled}\n                    onValueChange={handleSwitch}\n                    color={appColors.primary}\n                  />\n                </View>\n\n                <Divider style={{ backgroundColor: 'grey' }} />\n              </>\n            )}\n\n            <View style={configuration.passwordLengthContainer}>\n              <Text style={{ fontSize: 17 }}>Password length</Text>\n              <View style={configuration.lengthSliderContainer}>\n                <TextInput\n                  showSoftInputOnFocus={false}\n                  caretHidden\n                  style={configuration.inputLength}\n                  keyboardType='numeric'\n                  value={passwordFromState.length.toString()}\n                />\n                <SliderContainer\n                  switchEnabled={switchEnabled}\n                  defaultValue={isEditMode ? passwordFromState.length : 10}\n                />\n              </View>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <PasswordConfigurator switchEnabled={switchEnabled} />\n          </View>\n\n          {(isCreateMode || isEditMode) && (\n            <CreateEditPasswordConfigurator navigation={navigation} />\n          )}\n        </View>\n      </ScrollView>\n\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismissSnackbar}\n      />\n    </>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import { Dimensions, StyleSheet } from 'react-native';\n\nexport const popoverStyles = StyleSheet.create({\n  content: {\n    width: Dimensions.get('screen').width * 0.45,\n    padding: 16,\n    backgroundColor: 'white',\n    borderRadius: 8,\n  },\n  arrow: {\n    borderTopColor: 'white',\n  },\n  background: {\n    backgroundColor: 'rgba(66,66,66,0.5)',\n  },\n});\n","import React from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\nimport { Popover } from 'react-native-modal-popover';\nimport { Feather } from '@expo/vector-icons';\n\nimport { popoverMessage } from 'utils/constants';\nimport { popoverStyles } from './styles';\n\nexport const CustomPopover = ({\n  popoverVisible,\n  closePopover,\n  popoverAnchorRect,\n  touchableRef,\n  onPress,\n}: Props) => (\n  <>\n    <TouchableOpacity ref={touchableRef} onPress={onPress}>\n      <Feather name='info' size={20} color='black' />\n    </TouchableOpacity>\n    <Popover\n      contentStyle={popoverStyles.content}\n      arrowStyle={popoverStyles.arrow}\n      backgroundStyle={popoverStyles.background}\n      visible={popoverVisible}\n      onClose={closePopover}\n      fromRect={popoverAnchorRect}\n      placement='top'\n      supportedOrientations={['portrait', 'landscape']}\n    >\n      <Text>{popoverMessage}</Text>\n    </Popover>\n  </>\n);\n\ninterface Props {\n  popoverVisible: boolean;\n  closePopover: any;\n  popoverAnchorRect: any;\n  touchableRef: any;\n  onPress: any;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectRequest, setIsRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { Image, Text, TextInput, View, TouchableOpacity, BackHandler } from 'react-native';\nimport { usePopover } from 'react-native-modal-popover';\n\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomPopover } from 'components/Popover/popover';\nimport { shadow } from 'screens/PasswordGenerator/styles';\n\nimport { auth, signIn } from 'services/firebase';\n\nimport styles from './styles';\n\nexport const Login = ({ navigation }: Props) => {\n  const [username, setUsername] = useState('');\n\n  const dispatch = useDispatch();\n  const isRequesting = useSelector(selectRequest);\n\n  const { openPopover, closePopover, popoverVisible, touchableRef, popoverAnchorRect } =\n    usePopover();\n\n  useEffect(() => {\n    dispatch(setIsRequest());\n  }, []);\n\n  const handleBackAction = () => {\n    BackHandler.exitApp();\n    return false;\n  };\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        dispatch(setUserData({ id: user.uid, email: user.email }));\n        navigation.replace('Drawer');\n      } else {\n        dispatch(unsetUserData());\n      }\n    });\n\n    return () => {\n      BackHandler.removeEventListener('hardwareBackPress', handleBackAction);\n    };\n  }, [navigation]);\n\n  const handleLogin = () => {\n    signIn(username);\n    setUsername('');\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n          <View style={styles.inputContainer}>\n            <TextInput\n              placeholder='Username'\n              value={username}\n              style={[styles.input, shadow.container]}\n              onChangeText={(text: string) => setUsername(text)}\n            />\n          </View>\n\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity onPress={handleLogin} style={styles.button}>\n              <Text style={styles.buttonText}>Login</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('SignUp');\n              }}\n              style={[styles.button, styles.buttonOutLine]}\n            >\n              <Text style={styles.buttonOutLineText}>Sign up</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.linkContainer}>\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('PasswordGenerator');\n              }}\n              style={styles.link}\n            >\n              <Text style={styles.linkText}>Use it without an account </Text>\n            </TouchableOpacity>\n\n            <CustomPopover\n              popoverVisible={popoverVisible}\n              closePopover={closePopover}\n              popoverAnchorRect={popoverAnchorRect}\n              touchableRef={touchableRef}\n              onPress={openPopover}\n            />\n          </View>\n        </View>\n      )}\n    </>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const screen = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    marginBottom: 5,\n  },\n});\n\nexport const shadow = StyleSheet.create({\n  container: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n});\n\nexport const cardView = StyleSheet.create({\n  container: {\n    width: '90%',\n    padding: 10,\n    backgroundColor: '#FFF',\n    borderRadius: 5,\n    marginBottom: 15,\n    justifyContent: 'center',\n  },\n});\n\nexport const passwordStyle = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  inputContainer: {\n    margin: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  input: {\n    width: Platform.OS === 'web' ? '85%' : '75%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    borderRadius: 10,\n    textAlign: 'left',\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 16 : 20,\n  },\n  icons: {\n    marginLeft: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n});\n\nexport const configuration = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  textContainer: {\n    margin: 10,\n    justifyContent: 'flex-start',\n  },\n  textHeader: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  passwordLengthContainer: {\n    padding: 10,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n  inputLength: {\n    width: Platform.OS === 'web' ? '15%' : '20%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 7,\n    paddingVertical: 10,\n    marginRight: 5,\n    borderRadius: 10,\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  lengthSliderContainer: {\n    padding: 10,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n  switchToggle: { flexDirection: 'row', padding: 10, alignItems: 'center' },\n});\n\nexport const checkBox = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around',\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/amazon.4c033704.png\";","module.exports = __webpack_public_path__ + \"static/media/discord.17c0e41c.png\";","module.exports = __webpack_public_path__ + \"static/media/google.647ac848.png\";","module.exports = __webpack_public_path__ + \"static/media/slack.d9f7a674.png\";","module.exports = __webpack_public_path__ + \"static/media/okta.c20fa4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/outlook.217ab4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch.8e8dc9e1.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-banner.8c7d09ca.png\";","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nconst initialSnackbarState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n};\n\nconst initialModalState = {\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nexport const uiElementsSlice = createSlice({\n  name: 'uiElements',\n  initialState,\n  reducers: {\n    // snackbar actions\n    setSnackbarMessage: (state, { payload }) => ({\n      ...state,\n      snackbarMessage: payload.snackbarMessage,\n    }),\n    setSnackbarVisible: (state, { payload }) => ({\n      ...state,\n      snackbarVisible: payload.snackbarVisible,\n    }),\n    resetSnackbar: (state) => ({\n      ...state,\n      ...initialSnackbarState,\n    }),\n\n    // modal actions\n    setModalTitle: (state, { payload }) => ({\n      ...state,\n      modalTitle: payload.modalTitle,\n    }),\n    setModalMessage: (state, { payload }) => ({\n      ...state,\n      modalMessage: payload.modalMessage,\n    }),\n    setModalVisible: (state, { payload }) => ({\n      ...state,\n      modalVisible: payload.modalVisible,\n    }),\n    resetModal: (state) => ({\n      ...state,\n      ...initialModalState,\n    }),\n  },\n});\n\nexport const {\n  setSnackbarMessage,\n  setSnackbarVisible,\n  resetSnackbar,\n  setModalTitle,\n  setModalMessage,\n  setModalVisible,\n  resetModal,\n} = uiElementsSlice.actions;\n\n// snackbar select\nexport const selectSnackbarMessage = (state: { uiElements: { snackbarMessage: any } }) =>\n  state.uiElements.snackbarMessage;\nexport const selectSnackbarVisible = (state: { uiElements: { snackbarVisible: any } }) =>\n  state.uiElements.snackbarVisible;\n\n// modal select\nexport const selectModalTitle = (state: { uiElements: { modalTitle: any } }) =>\n  state.uiElements.modalTitle;\nexport const selectModalMessage = (state: { uiElements: { modalMessage: any } }) =>\n  state.uiElements.modalMessage;\nexport const selectModalVisible = (state: { uiElements: { modalVisible: any } }) =>\n  state.uiElements.modalVisible;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState: {\n  isEasy2Read: boolean;\n  isAllChar: boolean;\n  isUpperCase: boolean;\n  isLowerCase: boolean;\n  isNumbers: boolean;\n  isSymbols: boolean;\n} = {\n  isEasy2Read: true,\n  isAllChar: false,\n  isUpperCase: true,\n  isLowerCase: true,\n  isNumbers: false,\n  isSymbols: false,\n};\n\nconst resetPasswordConfiguratorState = (state: any) => ({\n  ...state,\n  ...initialState,\n});\n\nexport const configuratorSlice = createSlice({\n  name: 'configurator',\n  initialState,\n  reducers: {\n    setIsEasy2Read: (state, { payload }) => ({\n      ...state,\n      isEasy2Read: payload.isEasy2Read,\n    }),\n    setIsAllChar: (state, { payload }) => ({\n      ...state,\n      isAllChar: payload.isAllChar,\n    }),\n    setIsUpperCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n    }),\n    setIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbers: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n    }),\n    setIsSymbols: (state, { payload }) => ({\n      ...state,\n      isSymbols: payload.isSymbols,\n    }),\n    setIsUpperCaseAndIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbersAndIsSymbols: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n      isSymbols: payload.isSymbols,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetPasswordGeneratorState, (state) => resetPasswordConfiguratorState(state));\n  },\n});\n\nexport const {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n} = configuratorSlice.actions;\n\nexport const selectIsEasy2Read = (state: { configurator: { isEasy2Read: boolean } }) =>\n  state.configurator.isEasy2Read;\nexport const selectIsAllChar = (state: { configurator: { isAllChar: boolean } }) =>\n  state.configurator.isAllChar;\nexport const selectIsUpperCase = (state: { configurator: { isUpperCase: boolean } }) =>\n  state.configurator.isUpperCase;\nexport const selectIsLowerCase = (state: { configurator: { isLowerCase: boolean } }) =>\n  state.configurator.isLowerCase;\nexport const selectIsNumbers = (state: { configurator: { isNumbers: boolean } }) =>\n  state.configurator.isNumbers;\nexport const selectIsSymbols = (state: { configurator: { isSymbols: boolean } }) =>\n  state.configurator.isSymbols;\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  inputContainer: { width: '80%' },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginTop: 10,\n  },\n  buttonContainer: {\n    width: '60%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  button: {\n    backgroundColor: appColors.primary,\n    width: '70%',\n    padding: 10,\n    borderRadius: 10,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  buttonOutLine: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: appColors.primary,\n    borderWidth: 2,\n  },\n  buttonOutLineText: {\n    color: '#4F4F4F',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  loginImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n  tooltipImage: {},\n  linkContainer: {\n    width: '60%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  link: {\n    marginRight: 3,\n  },\n  linkText: {\n    fontSize: 15,\n  },\n});\n\nexport default styles;\n","import { createSlice } from '@reduxjs/toolkit';\n\ninterface socialMediaI {\n  id: string;\n  name: string;\n}\n\nexport const initialState: {\n  socialMediaPicked: string;\n  socialMediaList: Array<socialMediaI>;\n} = {\n  socialMediaPicked: '',\n  socialMediaList: [],\n};\n\nexport const socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState,\n  reducers: {\n    setSocialMediaPicked: (state, { payload }) => ({\n      ...state,\n      socialMediaPicked: payload.socialMediaPicked,\n    }),\n    unsetSocialMediaPicked: (state) => ({\n      ...state,\n      socialMediaPicked: '',\n    }),\n    setSocialMediaList: (state, { payload }) => ({\n      ...state,\n      socialMediaList: payload.socialMediaList,\n    }),\n    getSocialMediaListFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setSocialMediaPicked,\n  unsetSocialMediaPicked,\n  setSocialMediaList,\n  getSocialMediaListFromFirebase,\n} = socialMediaSlice.actions;\n\nexport const selectSocialMediaPicked = (state: { socialMedia: { socialMediaPicked: string } }) =>\n  state.socialMedia.socialMediaPicked;\nexport const selectSocialMediaList = (state: {\n  socialMedia: { socialMediaList: Array<socialMediaI> };\n}) => state.socialMedia.socialMediaList;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState = {\n  id: '',\n  email: '',\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUserData: (state, { payload }) => ({\n      ...state,\n      id: payload.id,\n      email: payload.email,\n    }),\n    unsetUserData: () => ({\n      ...initialState,\n    }),\n  },\n});\n\nexport const { setUserData, unsetUserData } = userSlice.actions;\n\nexport const selectUserId = (state: { user: { id: string } }) => state.user.id;\nexport const selectUserEmail = (state: { user: { email: string } }) => state.user.email;\n","// Import the functions you need from the SDKs you need\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { clearUserDataFromLS, setUserData2LS } from 'utils/localStorageFuncs';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { logger } from 'react-native-logs';\n\nconst log = logger.createLogger();\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n};\n\nconst appLength: number = firebase.apps.length;\n\nconst app = appLength === 0 ? firebase.initializeApp(firebaseConfig) : firebase.app();\nconst database = firebase.firestore(app);\n\nexport const auth = firebase.auth();\nexport const passwordsCollection = database.collection('passwords');\nexport const socialMediaCollection = database.collection('social_media');\n\nexport const signIn = (username: string) => {\n  auth\n    .signInWithEmailAndPassword(`${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      setUserData2LS(user?.uid, user?.email);\n    })\n    .catch((error) => {\n      alert(error.message);\n      log.error({ exception: error.message });\n    });\n};\n\nexport const signOut = () =>\n  auth\n    .signOut()\n    .then(() => {\n      clearUserDataFromLS();\n    })\n    .catch((error) => {\n      log.error({ exception: error.message });\n    });\n\nexport const signUp = (username: string) => {\n  auth\n    .createUserWithEmailAndPassword(`${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n      log.info('User signed up: ', user?.uid);\n    })\n    .catch((error) => {\n      alert(error.message);\n      log.error({ exception: error.message });\n    });\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n} from 'reduxStore/slices/socialMediaSlice';\n\nexport const initialState = {\n  isRequest: false,\n};\n\nexport const applicationStatusSlice = createSlice({\n  name: 'applicationStatus',\n  initialState,\n  reducers: {\n    setIsRequest: (state) => ({\n      ...state,\n      isRequest: true,\n    }),\n    unsetIsRequest: () => ({\n      ...initialState,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPasswordsFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(setPasswords, (state) => ({\n        ...state,\n        isRequest: false,\n      }))\n      .addCase(getSocialMediaListFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(unsetUserData, (state) => ({\n        ...state,\n        isRequest: false,\n      }));\n  },\n});\n\nexport const { setIsRequest, unsetIsRequest } = applicationStatusSlice.actions;\n\nexport const selectRequest = (state: { applicationStatus: { isRequest: boolean } }) =>\n  state.applicationStatus.isRequest;\n"],"sourceRoot":""}