{"version":3,"sources":["src/utils/infoMessages.ts","src/redux/slices/applicationStatusSlice.ts","src/components/PasswordConfigurator/CustomCheckBox/customCheckBox.tsx","src/utils/localStorageFuncs.ts","src/redux/slices/passwordSlice.ts","src/components/LoadingIndicator/loadingIndicator.tsx","src/components/PasswordToggle/passwordToggle.tsx","src/components/CustomSnackbar/customSnackbar.tsx","src/redux/sagas/passwordGeneratorSaga.ts","src/services/database.ts","src/redux/sagas/getPasswordsSaga.ts","src/redux/sagas/getSocialMediaSaga.ts","src/redux/sagas/savePasswordSaga.ts","src/redux/sagas/deletePasswordSaga.ts","src/redux/sagas/updatePasswordSaga.ts","src/redux/sagas/index.ts","src/redux/slices/rootReducer.ts","src/redux/store/index.ts","assets/main/passvault-512px.png","src/utils/constants.ts","App.tsx","src/screens/SignUp/signup.tsx","src/components/CustomStatusbar/customStatusbar.tsx","src/components/SocialMediaIcon/socialMediaIcon.tsx","src/utils/imageDataRetriever.ts","src/components/PasswordItem/styles.ts","src/components/PasswordIcons/passwordIcon.tsx","src/components/PasswordItem/passwordItem.tsx","src/screens/PasswordList/styles.ts","src/screens/PasswordList/passwordList.tsx","src/components/CustomSidebar/styles.ts","src/components/CustomSidebar/customSidebar.tsx","src/screens/Drawer/drawer.tsx","src/components/SliderContainer/styles.ts","src/components/SliderContainer/sliderContainer.tsx","src/utils/configuratorUtils.ts","src/components/PasswordConfigurator/passwordConfigurator.tsx","src/components/CreateEditPasswordConfigurator/styles.ts","src/components/CreateEditPasswordConfigurator/createEditPasswordConfigurator.tsx","src/screens/PasswordGenerator/passwordGenerator.tsx","src/components/Popover/styles.ts","src/components/Popover/popover.tsx","src/screens/Login/login.tsx","webpack:///./index.js?41f5","src/screens/PasswordGenerator/styles.ts","assets/amazon.png","assets/discord.png","assets/google.png","assets/slack.png","assets/okta.png","assets/outlook.png","assets/twitch.png","assets/img/sidebar-banner.png","src/screens/Login/styles.ts","src/redux/slices/configuratorSlice.ts","src/services/firebase.ts","src/redux/slices/userSlice.ts","src/redux/slices/socialMediaSlice.ts"],"names":["showInfoMessage","message","ToastAndroid","show","SHORT","customAlertMessage","title","action","Platform","OS","Alert","alert","text","style","onPress","confirm","initialState","isRequest","applicationStatusSlice","createSlice","name","reducers","setIsRequest","state","payload","unsetIsRequest","extraReducers","builder","addCase","getPasswordsFromFirebase","setPasswords","actions","selectRequest","applicationStatus","CustomCheckBox","props","label","isChecked","disabled","color","flexDirection","alignItems","margin","value","undefined","fontSize","opacity","appName","isObject","storeData","key","a","async","finalValue","JSON","stringify","toString","AsyncStorage","setItem","console","log","asyncStorageException","getData","getItem","parse","removeItem","setUserData2LS","userId","email","then","data","setPasswordGenerated","password","getPasswordGenerated","empty","catch","err","clearUserDataFromLS","res","passwordIdPicked","passwordPicked","passwordDescriptionPicked","length","isCreateMode","isEditMode","passwords","passwordSlice","setPassword","setPasswordPicked","setPasswordIdPicked","setPasswordDescriptionPicked","setLength","setIsCreateMode","setIsEditMode","resetPasswordGeneratorState","resetPasswordState","unsetPasswords","generatePassword","savePassword2Firebase","deletePasswordFromFirebase","editPasswordFromFirebase","selectPassword","selectPasswordIdPicked","selectPasswordPicked","selectPasswordDescriptionPicked","selectIsCreateMode","selectIsEditMode","selectPasswordLength","selectPasswords","styles","StyleSheet","create","container","flex","justifyContent","horizontal","padding","LoadingIndicator","size","PasswordToggle","hidePassword","marginTop","appColors","primary","CustomSnackbar","isSnackbarVisible","setSnackbarVisible","visible","onDismiss","duration","getPasswordGeneratorFlow","select","selectIsUpperCase","isUpperCase","selectIsLowerCase","isLowerCase","selectIsNumbers","isNumbers","selectIsSymbols","isSymbols","isUpper","upper","isLower","lower","isNumber","number","isSymbol","symbols","all","i","charAt","Math","floor","random","put","exception","passwordGeneratorSaga","takeLeading","type","sortBy","obj1","obj2","field","kind","x","getPasswordsByUserId","passwordList","passwordsCollection","where","get","querySnapshot","forEach","doc","push","id","password_generated","social_media","description","createdAt","error","sort","y","sendPassword2Firebase","socialMedia","add","Date","getTime","uid","deletePasswordById","passwordId","delete","updatePasswordByIdFromFirebase","passwordGenerated","update","getSocialMedia","socialMediaList","socialMediaCollection","getPasswordsFlow","selectUserId","call","source","getPasswordsSaga","getSocialMediaFlow","socialMediaSelected","setSocialMediaList","setSocialMediaPicked","socialMediaPicked","getSocialMediaSaga","getSocialMediaListFromFirebase","savePasswordFlow","savePasswordSaga","deletePasswordFlow","deletePasswordSaga","updatePasswordFlow","updatePasswordSaga","IndexSagas","createRootReducer","combineReducers","user","userSlice","reducer","configurator","configuratorSlice","socialMediaSlice","sagaMiddleware","createSagaMiddleware","middleware","store","configureStore","run","module","exports","devWarnings","popoverMessage","infoMessages","copied2Clipboard","newPassword","about2CreatePassword","textTint","maximumTintColorSlider","activeTint","primaryDark","process","LogBox","ignoreLogs","window","Stack","createNativeStackNavigator","App","Navigator","Screen","component","Login","options","headerShown","SignUp","PasswordGenerator","headerStyle","backgroundColor","headerTintColor","Drawer","useState","username","setUsername","setHidePassword","dispatch","useDispatch","navigation","useEffect","auth","onAuthStateChanged","setUserData","replace","unsetUserData","loginImage","require","inputContainer","placeholder","input","shadow","onChangeText","secureTextEntry","buttonContainer","signUp","button","buttonText","linkContainer","navigate","link","linkText","CustomStatusbar","animated","barStyle","SocialMediaIcon","includes","imageSource","imageSourceRetriever","Image","socialMediaIcon","socialMediaColor","socialMediaIconColor","AntDesign","item","borderRadius","marginLeft","marginRight","marginBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","socialIconAndPasswordInfo","passwordAndDescription","paddingHorizontal","passwordInput","fontFamily","fontWeight","icons","singleIcon","PasswordIcons","passwordVisible","setPasswordVisible","setSnackbarMessage","_socialMedia","toUpperCase","slice","View","TouchableOpacity","Entypo","Clipboard","setString","MaterialCommunityIcons","FontAwesome","Ionicons","PasswordItem","Text","TextInput","showSoftInputOnFocus","caretHidden","sectionTitle","paddingBottom","items","writeTaskWrapper","position","bottom","paddingVertical","borderColor","borderWidth","addWrapper","addText","navWrapper","navButtonContainer","marginHorizontal","navButton","PasswordList","snackbarMessage","scrollIsClose2Bottom","setScrollIsClose2Bottom","useRef","useSelector","isRequesting","BackHandler","addEventListener","exitApp","onSnapshot","ScrollView","scrollEventThrottle","onScroll","event","nativeEvent","layoutMeasurement","contentOffset","contentSize","paddingToBottom","result","contentContainerStyle","flexGrow","keyboardShouldPersistTaps","map","passwordItem","FAB","right","icon","imageBackground","paddingTop","textShadowColor","textShadowOffset","textShadowRadius","divider","paddingLeft","CustomSidebar","userEmail","selectUserEmail","substring","indexOf","userName","ImageBackground","Section","DrawerItemList","DrawerItem","closeDrawer","MaterialIcons","signOut","CustomDrawer","createDrawerNavigator","screenOptions","drawerStyle","Dimensions","drawerActiveBackgroundColor","drawerActiveTintColor","drawerItemStyle","drawerContent","drawerIcon","Feather","sliderContainer","activeMark","left","inactiveMark","SliderContainer","defaultValue","handleGeneratePassword","setValue","isNaN","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","onValueChange","resetConfigurationState","handleLeftCheckboxes","setCheck1","setCheck2","selector1","selector2","handleOtherCheckboxes","payloadString1","payloadString2","payload1","payload2","handleRightCheckboxes","checkbox1","checkbox2","checkbox3","configuratorAction","updateConfiguratorStateAndGeneratePassword","PasswordConfigurator","isEasy2Read","selectIsEasy2Read","isAllChar","selectIsAllChar","handleRightCheckboxesGivenLeftCheckboxes","setIsUpperCaseAndIsLowerCase","setIsNumbersAndIsSymbols","checkBox","section","setIsEasy2Read","setIsAllChar","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSymbols","createEditPassword","userInputContainer","textInput","dropdown","textLabel","descriptionLengthIndicator","alignSelf","CreateEditPasswordConfigurator","setDescription","selectSocialMediaPicked","selectSocialMediaList","createEditButtonLabel","cardView","Picker","selectedValue","itemValue","itemIndex","Item","maxLength","Button","passwordFromState","screenTitle","handleBackAction","isCreatedMode","showAuthenticatedMessage","useLayoutEffect","setOptions","screen","passwordStyle","password2Clipboard","configuration","textContainer","textHeader","Divider","passwordLengthContainer","lengthSliderContainer","inputLength","keyboardType","popoverStyles","content","arrow","borderTopColor","background","CustomPopover","popoverVisible","closePopover","popoverAnchorRect","touchableRef","ref","contentStyle","arrowStyle","backgroundStyle","onClose","fromRect","placement","supportedOrientations","usePopover","openPopover","signIn","buttonOutLine","buttonOutLineText","registerRootComponent","textAlign","paragraph","checkbox","tooltipImage","resetPasswordConfiguratorState","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","firebase","apps","initializeApp","database","firestore","collection","signInWithEmailAndPassword","userCredentials","reduxAction","createUserWithEmailAndPassword"],"mappings":"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","file":"static/js/app.179f9d28.chunk.js","sourcesContent":["import { ToastAndroid, Platform, Alert } from 'react-native';\n\nexport const showInfoMessage = (message: string) => {\n  ToastAndroid.show(message, ToastAndroid.SHORT);\n};\n\nexport const customAlertMessage = (title: string, message: string, action: any) => {\n  if (Platform.OS === 'web') {\n    const response = confirm(message);\n    if (response) {\n      action();\n    }\n  } else {\n    return Alert.alert(title, message, [\n      {\n        text: 'No',\n        style: 'cancel',\n      },\n      { text: 'Yes', onPress: () => action() },\n    ]);\n  }\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState = {\n  isRequest: false,\n};\n\nexport const applicationStatusSlice = createSlice({\n  name: 'applicationStatus',\n  initialState,\n  reducers: {\n    setIsRequest: (state, { payload }) => ({\n      ...state,\n      isRequest: payload.isRequest,\n    }),\n    unsetIsRequest: () => ({\n      ...initialState,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getPasswordsFromFirebase, (state, { payload }) => ({\n      ...state,\n      isRequest: true,\n    })),\n      builder.addCase(setPasswords, (state, { payload }) => ({\n        ...state,\n        isRequest: false,\n      }));\n  },\n});\n\nexport const { setIsRequest, unsetIsRequest } = applicationStatusSlice.actions;\n\nexport const selectRequest = (state: { applicationStatus: { isRequest: boolean } }) =>\n  state.applicationStatus.isRequest;\n","import React from 'react';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nexport const CustomCheckBox = (props: {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  color: string;\n  onPress: any;\n}) => {\n  const { label, isChecked, disabled, color, onPress } = props;\n\n  return (\n    <TouchableOpacity\n      disabled={disabled}\n      style={{ flexDirection: 'row', alignItems: 'center' }}\n      onPress={onPress}\n    >\n      <Checkbox\n        style={{ margin: 8 }}\n        value={isChecked}\n        disabled={disabled !== null ? disabled : false}\n        color={isChecked ? color : undefined}\n      />\n      <Text style={{ fontSize: 14, opacity: !disabled ? 1 : 0.3 }}>{label}</Text>\n    </TouchableOpacity>\n  );\n};\n","import AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst appName = 'passvault';\nconst isObject = (value: string) => typeof value === 'object';\n\nconst storeData = async (key: string, value: string) => {\n  try {\n    const finalValue = isObject(value) ? JSON.stringify(value) : value.toString();\n    await AsyncStorage.setItem(key, finalValue);\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst getData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (value !== null) {\n      return isObject(value) ? JSON.parse(value) : value;\n    }\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst removeItem = async (key: string) => {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst setUserData2LS = (userId: string | undefined, email: string | null | undefined) => {\n  storeData(`${appName}.userId`, userId || '').then((data) => data);\n  storeData(`${appName}.email`, email || '').then((data) => data);\n};\n\nconst setPasswordGenerated = (password: string) => {\n  storeData(`${appName}.password`, password).then((data: void) => data);\n};\n\nconst getPasswordGenerated = () => {\n  const empty = { password: '' };\n\n  return getData(`${appName}.password`)\n    .then((password: string) => ({ password }))\n    .catch((err) => {\n      console.log({ err });\n      return empty;\n    });\n};\n\nconst getUserDataFromLS = () => {\n  const empty = { userId: '', email: '' };\n\n  return getData(`${appName}.userId`)\n    .then((userId: string) => {\n      getData(`${appName}.email`)\n        .then((email: string) => ({\n          userId,\n          email,\n        }))\n        .catch((err: any) => {\n          console.log(err);\n          return empty;\n        });\n    })\n    .catch((err) => {\n      console.log(err);\n      return empty;\n    });\n};\n\nconst clearUserDataFromLS = () => {\n  removeItem(`${appName}.userId`).then((res: void) => res);\n  removeItem(`${appName}.email`).then((res: void) => res);\n};\n\nexport {\n  setUserData2LS,\n  getUserDataFromLS,\n  clearUserDataFromLS,\n  setPasswordGenerated,\n  getPasswordGenerated,\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  password: string;\n  passwordIdPicked: string;\n  passwordPicked: string;\n  passwordDescriptionPicked: string;\n  length: number;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  passwords: any;\n} = {\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  passwords: [],\n};\n\nconst resetPasswordState = (state: any) => ({\n  ...state,\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n});\n\nexport const passwordSlice = createSlice({\n  name: 'password',\n  initialState,\n  reducers: {\n    setPassword: (state, { payload }) => ({\n      ...state,\n      password: payload.password,\n    }),\n    setPasswordPicked: (state, { payload }) => ({\n      ...state,\n      passwordPicked: payload.passwordPicked,\n    }),\n    setPasswordIdPicked: (state, { payload }) => ({\n      ...state,\n      passwordIdPicked: payload.passwordIdPicked,\n    }),\n    setPasswordDescriptionPicked: (state, { payload }) => ({\n      ...state,\n      passwordDescriptionPicked: payload.passwordDescriptionPicked,\n    }),\n    setLength: (state, { payload }) => ({\n      ...state,\n      length: payload.length,\n    }),\n    setIsCreateMode: (state, { payload }) => ({\n      ...state,\n      isCreateMode: payload.isCreateMode,\n    }),\n    setIsEditMode: (state, { payload }) => ({\n      ...state,\n      isEditMode: payload.isEditMode,\n    }),\n    setPasswords: (state, { payload }) => ({\n      ...state,\n      passwords: payload.passwords,\n    }),\n    resetPasswordGeneratorState: (state) => resetPasswordState(state),\n    unsetPasswords: () => ({ ...initialState }),\n    generatePassword: () => {},\n    getPasswordsFromFirebase: () => {},\n    savePassword2Firebase: (state, { payload }) => {},\n    deletePasswordFromFirebase: (state, { payload }) => {},\n    editPasswordFromFirebase: (state, { payload }) => {},\n  },\n});\n\nexport const {\n  setPassword,\n  setPasswordPicked,\n  setPasswordIdPicked,\n  setPasswordDescriptionPicked,\n  setLength,\n  setIsCreateMode,\n  setIsEditMode,\n  setPasswords,\n  resetPasswordGeneratorState,\n  unsetPasswords,\n  generatePassword,\n  getPasswordsFromFirebase,\n  savePassword2Firebase,\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n} = passwordSlice.actions;\n\nexport const selectPassword = (state: { password: { password: any } }) => state.password.password;\nexport const selectPasswordIdPicked = (state: { password: { passwordIdPicked: any } }) =>\n  state.password.passwordIdPicked;\nexport const selectPasswordPicked = (state: { password: { passwordPicked: any } }) =>\n  state.password.passwordPicked;\nexport const selectPasswordDescriptionPicked = (state: {\n  password: { passwordDescriptionPicked: any };\n}) => state.password.passwordDescriptionPicked;\nexport const selectIsCreateMode = (state: { password: { isCreateMode: boolean } }) =>\n  state.password.isCreateMode;\nexport const selectIsEditMode = (state: { password: { isEditMode: boolean } }) =>\n  state.password.isEditMode;\nexport const selectPasswordLength = (state: { password: string | any[] }) => state.password.length;\nexport const selectPasswords = (state: { password: { passwords: any } }) =>\n  state.password.passwords;\n","import React from 'react';\n\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n});\n\nexport const LoadingIndicator = () => {\n  return (\n    <View style={[styles.container, styles.horizontal]}>\n      <ActivityIndicator size='large' color='#3091e0' />\n    </View>\n  );\n};\n","import React from 'react';\nimport { View } from 'react-native';\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { appColors } from 'utils/constants';\n\nexport const PasswordToggle = (props: { hidePassword: boolean; action: any }) => {\n  const { hidePassword, action } = props;\n  return (\n    <View style={{ marginTop: 10 }}>\n      <CustomCheckBox\n        label='Show password'\n        isChecked={hidePassword}\n        color={appColors.primary}\n        onPress={action}\n      />\n    </View>\n  );\n};\n","import React from 'react';\nimport { Snackbar } from 'react-native-paper';\n\n// Reference for Icons usage: https://icons.expo.fyi/\n\nexport const CustomSnackbar = (props: {\n  message: string;\n  isSnackbarVisible: boolean;\n  setSnackbarVisible: any;\n}) => {\n  const { message, isSnackbarVisible, setSnackbarVisible } = props;\n  return (\n    <Snackbar\n      visible={isSnackbarVisible}\n      onDismiss={() => setSnackbarVisible(!isSnackbarVisible)}\n      duration={1500}\n    >\n      {message}\n    </Snackbar>\n  );\n};\n","import { select, put, takeLeading } from 'redux-saga/effects';\nimport {\n  generatePassword,\n  selectIsEditMode,\n  selectPasswordLength,\n  selectPasswordPicked,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { lower, upper, number, symbols } from 'utils/constants';\nimport { setPasswordGenerated } from 'utils/localStorageFuncs';\n\nimport {\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n  selectIsUpperCase,\n} from 'reduxStore/slices/configuratorSlice';\n\nexport function* getPasswordGeneratorFlow(): Generator {\n  try {\n    const length = yield select(selectPasswordLength);\n    const isUpperCase = yield select(selectIsUpperCase);\n    const isLowerCase = yield select(selectIsLowerCase);\n    const isNumbers = yield select(selectIsNumbers);\n    const isSymbols = yield select(selectIsSymbols);\n\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const isUpper: string = isUpperCase ? upper : '';\n    const isLower: string = isLowerCase ? lower : '';\n    const isNumber: string = isNumbers ? number : '';\n    const isSymbol: string = isSymbols ? symbols : '';\n\n    const all = isUpper + isLower + isNumber + isSymbol;\n    let password = '';\n\n    // @ts-ignore\n    for (let i = 0; i < length; i++) {\n      password += all.charAt(Math.floor(Math.random() * all.length));\n    }\n\n    setPasswordGenerated(password);\n\n    if (isEditMode) {\n      if (passwordPicked) {\n        //TODO: This flow needs to be updated in future\n        /* This condition will only be applied at the first time the user\n         * click in edit password, the password picked will be set as\n         * a generated password, and then will be deleted from the state.\n         * */\n        // @ts-ignore\n        password = passwordPicked;\n      }\n    }\n    return yield put(setPassword({ password }));\n  } catch (exception) {\n    console.log({ exception });\n  }\n}\n\nexport const passwordGeneratorSaga = [takeLeading(generatePassword.type, getPasswordGeneratorFlow)];\n","import { passwordsCollection, socialMediaCollection } from 'services/firebase';\n\nconst sortBy = (obj1: object, obj2: object, field: string, kind: string) => {\n  const x = kind === 'asc' ? 1 : -1;\n  // @ts-ignore\n  return obj1[field] < obj2[field] ? -1 * x : obj1[field] > obj2[field] ? 1 * x : 0;\n};\n\nexport const getPasswordsByUserId = async (userId: any) => {\n  const passwordList: {\n    id: string;\n    password_generated: string;\n    social_media: string;\n    description: string;\n    createdAt: number;\n  }[] = [];\n\n  await passwordsCollection\n    .where('uid', '==', userId)\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.forEach((doc) =>\n        passwordList.push({\n          id: doc.id,\n          password_generated: doc.data().password_generated,\n          social_media: doc.data().social_media,\n          description:\n            doc.data().description || 'This password has no description. Please update it.',\n          createdAt: doc.data().createdAt,\n        })\n      )\n    )\n    .catch((error) => {\n      console.log('Error getting documents: ', error);\n    });\n\n  return passwordList.sort((x, y) => sortBy(x, y, 'createdAt', 'asc'));\n};\n\nexport const sendPassword2Firebase = async (\n  userId: string,\n  password: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .add({\n      createdAt: new Date().getTime(),\n      password_generated: password,\n      social_media: socialMedia,\n      description: description,\n      uid: userId,\n    })\n    .then(() => console.log('A new password was added in database.'))\n    .catch(() => console.log('Something went wrong trying to add a new password in database.'));\n};\n\nexport const deletePasswordById = async (passwordId: string | undefined) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .delete()\n    .then(() => console.log('A password was deleted from database.'))\n    .catch(() => console.log('Something went wrong trying to delete a password from database.'));\n};\n\nexport const updatePasswordByIdFromFirebase = async (\n  passwordId: string,\n  passwordGenerated: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .update({\n      password_generated: passwordGenerated,\n      description,\n      social_media: socialMedia,\n    })\n    .then(() => console.log('A password was updated from database.'))\n    .catch(() => console.log('Something went wrong trying to update a password from database.'));\n};\n\nexport const getSocialMedia = async () => {\n  const socialMediaList: { id: string; name: string }[] = [];\n\n  await socialMediaCollection.get().then((querySnapshot) => {\n    querySnapshot.forEach((doc) =>\n      socialMediaList.push({\n        id: doc.id,\n        name: doc.data().name,\n      })\n    );\n  });\n\n  return socialMediaList;\n};\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { getPasswordsByUserId } from 'services/database';\n\nexport function* getPasswordsFlow(): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const passwords = yield call(getPasswordsByUserId, userId);\n\n    return yield put(setPasswords({ passwords }));\n  } catch (exception) {\n    console.log({ source: 'Exception from getPasswordsSaga', exception });\n  }\n}\n\nexport const getPasswordsSaga = [takeLeading(getPasswordsFromFirebase.type, getPasswordsFlow)];\n","import { call, put, takeLeading, select } from 'redux-saga/effects';\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\nimport {\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPasswordPicked,\n  setPassword,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { getSocialMedia } from 'services/database';\n\nfunction* getSocialMediaFlow(): Generator {\n  try {\n    const isCreateMode = yield select(selectIsCreateMode);\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const socialMediaList = yield call(getSocialMedia);\n    // @ts-ignore\n    const socialMediaSelected = socialMediaList[0].name;\n\n    yield put(setSocialMediaList({ socialMediaList }));\n\n    if (isCreateMode) {\n      yield put(setSocialMediaPicked({ socialMediaPicked: socialMediaSelected }));\n    } else if (isEditMode) {\n      //TODO: This flow needs to be updated in future\n      /* this flow is only to put the passwordPicked in the\n       * text input in Password Generator and then delete it\n       * passwordPicked state.\n       * */\n      yield put(setPassword({ password: passwordPicked }));\n      yield put(setPasswordPicked({ passwordPicked: '' }));\n    }\n  } catch (exception) {\n    console.log({ source: 'Exception from getSocialMediaSaga', exception });\n  }\n}\n\nexport const getSocialMediaSaga = [\n  takeLeading(getSocialMediaListFromFirebase.type, getSocialMediaFlow),\n];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { savePassword2Firebase, selectPassword } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { sendPassword2Firebase } from 'services/database';\n\n// @ts-ignore\nfunction* savePasswordFlow({ payload }): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const { socialMedia, password, description } = payload;\n\n    // @ts-ignore\n    return yield call(sendPassword2Firebase, userId, password, description, socialMedia);\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\n// @ts-ignore\nexport const savePasswordSaga = [takeLeading(savePassword2Firebase.type, savePasswordFlow)];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { deletePasswordFromFirebase } from 'reduxStore/slices/passwordSlice';\nimport { deletePasswordById } from 'services/database';\n\n// @ts-ignore\nfunction* deletePasswordFlow({ payload }): Generator {\n  try {\n    const { passwordId } = payload;\n\n    // @ts-ignore\n    return yield call(deletePasswordById, passwordId);\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\n// @ts-ignore\nexport const deletePasswordSaga = [\n  takeLeading(deletePasswordFromFirebase.type, deletePasswordFlow),\n];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport {\n  editPasswordFromFirebase,\n  selectPassword,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { updatePasswordByIdFromFirebase } from 'services/database';\n\nfunction* updatePasswordFlow({ payload }: any): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n    const { socialMedia, password, description } = payload;\n\n    return yield call(\n      // @ts-ignore\n      updatePasswordByIdFromFirebase,\n      passwordId,\n      password,\n      description,\n      socialMedia\n    );\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\nexport const updatePasswordSaga = [takeLeading(editPasswordFromFirebase.type, updatePasswordFlow)];\n","import { all } from 'redux-saga/effects';\nimport { passwordGeneratorSaga } from 'reduxStore/sagas/passwordGeneratorSaga';\nimport { getPasswordsSaga } from 'reduxStore/sagas/getPasswordsSaga';\nimport { getSocialMediaSaga } from 'reduxStore/sagas/getSocialMediaSaga';\nimport { savePasswordSaga } from 'reduxStore/sagas/savePasswordSaga';\nimport { deletePasswordSaga } from 'reduxStore/sagas/deletePasswordSaga';\nimport { updatePasswordSaga } from 'reduxStore/sagas/updatePasswordSaga';\n\nexport default function* IndexSagas() {\n  yield all([\n    ...passwordGeneratorSaga,\n    ...getPasswordsSaga,\n    ...getSocialMediaSaga,\n    ...savePasswordSaga,\n    ...deletePasswordSaga,\n    ...updatePasswordSaga,\n  ]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { userSlice } from './userSlice';\nimport { passwordSlice } from './passwordSlice';\nimport { configuratorSlice } from 'reduxStore/slices/configuratorSlice';\nimport { applicationStatusSlice } from 'reduxStore/slices/applicationStatusSlice';\nimport { socialMediaSlice } from 'reduxStore/slices/socialMediaSlice';\n\nconst createRootReducer = () =>\n  combineReducers({\n    user: userSlice.reducer,\n    password: passwordSlice.reducer,\n    configurator: configuratorSlice.reducer,\n    applicationStatus: applicationStatusSlice.reducer,\n    socialMedia: socialMediaSlice.reducer,\n  });\n\nexport default createRootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport IndexSagas from 'reduxStore/sagas/index';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from 'reduxStore/slices/rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = configureStore({\n  reducer: createRootReducer(),\n  middleware,\n});\n\nsagaMiddleware.run(IndexSagas);\n\nexport default store;\n","module.exports = __webpack_public_path__ + \"static/media/passvault-512px.fb8f2fd2.png\";","const lower = 'abcdefghijklmñopqrstuvwxyz';\nconst upper = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\nconst number = '0123456789';\nconst symbols = '[]{}<>\":|!@#$%^&*()_+`~/';\n\nconst devWarnings = [\n  'Clipboard has been extracted from react-native core',\n  'AsyncStorage has been extracted from react-native core',\n  'Setting a timer for a long period of time, i.e. multiple minutes',\n  'Picker has been extracted from react-native core and will be removed',\n];\n\nconst popoverMessage = 'You can generate passwords without store them.';\n\nconst infoMessages = {\n  copied2Clipboard: 'The password was copied to clipboard',\n  newPassword: 'New password generated',\n  about2CreatePassword: \"You're about to create a new password\",\n};\n\nconst appColors = {\n  textTint: '#FFF',\n  maximumTintColorSlider: '#d3d3d3',\n  activeTint: '#9ac8fc',\n  primary: '#3091e0',\n  primaryDark: '#236daa',\n};\n\nexport interface PasswordItemI {\n  passwordId: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  setSnackbarVisible: any;\n  setSnackbarMessage: any;\n  navigation: any;\n}\n\nexport interface PasswordIconsI {\n  passwordId: string;\n  socialMedia: string;\n  description: string;\n  passwordGenerated: string;\n  passwordVisible: boolean;\n  setPasswordVisible: any;\n  setSnackbarVisible: any;\n  setSnackbarMessage: any;\n  navigation: any;\n}\n\nexport interface PasswordI {\n  id: string;\n  createdAt: number;\n  description: string;\n  password_generated: string;\n  social_media: string;\n}\n\nexport { devWarnings, lower, upper, number, symbols, popoverMessage, appColors, infoMessages };\n","import React from 'react';\n\nimport { LogBox } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport { Provider } from 'react-redux';\nimport { Login } from 'screens/Login/login';\nimport { SignUp } from 'screens/SignUp/signup';\nimport { PasswordGenerator } from 'screens/PasswordGenerator/passwordGenerator';\nimport { Drawer } from 'screens/Drawer/drawer';\n\nimport store from 'reduxStore/store/index';\nimport { appColors, devWarnings } from 'utils/constants';\nimport { CustomStatusbar } from 'components/CustomStatusbar/customStatusbar';\n\nif (process.env.ENV === 'dev') {\n  LogBox.ignoreLogs(devWarnings);\n}\n\ndeclare global {\n  interface Window {\n    store: any;\n  }\n}\n\nwindow.store = store;\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <CustomStatusbar />\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen name='Login' component={Login} options={{ headerShown: false }} />\n          <Stack.Screen name='SignUp' component={SignUp} options={{ headerShown: false }} />\n          <Stack.Screen\n            name='PasswordGenerator'\n            component={PasswordGenerator}\n            options={{\n              headerStyle: {\n                backgroundColor: '#3091e0',\n              },\n              headerTintColor: '#FFF',\n            }}\n          />\n          <Stack.Screen\n            name='Drawer'\n            component={Drawer}\n            options={{\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { View, Text, Platform, Image, TextInput, TouchableOpacity } from 'react-native';\n\nimport { PasswordToggle } from 'components/PasswordToggle/passwordToggle';\nimport { shadow } from 'screens/PasswordGenerator/styles';\n\nimport { auth, signUp } from 'services/firebase';\n\nimport styles from 'screens/Login/styles';\n\nexport const SignUp = (props: { navigation: any }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [hidePassword, setHidePassword] = useState(true);\n\n  const dispatch = useDispatch();\n  const { navigation } = props;\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleSignUp = () => {\n    signUp(username, password);\n    setUsername('');\n    setPassword('');\n  };\n\n  const handleHidePassword = () => {\n    setHidePassword(!hidePassword);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder='Username'\n          value={username}\n          style={[styles.input, shadow.container]}\n          onChangeText={(text) => setUsername(text)}\n        />\n        <TextInput\n          placeholder='Password'\n          value={password}\n          style={[styles.input, shadow.container]}\n          onChangeText={(text) => setPassword(text)}\n          secureTextEntry={hidePassword}\n        />\n        <PasswordToggle hidePassword={!hidePassword} action={handleHidePassword} />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={handleSignUp} style={styles.button}>\n          <Text style={styles.buttonText}>Sign up</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.linkContainer}>\n        <TouchableOpacity\n          onPress={() => {\n            // @ts-ignore\n            navigation.navigate('Login');\n          }}\n          style={styles.link}\n        >\n          <Text style={styles.linkText}>Go to Login if you have an account</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n","import React from 'react';\nimport { View, StatusBar } from 'react-native';\nimport { appColors } from 'utils/constants';\n\n/*\n * For more reference check this snack:\n *   https://snack.expo.dev/@ahmed_gaber/safe-area-context?platform=ios\n */\n\nexport const CustomStatusbar = () => {\n  return (\n    <StatusBar animated={true} barStyle={'light-content'} backgroundColor={appColors.primaryDark} />\n  );\n};\n\nexport default CustomStatusbar;\n","import React from 'react';\nimport { Image } from 'react-native';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nimport {\n  imageSourceRetriever,\n  socialMediaIcon,\n  socialMediaIconColor,\n} from 'utils/imageDataRetriever';\n\nexport const SocialMediaIcon = (props: { style: any; socialMedia: string }) => {\n  const { style, socialMedia } = props;\n\n  if (['amazon', 'discord', 'google', 'slack', 'okta', 'outlook', 'twitch'].includes(socialMedia)) {\n    const imageSource = imageSourceRetriever(socialMedia);\n\n    return <Image style={style} source={imageSource} />;\n  } else {\n    const getSocialMedia: any = socialMediaIcon(socialMedia);\n    const socialMediaColor = socialMediaIconColor(socialMedia);\n\n    return <AntDesign style={style} name={getSocialMedia} size={24} color={socialMediaColor} />;\n  }\n};\n","export const imageSourceRetriever = (socialMedia: string) => {\n  return socialMedia === 'amazon'\n    ? require('assets/amazon.png')\n    : socialMedia === 'discord'\n    ? require('assets/discord.png')\n    : socialMedia === 'google'\n    ? require('assets/google.png')\n    : socialMedia === 'slack'\n    ? require('assets/slack.png')\n    : socialMedia === 'okta'\n    ? require('assets/okta.png')\n    : socialMedia === 'outlook'\n    ? require('assets/outlook.png')\n    : socialMedia === 'twitch'\n    ? require('assets/twitch.png')\n    : '';\n};\n\nexport const socialMediaIcon = (socialMedia: string) => {\n  return socialMedia === 'facebook'\n    ? 'facebook-square'\n    : socialMedia === 'linkedin'\n    ? 'linkedin-square'\n    : socialMedia === 'other'\n    ? 'questioncircle'\n    : socialMedia;\n};\n\nexport const socialMediaIconColor = (socialMedia: string) => {\n  return socialMedia === 'facebook'\n    ? '#4267B2'\n    : socialMedia === 'twitter'\n    ? '#00ACEE'\n    : socialMedia === 'linkedin'\n    ? '#2867B2'\n    : 'black';\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const item = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFF',\n    padding: 10,\n    borderRadius: 5,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginLeft: 3,\n    marginRight: 3,\n    marginBottom: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n\n  socialIconAndPasswordInfo: { flex: 1, width: '50%', flexDirection: 'row', alignItems: 'center' },\n\n  passwordAndDescription: {\n    width: '81%',\n    paddingHorizontal: 5,\n    flexDirection: 'column',\n  },\n\n  passwordInput: {\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 15 : 14,\n  },\n});\n\nexport const icons = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n\n  socialMedia: { width: 24, height: 24, marginRight: 10 },\n\n  singleIcon: {\n    marginRight: 10,\n  },\n});\n","import React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  deletePasswordFromFirebase,\n  setIsEditMode,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\n\nimport { Clipboard, Platform, TouchableOpacity, View } from 'react-native';\nimport { Entypo, FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { icons } from 'components/PasswordItem/styles';\n\nimport { infoMessages, PasswordIconsI } from 'utils/constants';\nimport { customAlertMessage, showInfoMessage } from 'utils/infoMessages';\nimport { setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\nexport const PasswordIcons = (props: PasswordIconsI) => {\n  const dispatch = useDispatch();\n\n  const {\n    passwordId,\n    socialMedia,\n    description,\n    passwordGenerated,\n    passwordVisible,\n    setPasswordVisible,\n    setSnackbarVisible,\n    setSnackbarMessage,\n    navigation,\n  } = props;\n\n  const _socialMedia = socialMedia.charAt(0).toUpperCase() + socialMedia.slice(1);\n\n  const handleShowHidePassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.copied2Clipboard);\n    } else {\n      setSnackbarMessage(infoMessages.copied2Clipboard);\n      setSnackbarVisible(true);\n    }\n\n    Clipboard.setString(passwordGenerated);\n  };\n\n  return (\n    <View style={icons.container}>\n      <TouchableOpacity onPress={handleShowHidePassword}>\n        <Entypo\n          style={icons.singleIcon}\n          name={passwordVisible ? 'eye' : 'eye-with-line'}\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleCopyButton}>\n        <MaterialCommunityIcons\n          style={icons.singleIcon}\n          name='content-copy'\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={() => {\n          dispatch(setIsEditMode({ isEditMode: true }));\n          dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n          dispatch(setPasswordPicked({ passwordPicked: passwordGenerated }));\n          dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n          dispatch(setSocialMediaPicked({ socialMediaPicked: socialMedia }));\n          navigation.navigate('PasswordGenerator');\n        }}\n      >\n        <FontAwesome style={{ marginRight: 5 }} name='edit' size={18} color='grey' />\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={() => {\n          customAlertMessage(\n            'Delete password warning',\n            `Are you sure you want to delete this ${_socialMedia}'s password?`,\n            () => dispatch(deletePasswordFromFirebase({ passwordId }))\n          );\n        }}\n      >\n        <Ionicons name='trash' size={18} color='#DB4437' />\n      </TouchableOpacity>\n    </View>\n  );\n};\n","import React, { useState } from 'react';\nimport { View, Text, TextInput } from 'react-native';\n\nimport { SocialMediaIcon } from 'components/SocialMediaIcon/socialMediaIcon';\nimport { PasswordIcons } from 'components/PasswordIcons/passwordIcon';\n\nimport { icons, item } from './styles';\n\nimport { PasswordItemI } from 'utils/constants';\n\nconst PasswordItem = (props: PasswordItemI) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const {\n    passwordId,\n    passwordGenerated,\n    socialMedia,\n    description,\n    setSnackbarVisible,\n    setSnackbarMessage,\n    navigation,\n  } = props;\n\n  return (\n    <View style={item.container}>\n      <View style={item.socialIconAndPasswordInfo}>\n        <SocialMediaIcon style={icons.socialMedia} socialMedia={socialMedia} />\n        <View style={item.passwordAndDescription}>\n          <Text style={{ marginBottom: 5 }}>{description}</Text>\n          <TextInput\n            style={item.passwordInput}\n            showSoftInputOnFocus={false}\n            caretHidden={true}\n            value={passwordGenerated}\n            secureTextEntry={!passwordVisible}\n          />\n        </View>\n      </View>\n      <PasswordIcons\n        passwordId={passwordId}\n        socialMedia={socialMedia}\n        description={description}\n        passwordGenerated={passwordGenerated}\n        passwordVisible={passwordVisible}\n        setPasswordVisible={setPasswordVisible}\n        setSnackbarVisible={setSnackbarVisible}\n        setSnackbarMessage={setSnackbarMessage}\n        navigation={navigation}\n      />\n    </View>\n  );\n};\n\nexport default PasswordItem;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#EBEAED',\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingBottom: 20,\n  },\n  items: {\n    margin: 20,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 20,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    width: 250,\n    backgroundColor: '#FFF',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    borderRadius: 60,\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {\n    position: 'absolute',\n    alignItems: 'center',\n    fontSize: 45,\n    color: '#C0C0C0',\n  },\n  navWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  navButtonContainer: {\n    justifyContent: 'center',\n    backgroundColor: '#E13333',\n    width: '78%',\n    padding: 6,\n    marginTop: 2,\n    marginHorizontal: 10,\n    borderRadius: 10,\n  },\n  navButton: {\n    alignItems: 'center',\n    fontSize: 13,\n    fontWeight: '700',\n    color: 'white',\n  },\n});\n\nexport default styles;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  getPasswordsFromFirebase,\n  selectPasswords,\n  setIsCreateMode,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nimport { View, ScrollView, BackHandler, Platform } from 'react-native';\nimport { FAB } from 'react-native-paper';\n\nimport PasswordItem from 'components/PasswordItem/passwordItem';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\n\nimport { passwordsCollection } from 'services/firebase';\n\nimport { appColors, PasswordI } from 'utils/constants';\nimport styles from './styles';\n\nexport const PasswordList = (props: { navigation: any }) => {\n  const [isSnackbarVisible, setSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [scrollIsClose2Bottom, setScrollIsClose2Bottom] = useState(false);\n\n  const { navigation } = props;\n  const dispatch = useDispatch();\n  const scrollViewRef = useRef();\n\n  const passwords = useSelector(selectPasswords);\n  const isRequesting = useSelector(selectRequest);\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', () => {\n      BackHandler.exitApp();\n      return true;\n    });\n    passwordsCollection.onSnapshot(() => {\n      dispatch(getPasswordsFromFirebase());\n    });\n  }, []);\n\n  const handleScrollIsClose2Bottom = (event: any) => {\n    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;\n    const paddingToBottom = Platform.OS === 'web' ? 7 : 10;\n    const result =\n      layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n\n    setScrollIsClose2Bottom(result);\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <ScrollView\n            // ref={scrollViewRef}\n            scrollEventThrottle={16}\n            onScroll={handleScrollIsClose2Bottom}\n            contentContainerStyle={{\n              flexGrow: 1,\n            }}\n            keyboardShouldPersistTaps='handled'\n          >\n            <View style={styles.items}>\n              {passwords.map((passwordItem: PasswordI) => {\n                console.log();\n                return (\n                  <PasswordItem\n                    key={passwordItem.id}\n                    passwordId={passwordItem.id}\n                    passwordGenerated={passwordItem.password_generated}\n                    socialMedia={passwordItem.social_media}\n                    description={passwordItem.description}\n                    setSnackbarVisible={setSnackbarVisible}\n                    setSnackbarMessage={setSnackbarMessage}\n                    navigation={navigation}\n                  />\n                );\n              })}\n            </View>\n          </ScrollView>\n          <FAB\n            style={{\n              position: 'absolute',\n              margin: 26,\n              right: 0,\n              bottom: isSnackbarVisible ? 40 : 0,\n              backgroundColor: appColors.primary,\n            }}\n            color={appColors.textTint}\n            visible={!scrollIsClose2Bottom}\n            icon='plus'\n            onPress={() => {\n              dispatch(setIsCreateMode({ isCreateMode: true }));\n              navigation.navigate('PasswordGenerator');\n            }}\n          />\n          <CustomSnackbar\n            message={snackbarMessage}\n            isSnackbarVisible={isSnackbarVisible}\n            setSnackbarVisible={setSnackbarVisible}\n          />\n        </View>\n      )}\n    </>\n  );\n};\n","import { StyleSheet, Platform } from 'react-native';\n\nexport const imageBackground = StyleSheet.create({\n  container: {\n    width: undefined,\n    padding: 16,\n    paddingTop: 48,\n  },\n  name: {\n    marginTop: 60,\n    paddingHorizontal: 5,\n    color: '#F0F0F0',\n    backgroundColor: 'rgba(48, 145, 224, 0.6)',\n    borderRadius: 5,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textShadowColor: '#000',\n    textShadowOffset: { width: 5, height: 5 },\n    textShadowRadius: 10,\n  },\n});\n\nexport const divider = StyleSheet.create({\n  divider: {\n    marginHorizontal: 20,\n    marginTop: 40,\n    marginBottom: 20,\n    backgroundColor: '#464646',\n  },\n});\n\nexport const signout = StyleSheet.create({\n  container: {\n    backgroundColor: '#F3BBBB',\n    borderRadius: 5,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    marginHorizontal: 10,\n    paddingVertical: 15,\n    paddingLeft: Platform.OS === 'web' ? 19 : 17,\n  },\n  icon: {\n    marginRight: 32,\n  },\n  text: {\n    color: '#F11D1D',\n  },\n});\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport { Image, View, Text, ScrollView, ImageBackground, TouchableOpacity } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Divider, Drawer } from 'react-native-paper';\nimport { FontAwesome, MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { selectUserEmail } from 'reduxStore/slices/userSlice';\nimport { unsetPasswords, setIsCreateMode } from 'reduxStore/slices/passwordSlice';\n\nimport { signOut } from 'services/firebase';\n\nimport { imageBackground, divider, signout } from './styles';\n\nexport const CustomSidebar = (props: any) => {\n  const userEmail = useSelector(selectUserEmail);\n  const name = userEmail ? userEmail.substring(0, userEmail.indexOf('@')) : '';\n  const userName = name.charAt(0).toUpperCase() + name.slice(1);\n  const { navigation } = props;\n  const dispatch = useDispatch();\n\n  const handleSignOut = () => {\n    signOut(dispatch(unsetPasswords()), navigation.replace('Login'));\n  };\n\n  return (\n    <SafeAreaProvider>\n      <ImageBackground\n        source={require('assets/img/sidebar-banner.png')}\n        style={imageBackground.container}\n      >\n        <Text style={imageBackground.name}>Hi there, {userName} !</Text>\n      </ImageBackground>\n      <Drawer.Section title='Pages'>\n        <ScrollView style={{ paddingTop: 10 }}>\n          <DrawerItemList {...props} />\n          <DrawerItem\n            label='Password Generator'\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons name='engine-outline' size={size * 0.75} color={color} />\n            )}\n            onPress={() => {\n              navigation.closeDrawer();\n              dispatch(setIsCreateMode({ isCreateMode: true }));\n              navigation.navigate('PasswordGenerator');\n            }}\n          />\n        </ScrollView>\n      </Drawer.Section>\n\n      <Drawer.Section>\n        <DrawerItem\n          icon={({ color, size }) => (\n            <MaterialIcons name='logout' size={size * 0.75} color={color} />\n          )}\n          label='Sign out'\n          onPress={handleSignOut}\n        />\n      </Drawer.Section>\n    </SafeAreaProvider>\n  );\n};\n","import React from 'react';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport { PasswordList } from 'screens/PasswordList/passwordList';\nimport { CustomSidebar } from 'components/CustomSidebar/customSidebar';\n\nimport { Feather, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { Dimensions } from 'react-native';\n\nconst CustomDrawer = createDrawerNavigator();\n\nexport const Drawer = (props: { navigation: any }) => {\n  return (\n    <CustomDrawer.Navigator\n      screenOptions={{\n        drawerStyle: {\n          width: Dimensions.get('window').width * 0.7,\n        },\n        drawerActiveBackgroundColor: '#9ac8fc',\n        drawerActiveTintColor: '#3091e0',\n        drawerItemStyle: {\n          borderRadius: 5,\n        },\n      }}\n      drawerContent={(props) => <CustomSidebar {...props} />}\n    >\n      <CustomDrawer.Screen\n        name='PasswordList'\n        component={PasswordList}\n        options={{\n          title: 'Password List',\n          headerStyle: {\n            backgroundColor: '#3091e0',\n          },\n          headerTintColor: '#FFF',\n          drawerIcon: ({ color, size }) => <Feather name='list' size={size * 0.75} color={color} />,\n        }}\n      />\n    </CustomDrawer.Navigator>\n  );\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nconst borderWidth = 4;\n\nexport const styles = StyleSheet.create({\n  sliderContainer: {\n    width: Platform.OS === 'web' ? '85%' : '80%',\n    paddingVertical: 10,\n    paddingLeft: 10,\n    flexDirection: 'column',\n  },\n});\n\nexport const trackMarkStyles = StyleSheet.create({\n  activeMark: {\n    borderColor: 'red',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n  inactiveMark: {\n    borderColor: 'grey',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { generatePassword, selectPasswordPicked, setLength } from 'reduxStore/slices/passwordSlice';\n\nimport { View, Text } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport { trackMarkStyles, styles } from './styles';\nimport { appColors } from 'utils/constants';\n\n// Reference: https://youtu.be/MwSudWtT7ps?t=271\n\nconst SliderContainer = (props: { defaultValue: number; handleGeneratePassword: any }) => {\n  const { defaultValue, handleGeneratePassword } = props;\n  const [value, setValue] = useState(defaultValue);\n  const passwordPicked = useSelector(selectPasswordPicked);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isNaN(value) && !passwordPicked) {\n      //TODO: This flow needs to be updated in future\n      /* If there was a password picked for the edit flow\n       * a new password won't be generated.\n       * */\n      dispatch(setLength({ length: value }));\n      dispatch(generatePassword());\n    }\n  }, [value]);\n\n  return (\n    <View style={styles.sliderContainer}>\n      <Slider\n        step={1}\n        value={defaultValue}\n        minimumValue={6}\n        maximumValue={50}\n        minimumTrackTintColor={appColors.primary}\n        maximumTrackTintColor={appColors.maximumTintColorSlider}\n        thumbTintColor={appColors.primary}\n        onValueChange={setValue}\n      />\n    </View>\n  );\n};\n\nexport default SliderContainer;\n","import {\n  generatePassword,\n  setIsCreateMode,\n  setIsEditMode,\n  resetPasswordGeneratorState,\n} from 'reduxStore/slices/passwordSlice';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { infoMessages } from 'utils/constants';\n\n/* Password Generator utils */\nexport const resetConfigurationState = (dispatch: any) => {\n  dispatch(resetPasswordGeneratorState());\n};\n\nexport const handleGeneratePassword = (passwordFromState: string, dispatch: any) => {\n  if (!passwordFromState) {\n    dispatch(generatePassword());\n  }\n};\n\nexport const showAuthenticatedMessage = (userId: string, isCreatedMode: boolean) => {\n  if (userId && isCreatedMode) {\n    showInfoMessage(infoMessages.about2CreatePassword);\n  }\n};\n\n/* Password Generator Configurator utils */\nexport const handleLeftCheckboxes = (\n  dispatch: any,\n  setCheck1: any,\n  setCheck2: any,\n  selector1: string,\n  selector2: string,\n  value: boolean,\n  handleOtherCheckboxes: any\n) => {\n  const payloadString1 = `{ \"${selector1}\": ${value} }`;\n  const payloadString2 = `{ \"${selector2}\": ${!value} }`;\n  const payload1 = JSON.parse(payloadString1);\n  const payload2 = JSON.parse(payloadString2);\n\n  dispatch(setCheck1(payload1));\n  dispatch(setCheck2(payload2));\n\n  handleOtherCheckboxes();\n};\n\nexport const handleRightCheckboxes = (\n  value: boolean,\n  checkbox1: boolean,\n  checkbox2: boolean,\n  checkbox3: boolean,\n  dispatch: any,\n  configuratorAction: any,\n  payload: object\n) => {\n  if (checkbox1 || checkbox2 || checkbox3) {\n    dispatch(configuratorAction(payload));\n  }\n};\n\nexport const updateConfiguratorStateAndGeneratePassword = (\n  dispatch: any,\n  generatePassword: any\n) => {\n  dispatch(generatePassword());\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Text, View, ToastAndroid, Platform /*, TouchableOpacity*/ } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { checkBox } from 'screens/PasswordGenerator/styles';\nimport {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n  selectIsEasy2Read,\n  selectIsAllChar,\n  selectIsUpperCase,\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n} from 'reduxStore/slices/configuratorSlice';\nimport { generatePassword } from 'reduxStore/slices/passwordSlice';\n\nimport {\n  handleLeftCheckboxes,\n  handleRightCheckboxes,\n  updateConfiguratorStateAndGeneratePassword,\n} from 'utils/configuratorUtils';\nimport { appColors } from 'utils/constants';\n\n/* Reference for checkbox usage: [\n  https://docs.expo.dev/versions/latest/sdk/checkbox/,\n  https://snack.expo.dev/\n]\n */\n\nexport const PasswordConfigurator = () => {\n  const dispatch = useDispatch();\n\n  const isEasy2Read = useSelector(selectIsEasy2Read);\n  const isAllChar = useSelector(selectIsAllChar);\n\n  const isUpperCase = useSelector(selectIsUpperCase);\n  const isLowerCase = useSelector(selectIsLowerCase);\n  const isNumbers = useSelector(selectIsNumbers);\n  const isSymbols = useSelector(selectIsSymbols);\n\n  const handleRightCheckboxesGivenLeftCheckboxes = () => {\n    dispatch(setIsUpperCaseAndIsLowerCase({ isUpperCase: true, isLowerCase: true }));\n\n    if (!isEasy2Read || isAllChar) {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: false, isSymbols: false }));\n    } else {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: true, isSymbols: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  return (\n    <View style={checkBox.container}>\n      {/* Left checkboxes */}\n      <View style={{ flexDirection: 'column', marginLeft: -20 }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Easy to read'}\n            isChecked={isEasy2Read}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsEasy2Read,\n                setIsAllChar,\n                'isEasy2Read',\n                'isAllChar',\n                !isEasy2Read,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'All characters'}\n            isChecked={isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsAllChar,\n                setIsEasy2Read,\n                'isAllChar',\n                'isEasy2Read',\n                !isAllChar,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n      </View>\n\n      {/* Right checkboxes */}\n      <View style={{ flexDirection: 'column' }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Uppercase'}\n            isChecked={isUpperCase}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isUpperCase,\n                isLowerCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsUpperCase,\n                { isUpperCase: !isUpperCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Lowercase'}\n            isChecked={isLowerCase}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isLowerCase,\n                isUpperCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsLowerCase,\n                { isLowerCase: !isLowerCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Numbers'}\n            isChecked={isNumbers}\n            disabled={!isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isNumbers,\n                isUpperCase,\n                isLowerCase,\n                isSymbols,\n                dispatch,\n                setIsNumbers,\n                {\n                  isNumbers: !isNumbers,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Symbols'}\n            isChecked={isSymbols}\n            disabled={!isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isSymbols,\n                isUpperCase,\n                isLowerCase,\n                isNumbers,\n                dispatch,\n                setIsSymbols,\n                {\n                  isSymbols: !isSymbols,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const createEditPassword = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n\n  userInputContainer: {\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: 10,\n    marginBottom: 5,\n  },\n\n  textInput: {\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n    marginBottom: 5,\n  },\n\n  dropdown: {\n    borderRadius: 10,\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n  },\n\n  textLabel: { fontSize: 17, marginRight: 5, marginBottom: 5 },\n\n  descriptionLengthIndicator: {\n    fontSize: 12,\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  savePassword2Firebase,\n  editPasswordFromFirebase,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport {\n  getSocialMediaListFromFirebase,\n  selectSocialMediaList,\n  selectSocialMediaPicked,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\n\nimport { Picker, Text, TextInput, View } from 'react-native';\nimport { Entypo } from '@expo/vector-icons';\n\nimport { cardView, shadow } from 'screens/PasswordGenerator/styles';\nimport { createEditPassword } from './styles';\nimport { appColors } from 'utils/constants';\nimport { socialMediaCollection } from 'services/firebase';\nimport { customAlertMessage } from 'utils/infoMessages';\n\nexport const CreateEditPasswordConfigurator = (props: { navigation: any }) => {\n  const dispatch = useDispatch();\n  const passwordDescriptionMaxLen = 60;\n  const [description, setDescription] = useState('');\n  const socialMediaPicked = useSelector(selectSocialMediaPicked);\n  const passwordDescriptionPicked = useSelector(selectPasswordDescriptionPicked);\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const password = useSelector(selectPassword);\n\n  const { navigation } = props;\n  const createEditButtonLabel = isCreateMode ? 'Save' : 'Edit';\n\n  useEffect(() => {\n    if (isCreateMode || isEditMode) {\n      if (isEditMode) {\n        setDescription(passwordDescriptionPicked);\n      }\n\n      socialMediaCollection.onSnapshot(() => {\n        dispatch(getSocialMediaListFromFirebase());\n      });\n    }\n  }, []);\n\n  return (\n    <View style={[cardView.container, shadow.container, createEditPassword.container]}>\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Social media:</Text>\n        <Picker\n          // ref={pickerRef}\n          style={createEditPassword.dropdown}\n          selectedValue={socialMediaPicked}\n          onValueChange={(itemValue, itemIndex) => {\n            dispatch(setSocialMediaPicked({ socialMediaPicked: itemValue }));\n          }}\n        >\n          {socialMediaList.map((item: { id: string; name: string }) => {\n            const label = item.name.charAt(0).toUpperCase() + item.name.slice(1);\n            return <Picker.Item key={item.id} label={label} value={item.name} />;\n          })}\n        </Picker>\n      </View>\n\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Description:</Text>\n        <TextInput\n          style={createEditPassword.textInput}\n          maxLength={passwordDescriptionMaxLen}\n          value={description}\n          onChangeText={(text: string) => setDescription(text)}\n        />\n        <Text style={createEditPassword.descriptionLengthIndicator}>\n          {description.length}/{passwordDescriptionMaxLen}\n        </Text>\n      </View>\n\n      <Entypo.Button\n        style={createEditPassword.button}\n        name={isCreateMode ? 'save' : 'edit'}\n        size={24}\n        color={appColors.textTint}\n        backgroundColor={appColors.primary}\n        onPress={() => {\n          if (socialMediaPicked !== '') {\n            const data = {\n              password,\n              description,\n              socialMedia: socialMediaPicked,\n            };\n            if (isEditMode) {\n              customAlertMessage(\n                'Edit password warning !',\n                \"If you update this password, you won't be able to recover it.\",\n                () => {\n                  dispatch(editPasswordFromFirebase(data));\n                  navigation.navigate('PasswordList');\n                }\n              );\n            } else {\n              dispatch(savePassword2Firebase(data));\n              navigation.navigate('PasswordList');\n            }\n          }\n        }}\n      >\n        {createEditButtonLabel}\n      </Entypo.Button>\n    </View>\n  );\n};\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  generatePassword,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordLength,\n  selectPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\n\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Clipboard,\n  BackHandler,\n  Platform,\n  ScrollView,\n} from 'react-native';\nimport { Divider } from 'react-native-paper';\nimport Checkbox from 'expo-checkbox';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport SliderContainer from 'components/SliderContainer/sliderContainer';\nimport { PasswordConfigurator } from 'components/PasswordConfigurator/passwordConfigurator';\nimport { CreateEditPasswordConfigurator } from 'components/CreateEditPasswordConfigurator/createEditPasswordConfigurator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\n\nimport { cardView, shadow, screen, passwordStyle, configuration, checkBox } from './styles';\nimport { getPasswordGenerated } from 'utils/localStorageFuncs';\nimport { infoMessages } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport {\n  resetConfigurationState,\n  handleGeneratePassword,\n  showAuthenticatedMessage,\n} from 'utils/configuratorUtils';\n\nexport const PasswordGenerator = (props: { navigation: any }) => {\n  const { navigation } = props;\n  const [isSnackbarVisible, setSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  const passwordFromState = useSelector(selectPassword);\n  const passwordLength = useSelector(selectPasswordLength);\n\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordPicked = useSelector(selectPasswordPicked);\n\n  const userId = useSelector(selectUserId);\n\n  const screenTitle = isEditMode\n    ? 'Password Edit'\n    : `Password Generator ${!userId ? '(Only)' : ''}`;\n\n  const dispatch = useDispatch();\n\n  const _handleGeneratePassword = () => {\n    handleGeneratePassword(passwordFromState, dispatch);\n  };\n\n  const handleCopyButton = () => {\n    getPasswordGenerated()\n      .then((password: any | string) => {\n        const password2Clipboard = isEditMode ? passwordFromState : password.password;\n\n        if (Platform.OS === 'android') {\n          showInfoMessage(infoMessages.copied2Clipboard);\n        } else {\n          setSnackbarMessage(infoMessages.copied2Clipboard);\n          setSnackbarVisible(true);\n        }\n\n        Clipboard.setString(password2Clipboard);\n      })\n      .catch((err: any) => {\n        console.log({ err });\n        Clipboard.setString('');\n      });\n  };\n\n  const handleRefreshButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.newPassword);\n    } else {\n      setSnackbarMessage(infoMessages.newPassword);\n      setSnackbarVisible(true);\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const handleBackAction = () => {\n    resetConfigurationState(dispatch);\n    navigation.navigate(userId ? 'PasswordList' : 'Login');\n    return true;\n  };\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n\n    if (Platform.OS === 'android') {\n      showAuthenticatedMessage(userId, isCreateMode);\n    } else {\n      setSnackbarMessage(infoMessages.about2CreatePassword);\n      setSnackbarVisible(true);\n    }\n\n    return () => {\n      resetConfigurationState(dispatch);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: screenTitle,\n    });\n  });\n\n  return (\n    <>\n      <ScrollView>\n        <View style={screen.container}>\n          <View style={[cardView.container, passwordStyle.container, shadow.container]}>\n            <View style={passwordStyle.inputContainer}>\n              <TextInput\n                showSoftInputOnFocus={false}\n                caretHidden={true}\n                style={passwordStyle.input}\n                value={passwordFromState}\n              />\n              <View style={passwordStyle.icons}>\n                <TouchableOpacity onPress={handleCopyButton}>\n                  <MaterialCommunityIcons\n                    style={{ marginRight: 10 }}\n                    name='content-copy'\n                    size={24}\n                    color='grey'\n                  />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={handleRefreshButton}>\n                  <Ionicons name='reload' size={24} color='grey' />\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n\n          <View style={[cardView.container, configuration.container, shadow.container]}>\n            <View style={configuration.textContainer}>\n              <Text style={configuration.textHeader}>Configure your password</Text>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <View style={configuration.passwordLengthContainer}>\n              <Text style={{ fontSize: 17 }}>Password length</Text>\n              <View style={configuration.lengthSliderContainer}>\n                <TextInput\n                  showSoftInputOnFocus={false}\n                  caretHidden={true}\n                  style={configuration.inputLength}\n                  keyboardType={'numeric'}\n                  value={passwordFromState.length.toString()}\n                />\n                <SliderContainer\n                  defaultValue={isEditMode ? passwordFromState.length : 10}\n                  handleGeneratePassword={_handleGeneratePassword}\n                />\n              </View>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <PasswordConfigurator />\n          </View>\n\n          {(isCreateMode || isEditMode) && (\n            <CreateEditPasswordConfigurator navigation={navigation} />\n          )}\n        </View>\n      </ScrollView>\n\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={isSnackbarVisible}\n        setSnackbarVisible={setSnackbarVisible}\n      />\n    </>\n  );\n};\n","import { Dimensions, StyleSheet } from 'react-native';\n\nexport const popoverStyles = StyleSheet.create({\n  content: {\n    width: Dimensions.get('screen').width * 0.45,\n    padding: 16,\n    backgroundColor: 'white',\n    borderRadius: 8,\n  },\n  arrow: {\n    borderTopColor: 'white',\n  },\n  background: {\n    backgroundColor: 'rgba(66,66,66,0.5)',\n  },\n});\n","import React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport { Popover } from 'react-native-modal-popover';\nimport { Feather } from '@expo/vector-icons';\n\nimport { popoverMessage } from 'utils/constants';\nimport { popoverStyles } from './styles';\n\nexport const CustomPopover = (props: {\n  popoverVisible: boolean;\n  closePopover: any;\n  popoverAnchorRect: any;\n  touchableRef: any;\n  onPress: any;\n}) => {\n  const { popoverVisible, closePopover, popoverAnchorRect, touchableRef, onPress } = props;\n  return (\n    <>\n      <TouchableOpacity ref={touchableRef} onPress={onPress}>\n        <Feather name='info' size={20} color='black' />\n      </TouchableOpacity>\n      <Popover\n        contentStyle={popoverStyles.content}\n        arrowStyle={popoverStyles.arrow}\n        backgroundStyle={popoverStyles.background}\n        visible={popoverVisible}\n        onClose={closePopover}\n        fromRect={popoverAnchorRect}\n        placement='top'\n        supportedOrientations={['portrait', 'landscape']}\n      >\n        <Text>{popoverMessage}</Text>\n      </Popover>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectRequest,\n  setIsRequest,\n  unsetIsRequest,\n} from 'reduxStore/slices/applicationStatusSlice';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { Image, Text, TextInput, Platform, View, TouchableOpacity } from 'react-native';\nimport { usePopover } from 'react-native-modal-popover';\n\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { PasswordToggle } from 'components/PasswordToggle/passwordToggle';\nimport { CustomPopover } from 'components/Popover/popover';\nimport { shadow } from 'screens/PasswordGenerator/styles';\n\nimport { setUserData2LS } from 'utils/localStorageFuncs';\nimport { auth, signIn } from 'services/firebase';\n\nimport styles from './styles';\n\n// Reference for popover: https://github.com/eveningkid/react-native-popable\n\nexport const Login = (props: { navigation: any }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [hidePassword, setHidePassword] = useState(true);\n\n  const dispatch = useDispatch();\n  const isRequesting = useSelector(selectRequest);\n  const { navigation } = props;\n\n  const { openPopover, closePopover, popoverVisible, touchableRef, popoverAnchorRect } =\n    usePopover();\n\n  useEffect(() => {\n    dispatch(setIsRequest({ isRequest: true }));\n  }, []);\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          dispatch(unsetIsRequest());\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n          dispatch(unsetIsRequest());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleLogin = () => {\n    signIn(username, password);\n  };\n\n  const handleHidePassword = () => {\n    setHidePassword(!hidePassword);\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n          <View style={styles.inputContainer}>\n            <TextInput\n              placeholder='Username'\n              value={username}\n              style={[styles.input, shadow.container]}\n              onChangeText={(text: string) => setUsername(text)}\n            />\n            <TextInput\n              placeholder='Password'\n              value={password}\n              style={[styles.input, shadow.container]}\n              onChangeText={(text: string) => setPassword(text)}\n              secureTextEntry={hidePassword}\n            />\n            <PasswordToggle hidePassword={!hidePassword} action={handleHidePassword} />\n          </View>\n\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity onPress={handleLogin} style={styles.button}>\n              <Text style={styles.buttonText}>Login</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('SignUp');\n              }}\n              style={[styles.button, styles.buttonOutLine]}\n            >\n              <Text style={styles.buttonOutLineText}>Sign up</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.linkContainer}>\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('PasswordGenerator');\n              }}\n              style={styles.link}\n            >\n              <Text style={styles.linkText}>Use it without an account </Text>\n            </TouchableOpacity>\n\n            <CustomPopover\n              popoverVisible={popoverVisible}\n              closePopover={closePopover}\n              popoverAnchorRect={popoverAnchorRect}\n              touchableRef={touchableRef}\n              onPress={openPopover}\n            />\n          </View>\n        </View>\n      )}\n    </>\n  );\n};\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const screen = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    marginBottom: 5,\n  },\n});\n\nexport const shadow = StyleSheet.create({\n  container: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n});\n\nexport const cardView = StyleSheet.create({\n  container: {\n    width: '90%',\n    padding: 10,\n    backgroundColor: '#FFF',\n    borderRadius: 5,\n    marginBottom: 15,\n    justifyContent: 'center',\n  },\n});\n\nexport const passwordStyle = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  inputContainer: {\n    margin: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  input: {\n    width: Platform.OS === 'web' ? '85%' : '75%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    borderRadius: 10,\n    textAlign: 'left',\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 16 : 20,\n  },\n  icons: {\n    marginLeft: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n});\n\nexport const configuration = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  textContainer: {\n    margin: 10,\n    justifyContent: 'flex-start',\n  },\n  textHeader: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  passwordLengthContainer: {\n    padding: 10,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n  inputLength: {\n    width: Platform.OS === 'web' ? '15%' : '20%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 7,\n    paddingVertical: 10,\n    marginRight: 5,\n    borderRadius: 10,\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  lengthSliderContainer: {\n    padding: 10,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n});\n\nexport const checkBox = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around',\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/amazon.4c033704.png\";","module.exports = __webpack_public_path__ + \"static/media/discord.17c0e41c.png\";","module.exports = __webpack_public_path__ + \"static/media/google.647ac848.png\";","module.exports = __webpack_public_path__ + \"static/media/slack.d9f7a674.png\";","module.exports = __webpack_public_path__ + \"static/media/okta.c20fa4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/outlook.217ab4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch.8e8dc9e1.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-banner.8c7d09ca.png\";","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  inputContainer: { width: '80%' },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginTop: 10,\n  },\n  buttonContainer: {\n    width: '60%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  button: {\n    backgroundColor: appColors.primary,\n    width: '70%',\n    padding: 10,\n    borderRadius: 10,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  buttonOutLine: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: appColors.primary,\n    borderWidth: 2,\n  },\n  buttonOutLineText: {\n    color: '#4F4F4F',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  loginImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n  tooltipImage: {},\n  linkContainer: {\n    width: '60%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  link: {\n    marginRight: 3,\n  },\n  linkText: {\n    fontSize: 15,\n  },\n});\n\nexport default styles;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState: {\n  isEasy2Read: boolean;\n  isAllChar: boolean;\n  isUpperCase: boolean;\n  isLowerCase: boolean;\n  isNumbers: boolean;\n  isSymbols: boolean;\n} = {\n  isEasy2Read: true,\n  isAllChar: false,\n  isUpperCase: true,\n  isLowerCase: true,\n  isNumbers: false,\n  isSymbols: false,\n};\n\nconst resetPasswordConfiguratorState = (state: any) => ({\n  ...state,\n  ...initialState,\n});\n\nexport const configuratorSlice = createSlice({\n  name: 'configurator',\n  initialState,\n  reducers: {\n    setIsEasy2Read: (state, { payload }) => ({\n      ...state,\n      isEasy2Read: payload.isEasy2Read,\n    }),\n    setIsAllChar: (state, { payload }) => ({\n      ...state,\n      isAllChar: payload.isAllChar,\n    }),\n    setIsUpperCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n    }),\n    setIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbers: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n    }),\n    setIsSymbols: (state, { payload }) => ({\n      ...state,\n      isSymbols: payload.isSymbols,\n    }),\n    setIsUpperCaseAndIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbersAndIsSymbols: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n      isSymbols: payload.isSymbols,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetPasswordGeneratorState, (state, { payload }) =>\n      resetPasswordConfiguratorState(state)\n    );\n  },\n});\n\nexport const {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n} = configuratorSlice.actions;\n\nexport const selectIsEasy2Read = (state: { configurator: { isEasy2Read: boolean } }) =>\n  state.configurator.isEasy2Read;\nexport const selectIsAllChar = (state: { configurator: { isAllChar: boolean } }) =>\n  state.configurator.isAllChar;\nexport const selectIsUpperCase = (state: { configurator: { isUpperCase: boolean } }) =>\n  state.configurator.isUpperCase;\nexport const selectIsLowerCase = (state: { configurator: { isLowerCase: boolean } }) =>\n  state.configurator.isLowerCase;\nexport const selectIsNumbers = (state: { configurator: { isNumbers: boolean } }) =>\n  state.configurator.isNumbers;\nexport const selectIsSymbols = (state: { configurator: { isSymbols: boolean } }) =>\n  state.configurator.isSymbols;\n","// Import the functions you need from the SDKs you need\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { clearUserDataFromLS, setUserData2LS } from 'utils/localStorageFuncs';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n};\n\nconst appLength: number = firebase.apps.length;\n\nconst app = appLength === 0 ? firebase.initializeApp(firebaseConfig) : firebase.app();\nconst database = firebase.firestore(app);\n\nexport const auth = firebase.auth();\nexport const passwordsCollection = database.collection('passwords');\nexport const socialMediaCollection = database.collection('social_media');\n\nexport const signIn = (username: string, password: string) => {\n  auth\n    .signInWithEmailAndPassword(`${username}@example.com`, password)\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      setUserData2LS(user?.uid, user?.email);\n    })\n    .catch((error) => {\n      alert(error.message);\n      console.log({ exception: error.message });\n    });\n};\n\nexport const signOut = (reduxAction: any, navigation: any) => {\n  auth\n    .signOut()\n    .then(() => {\n      clearUserDataFromLS();\n      reduxAction();\n      navigation.replace('Login');\n    })\n    .catch((error) => {\n      console.log({ exception: error.message });\n    });\n};\n\nexport const signUp = (username: string, password: string) => {\n  auth\n    .createUserWithEmailAndPassword(`${username}@example.com`, password)\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n      console.log({ user });\n    })\n    .catch((error) => {\n      alert(error.message);\n      console.log({ exception: error.message });\n    });\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { getUserDataFromLS } from 'utils/localStorageFuncs';\n\nexport const initialState = {\n  id: '',\n  email: '',\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUserData: (state, { payload }) => ({\n      ...state,\n      id: payload.id,\n      email: payload.email,\n    }),\n    unsetUserData: () => ({\n      ...initialState,\n    }),\n  },\n});\n\nexport const { setUserData, unsetUserData } = userSlice.actions;\n\nexport const selectUserId = (state: { user: { id: string } }) => state.user.id;\nexport const selectUserEmail = (state: { user: { email: string } }) => state.user.email;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  socialMediaPicked: string;\n  socialMediaList: any;\n} = {\n  socialMediaPicked: '',\n  socialMediaList: [],\n};\n\nexport const socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState,\n  reducers: {\n    setSocialMediaPicked: (state, { payload }) => ({\n      ...state,\n      socialMediaPicked: payload.socialMediaPicked,\n    }),\n    setSocialMediaList: (state, { payload }) => ({\n      ...state,\n      socialMediaList: payload.socialMediaList,\n    }),\n    getSocialMediaListFromFirebase: () => {},\n  },\n});\n\nexport const { setSocialMediaPicked, setSocialMediaList, getSocialMediaListFromFirebase } =\n  socialMediaSlice.actions;\n\nexport const selectSocialMediaPicked = (state: { socialMedia: { socialMediaPicked: any } }) =>\n  state.socialMedia.socialMediaPicked;\nexport const selectSocialMediaList = (state: { socialMedia: { socialMediaList: any } }) =>\n  state.socialMedia.socialMediaList;\n"],"sourceRoot":""}