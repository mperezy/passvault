{"version":3,"sources":["src/utils/localStorageFuncs.ts","src/services/database.ts","src/utils/infoMessages.ts","src/redux/slices/applicationStatusSlice.ts","src/components/PasswordConfigurator/CustomCheckBox/customCheckBox.tsx","src/components/LoadingIndicator/loadingIndicator.tsx","src/redux/slices/passwordSlice.ts","src/components/PasswordToggle/passwordToggle.tsx","src/components/CustomSnackbar/customSnackbar.tsx","src/utils/constants.ts","src/redux/sagas/passwordGeneratorSaga.ts","src/redux/sagas/getPasswordsSaga.ts","src/redux/sagas/getSocialMediaSaga.ts","src/redux/sagas/savePasswordSaga.ts","src/redux/sagas/deletePasswordSaga.ts","src/redux/sagas/updatePasswordSaga.ts","src/redux/sagas/index.ts","src/redux/slices/rootReducer.ts","src/redux/store/index.ts","assets/main/passvault-512px.png","App.tsx","src/screens/SignUp/signup.tsx","src/components/CustomStatusbar/customStatusbar.tsx","src/components/SocialMediaIcon/socialMediaIcon.tsx","src/utils/imageDataRetriever.ts","src/components/PasswordItem/styles.ts","src/components/PasswordIcons/passwordIcon.tsx","src/components/PasswordItem/passwordItem.tsx","src/screens/PasswordList/styles.ts","src/screens/PasswordList/passwordList.tsx","src/components/CustomSidebar/styles.ts","src/components/CustomSidebar/customSidebar.tsx","src/screens/Drawer/drawer.tsx","src/components/OnBoarding/OnBoardingItem/styles.ts","src/components/OnBoarding/OnBoardingItem/onBoardingItem.tsx","src/components/OnBoarding/Paginator/styles.ts","src/components/OnBoarding/Paginator/paginator.tsx","src/components/OnBoarding/NextButton/styles.ts","src/components/OnBoarding/NextButton/nextButton.tsx","src/screens/OnBoarding/slides.tsx","src/screens/OnBoarding/onBoarding.tsx","src/components/SliderContainer/styles.ts","src/components/SliderContainer/sliderContainer.tsx","src/utils/configuratorUtils.ts","src/components/PasswordConfigurator/passwordConfigurator.tsx","src/components/CreateEditPasswordConfigurator/styles.ts","src/components/CreateEditPasswordConfigurator/createEditPasswordConfigurator.tsx","src/screens/PasswordGenerator/passwordGenerator.tsx","src/components/Popover/styles.ts","src/components/Popover/popover.tsx","src/screens/Login/login.tsx","webpack:///./index.js?41f5","src/screens/PasswordGenerator/styles.ts","assets/amazon.png","assets/discord.png","assets/google.png","assets/slack.png","assets/okta.png","assets/outlook.png","assets/twitch.png","assets/img/sidebar-banner.png","src/screens/Login/styles.ts","src/redux/slices/configuratorSlice.ts","src/services/firebase.ts","src/redux/slices/userSlice.ts","src/redux/slices/socialMediaSlice.ts"],"names":["appName","isObject","value","storeData","key","a","async","finalValue","JSON","stringify","toString","AsyncStorage","setItem","console","log","asyncStorageException","getData","getItem","parse","removeItem","setUserData2LS","userId","email","then","data","setPasswordGenerated","password","getPasswordGenerated","empty","catch","err","clearUserDataFromLS","res","setOnBoardingViewed","getOnBoardingViewed","firstLaunchFlag","sortBy","obj1","obj2","field","kind","x","getPasswordsByUserId","passwordList","passwordsCollection","where","get","querySnapshot","forEach","doc","push","id","password_generated","social_media","description","defaultEmptyPasswordDescription","createdAt","error","sort","y","sendPassword2Firebase","socialMedia","add","Date","getTime","uid","deletePasswordById","passwordId","delete","updatePasswordByIdFromFirebase","passwordGenerated","update","getSocialMedia","socialMediaList","socialMediaCollection","name","showInfoMessage","message","ToastAndroid","show","SHORT","customAlertMessage","title","action","Platform","OS","Alert","alert","text","style","onPress","confirm","initialState","isRequest","applicationStatusSlice","createSlice","reducers","setIsRequest","state","payload","unsetIsRequest","extraReducers","builder","addCase","getPasswordsFromFirebase","setPasswords","actions","selectRequest","applicationStatus","CustomCheckBox","props","label","isChecked","disabled","color","flexDirection","alignItems","margin","undefined","fontSize","opacity","styles","StyleSheet","create","container","flex","justifyContent","horizontal","padding","LoadingIndicator","size","passwordIdPicked","passwordPicked","passwordDescriptionPicked","length","isCreateMode","isEditMode","passwords","passwordSlice","setPassword","setPasswordPicked","setPasswordIdPicked","setPasswordDescriptionPicked","setLength","setIsCreateMode","setIsEditMode","resetPasswordGeneratorState","resetPasswordState","unsetPasswords","generatePassword","savePassword2Firebase","deletePasswordFromFirebase","editPasswordFromFirebase","selectPassword","selectPasswordIdPicked","selectPasswordPicked","selectPasswordDescriptionPicked","selectIsCreateMode","selectIsEditMode","selectPasswordLength","selectPasswords","PasswordToggle","hidePassword","marginTop","appColors","primary","CustomSnackbar","isSnackbarVisible","setSnackbarVisible","visible","onDismiss","duration","lower","upper","number","symbols","devWarnings","popoverMessage","infoMessages","copied2Clipboard","newPassword","about2CreatePassword","FIREBASE_STORAGE_URL","FIREBASE_STORAGE_BUCKET","imagesTokens","FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN","textTint","maximumTintColorSlider","activeTint","primaryDark","getPasswordGeneratorFlow","select","selectIsUpperCase","isUpperCase","selectIsLowerCase","isLowerCase","selectIsNumbers","isNumbers","selectIsSymbols","isSymbols","isUpper","isLower","isNumber","isSymbol","all","i","charAt","Math","floor","random","put","exception","passwordGeneratorSaga","takeLeading","type","getPasswordsFlow","selectUserId","call","source","getPasswordsSaga","getSocialMediaFlow","socialMediaSelected","setSocialMediaList","setSocialMediaPicked","socialMediaPicked","getSocialMediaSaga","getSocialMediaListFromFirebase","savePasswordFlow","savePasswordSaga","deletePasswordFlow","deletePasswordSaga","updatePasswordFlow","updatePasswordSaga","IndexSagas","createRootReducer","combineReducers","user","userSlice","reducer","configurator","configuratorSlice","socialMediaSlice","sagaMiddleware","createSagaMiddleware","middleware","store","configureStore","run","module","exports","process","LogBox","ignoreLogs","window","Stack","createNativeStackNavigator","App","useState","loading","setLoading","onBoardingViewed","useEffect","finally","Navigator","Screen","component","options","headerShown","OnBoarding","Login","SignUp","PasswordGenerator","headerStyle","backgroundColor","headerTintColor","Drawer","username","setUsername","setHidePassword","dispatch","useDispatch","navigation","auth","onAuthStateChanged","setUserData","replace","unsetUserData","loginImage","require","inputContainer","placeholder","input","shadow","onChangeText","secureTextEntry","buttonContainer","signUp","button","buttonText","linkContainer","navigate","link","linkText","CustomStatusbar","animated","barStyle","SocialMediaIcon","includes","imageSource","imageSourceRetriever","Image","socialMediaIcon","socialMediaColor","socialMediaIconColor","AntDesign","item","borderRadius","marginLeft","marginRight","marginBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","socialIconAndPasswordInfo","passwordAndDescription","paddingHorizontal","descriptionTextLabel","passwordInput","fontFamily","fontWeight","icons","singleIcon","PasswordIcons","passwordVisible","setPasswordVisible","setSnackbarMessage","_socialMedia","toUpperCase","slice","View","TouchableOpacity","Entypo","Clipboard","setString","MaterialCommunityIcons","FontAwesome","Ionicons","PasswordItem","Text","TextInput","showSoftInputOnFocus","caretHidden","sectionTitle","paddingBottom","items","writeTaskWrapper","position","bottom","paddingVertical","borderColor","borderWidth","addWrapper","addText","navWrapper","navButtonContainer","marginHorizontal","navButton","PasswordList","snackbarMessage","scrollIsClose2Bottom","setScrollIsClose2Bottom","useRef","useSelector","isRequesting","BackHandler","addEventListener","exitApp","onSnapshot","ScrollView","scrollEventThrottle","onScroll","event","nativeEvent","layoutMeasurement","contentOffset","contentSize","paddingToBottom","result","contentContainerStyle","flexGrow","keyboardShouldPersistTaps","map","passwordItem","FAB","right","icon","imageBackground","paddingTop","textShadowColor","textShadowOffset","textShadowRadius","divider","paddingLeft","CustomSidebar","userEmail","selectUserEmail","substring","indexOf","userName","ImageBackground","Section","DrawerItemList","DrawerItem","closeDrawer","MaterialIcons","signOut","CustomDrawer","createDrawerNavigator","screenOptions","drawerStyle","Dimensions","drawerActiveBackgroundColor","drawerActiveTintColor","drawerItemStyle","drawerContent","drawerIcon","Feather","image","textAlign","OnBoardingItem","useWindowDimensions","uri","resizeMode","marginVertical","dot","Paginator","scrollX","_","inputRange","dotWidth","interpolate","outputRange","extrapolate","Animated","NextButton","percentage","scrollTo","circumference","PI","progressAnimation","Value","current","progressRef","toValue","timing","useNativeDriver","start","addListener","strokeDashoffset","setNativeProps","removeAllListeners","rotation","origin","stroke","cx","cy","r","strokeWidth","ref","strokeDasharray","activeOpacity","FIREBASE_STORAGE_FINAL_URL","slides","currentIndex","setCurrentIndex","slidesRef","viewableItemsChanged","viewableItems","index","viewConfig","viewAreaCoveragePercentThreshold","FlatList","renderItem","showsHorizontalScrollIndicator","pagingEnabled","bounces","keyExtractor","onViewableItemsChanged","viewabilityConfig","scrollToIndex","sliderContainer","activeMark","left","inactiveMark","SliderContainer","defaultValue","handleGeneratePassword","setValue","isNaN","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","onValueChange","resetConfigurationState","handleLeftCheckboxes","setCheck1","setCheck2","selector1","selector2","handleOtherCheckboxes","payloadString1","payloadString2","payload1","payload2","handleRightCheckboxes","checkbox1","checkbox2","checkbox3","configuratorAction","updateConfiguratorStateAndGeneratePassword","PasswordConfigurator","isEasy2Read","selectIsEasy2Read","isAllChar","selectIsAllChar","handleRightCheckboxesGivenLeftCheckboxes","setIsUpperCaseAndIsLowerCase","setIsNumbersAndIsSymbols","checkBox","section","setIsEasy2Read","setIsAllChar","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSymbols","createEditPassword","userInputContainer","textInput","dropdown","textLabel","descriptionLengthIndicator","alignSelf","CreateEditPasswordConfigurator","setDescription","selectSocialMediaPicked","selectSocialMediaList","createEditButtonLabel","cardView","Picker","selectedValue","itemValue","itemIndex","Item","maxLength","Button","scrollViewRef","isKeyboardVisible","setKeyboardVisible","passwordFromState","screenTitle","handleBackAction","isCreatedMode","showAuthenticatedMessage","keyboardDidShowListener","Keyboard","keyboardDidHideListener","remove","scrollToEnd","animating","useLayoutEffect","setOptions","screen","passwordStyle","password2Clipboard","configuration","textContainer","textHeader","Divider","passwordLengthContainer","lengthSliderContainer","inputLength","keyboardType","popoverStyles","content","arrow","borderTopColor","background","CustomPopover","popoverVisible","closePopover","popoverAnchorRect","touchableRef","contentStyle","arrowStyle","backgroundStyle","onClose","fromRect","placement","supportedOrientations","usePopover","openPopover","signIn","buttonOutLine","buttonOutLineText","registerRootComponent","paragraph","checkbox","tooltipImage","resetPasswordConfiguratorState","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","firebase","apps","initializeApp","database","firestore","collection","signInWithEmailAndPassword","userCredentials","reduxAction","createUserWithEmailAndPassword"],"mappings":"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","file":"static/js/app.be0f9e00.chunk.js","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst appName = 'passvault';\nconst isObject = (value: string) => typeof value === 'object';\n\nconst storeData = async (key: string, value: any) => {\n  try {\n    const finalValue = isObject(value) ? JSON.stringify(value) : value.toString();\n    await AsyncStorage.setItem(key, finalValue);\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst getData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (value !== null) {\n      return isObject(value) ? JSON.parse(value) : value;\n    }\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst removeItem = async (key: string) => {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst setUserData2LS = (userId: string | undefined, email: string | null | undefined) => {\n  storeData(`${appName}.userId`, userId || '').then((data) => data);\n  storeData(`${appName}.email`, email || '').then((data) => data);\n};\n\nconst setPasswordGenerated = (password: string) => {\n  storeData(`${appName}.password`, password).then((data: void) => data);\n};\n\nconst getPasswordGenerated = () => {\n  const empty = { password: '' };\n\n  return getData(`${appName}.password`)\n    .then((password: string) => ({ password }))\n    .catch((err) => {\n      console.log({ err });\n      return empty;\n    });\n};\n\nconst getUserDataFromLS = () => {\n  const empty = { userId: '', email: '' };\n\n  return getData(`${appName}.userId`)\n    .then((userId: string) => {\n      getData(`${appName}.email`)\n        .then((email: string) => ({\n          userId,\n          email,\n        }))\n        .catch((err: any) => {\n          console.log(err);\n          return empty;\n        });\n    })\n    .catch((err) => {\n      console.log(err);\n      return empty;\n    });\n};\n\nconst clearUserDataFromLS = () => {\n  removeItem(`${appName}.userId`).then((res: void) => res);\n  removeItem(`${appName}.email`).then((res: void) => res);\n};\n\nconst setOnBoardingViewed = (value: any) => {\n  storeData(`${appName}.alreadyLaunched`, value).then((data: void) => data);\n};\n\nconst getOnBoardingViewed = () => {\n  return getData(`${appName}.alreadyLaunched`)\n    .then((firstLaunchFlag) => firstLaunchFlag)\n    .catch((err) => {\n      console.log({ err });\n      return null;\n    });\n};\n\nexport {\n  setUserData2LS,\n  getUserDataFromLS,\n  clearUserDataFromLS,\n  setPasswordGenerated,\n  getPasswordGenerated,\n  setOnBoardingViewed,\n  getOnBoardingViewed,\n};\n","import { passwordsCollection, socialMediaCollection } from 'services/firebase';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst sortBy = (obj1: any, obj2: any, field: string, kind: string = 'asc') => {\n  const x = kind === 'asc' ? 1 : -1;\n  return obj1[field] < obj2[field] ? -1 * x : obj1[field] > obj2[field] ? 1 * x : 0;\n};\n\nexport const getPasswordsByUserId = async (userId: any) => {\n  const passwordList: {\n    id: string;\n    password_generated: string;\n    social_media: string;\n    description: string;\n    createdAt: number;\n  }[] = [];\n\n  await passwordsCollection\n    .where('uid', '==', userId)\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.forEach((doc) =>\n        passwordList.push({\n          id: doc.id,\n          password_generated: doc.data().password_generated,\n          social_media: doc.data().social_media,\n          description: doc.data().description || defaultEmptyPasswordDescription,\n          createdAt: doc.data().createdAt,\n        })\n      )\n    )\n    .catch((error) => {\n      console.log('Error getting documents: ', error);\n    });\n\n  return passwordList.sort((x, y) =>\n    sortBy(x, y, 'createdAt', process.env.PASSWORD_LIST_ORDER_TYPE)\n  );\n};\n\nexport const sendPassword2Firebase = async (\n  userId: string,\n  password: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .add({\n      createdAt: new Date().getTime(),\n      password_generated: password,\n      social_media: socialMedia,\n      description: description,\n      uid: userId,\n    })\n    .then(() => console.log('A new password was added in database.'))\n    .catch(() => console.log('Something went wrong trying to add a new password in database.'));\n};\n\nexport const deletePasswordById = async (passwordId: string | undefined) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .delete()\n    .then(() => console.log('A password was deleted from database.'))\n    .catch(() => console.log('Something went wrong trying to delete a password from database.'));\n};\n\nexport const updatePasswordByIdFromFirebase = async (\n  passwordId: string,\n  passwordGenerated: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .update({\n      password_generated: passwordGenerated,\n      description,\n      social_media: socialMedia,\n    })\n    .then(() => console.log('A password was updated from database.'))\n    .catch(() => console.log('Something went wrong trying to update a password from database.'));\n};\n\nexport const getSocialMedia = async () => {\n  const socialMediaList: { id: string; name: string }[] = [];\n\n  await socialMediaCollection.get().then((querySnapshot) => {\n    querySnapshot.forEach((doc) =>\n      socialMediaList.push({\n        id: doc.id,\n        name: doc.data().name,\n      })\n    );\n  });\n\n  return socialMediaList;\n};\n","import { ToastAndroid, Platform, Alert } from 'react-native';\n\nexport const showInfoMessage = (message: string) => {\n  ToastAndroid.show(message, ToastAndroid.SHORT);\n};\n\nexport const customAlertMessage = (title: string, message: string, action: any) => {\n  if (Platform.OS === 'web') {\n    const response = confirm(message);\n    if (response) {\n      action();\n    }\n  } else {\n    return Alert.alert(title, message, [\n      {\n        text: 'No',\n        style: 'cancel',\n      },\n      { text: 'Yes', onPress: () => action() },\n    ]);\n  }\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState = {\n  isRequest: false,\n};\n\nexport const applicationStatusSlice = createSlice({\n  name: 'applicationStatus',\n  initialState,\n  reducers: {\n    setIsRequest: (state, { payload }) => ({\n      ...state,\n      isRequest: payload.isRequest,\n    }),\n    unsetIsRequest: () => ({\n      ...initialState,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getPasswordsFromFirebase, (state, { payload }) => ({\n      ...state,\n      isRequest: true,\n    })),\n      builder.addCase(setPasswords, (state, { payload }) => ({\n        ...state,\n        isRequest: false,\n      }));\n  },\n});\n\nexport const { setIsRequest, unsetIsRequest } = applicationStatusSlice.actions;\n\nexport const selectRequest = (state: { applicationStatus: { isRequest: boolean } }) =>\n  state.applicationStatus.isRequest;\n","import React from 'react';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nexport const CustomCheckBox = (props: {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  color: string;\n  onPress: any;\n}) => {\n  const { label, isChecked, disabled, color, onPress } = props;\n\n  return (\n    <TouchableOpacity\n      disabled={disabled}\n      style={{ flexDirection: 'row', alignItems: 'center' }}\n      onPress={onPress}\n    >\n      <Checkbox\n        style={{ margin: 8 }}\n        value={isChecked}\n        disabled={disabled !== null ? disabled : false}\n        color={isChecked ? color : undefined}\n      />\n      <Text style={{ fontSize: 14, opacity: !disabled ? 1 : 0.3 }}>{label}</Text>\n    </TouchableOpacity>\n  );\n};\n","import React from 'react';\n\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n});\n\nexport const LoadingIndicator = () => {\n  return (\n    <View style={[styles.container, styles.horizontal]}>\n      <ActivityIndicator size='large' color='#3091e0' />\n    </View>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  password: string;\n  passwordIdPicked: string;\n  passwordPicked: string;\n  passwordDescriptionPicked: string;\n  length: number;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  passwords: any;\n} = {\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  passwords: [],\n};\n\nconst resetPasswordState = (state: any) => ({\n  ...state,\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n});\n\nexport const passwordSlice = createSlice({\n  name: 'password',\n  initialState,\n  reducers: {\n    setPassword: (state, { payload }) => ({\n      ...state,\n      password: payload.password,\n    }),\n    setPasswordPicked: (state, { payload }) => ({\n      ...state,\n      passwordPicked: payload.passwordPicked,\n    }),\n    setPasswordIdPicked: (state, { payload }) => ({\n      ...state,\n      passwordIdPicked: payload.passwordIdPicked,\n    }),\n    setPasswordDescriptionPicked: (state, { payload }) => ({\n      ...state,\n      passwordDescriptionPicked: payload.passwordDescriptionPicked,\n    }),\n    setLength: (state, { payload }) => ({\n      ...state,\n      length: payload.length,\n    }),\n    setIsCreateMode: (state, { payload }) => ({\n      ...state,\n      isCreateMode: payload.isCreateMode,\n    }),\n    setIsEditMode: (state, { payload }) => ({\n      ...state,\n      isEditMode: payload.isEditMode,\n    }),\n    setPasswords: (state, { payload }) => ({\n      ...state,\n      passwords: payload.passwords,\n    }),\n    resetPasswordGeneratorState: (state) => resetPasswordState(state),\n    unsetPasswords: () => ({ ...initialState }),\n    generatePassword: () => {},\n    getPasswordsFromFirebase: () => {},\n    savePassword2Firebase: (state, { payload }) => {},\n    deletePasswordFromFirebase: (state, { payload }) => {},\n    editPasswordFromFirebase: (state, { payload }) => {},\n  },\n});\n\nexport const {\n  setPassword,\n  setPasswordPicked,\n  setPasswordIdPicked,\n  setPasswordDescriptionPicked,\n  setLength,\n  setIsCreateMode,\n  setIsEditMode,\n  setPasswords,\n  resetPasswordGeneratorState,\n  unsetPasswords,\n  generatePassword,\n  getPasswordsFromFirebase,\n  savePassword2Firebase,\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n} = passwordSlice.actions;\n\nexport const selectPassword = (state: { password: { password: any } }) => state.password.password;\nexport const selectPasswordIdPicked = (state: { password: { passwordIdPicked: any } }) =>\n  state.password.passwordIdPicked;\nexport const selectPasswordPicked = (state: { password: { passwordPicked: any } }) =>\n  state.password.passwordPicked;\nexport const selectPasswordDescriptionPicked = (state: {\n  password: { passwordDescriptionPicked: any };\n}) => state.password.passwordDescriptionPicked;\nexport const selectIsCreateMode = (state: { password: { isCreateMode: boolean } }) =>\n  state.password.isCreateMode;\nexport const selectIsEditMode = (state: { password: { isEditMode: boolean } }) =>\n  state.password.isEditMode;\nexport const selectPasswordLength = (state: { password: string | any[] }) => state.password.length;\nexport const selectPasswords = (state: { password: { passwords: any } }) =>\n  state.password.passwords;\n","import React from 'react';\nimport { View } from 'react-native';\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { appColors } from 'utils/constants';\n\nexport const PasswordToggle = (props: { hidePassword: boolean; action: any }) => {\n  const { hidePassword, action } = props;\n  return (\n    <View style={{ marginTop: 10 }}>\n      <CustomCheckBox\n        label='Show password'\n        isChecked={hidePassword}\n        color={appColors.primary}\n        onPress={action}\n      />\n    </View>\n  );\n};\n","import React from 'react';\nimport { Snackbar } from 'react-native-paper';\n\n// Reference for Icons usage: https://icons.expo.fyi/\n\nexport const CustomSnackbar = (props: {\n  message: string;\n  isSnackbarVisible: boolean;\n  setSnackbarVisible: any;\n}) => {\n  const { message, isSnackbarVisible, setSnackbarVisible } = props;\n  return (\n    <Snackbar\n      visible={isSnackbarVisible}\n      onDismiss={() => setSnackbarVisible(!isSnackbarVisible)}\n      duration={1500}\n    >\n      {message}\n    </Snackbar>\n  );\n};\n","const lower = 'abcdefghijklmñopqrstuvwxyz';\nconst upper = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\nconst number = '0123456789';\nconst symbols = '[]{}<>\":|!@#$%^&*()_+`~/';\n\nconst devWarnings = [\n  'Clipboard has been extracted from react-native core',\n  'AsyncStorage has been extracted from react-native core',\n  'Setting a timer for a long period of time, i.e. multiple minutes',\n  'Picker has been extracted from react-native core and will be removed',\n];\n\nconst popoverMessage = 'You can generate passwords without store them.';\n\nconst defaultEmptyPasswordDescription = 'This password has no description. Please update it.';\n\nconst infoMessages = {\n  copied2Clipboard: 'The password was copied to clipboard',\n  newPassword: 'New password generated',\n  about2CreatePassword: \"You're about to create a new password\",\n};\n\nconst FIREBASE_STORAGE_URL = 'https://firebasestorage.googleapis.com';\nconst FIREBASE_STORAGE_BUCKET = process.env.FIREBASE_STORAGE_BUCKET;\n\nconst imagesTokens = {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN: '9a72b084-fbf7-4ec0-bfc7-4c0c4fe923c7',\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN: '48ac40a8-14ac-4b31-8246-1b9a64efc19e',\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN: 'dc6946e2-b384-45c3-8ccd-4e4ed27b3b41',\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN: '0a457929-f205-4b5f-afbe-2f832991a673',\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN: '79295f0a-cf45-4ed2-aa1d-0e7c29cafea3',\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN: '5f6da2b8-26cc-48ca-8352-30afd0cb3dd3',\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN: '5cf416cc-0f22-4ca6-be38-fc816742a76e',\n};\n\nconst appColors = {\n  textTint: '#FFF',\n  maximumTintColorSlider: '#d3d3d3',\n  activeTint: '#9ac8fc',\n  primary: '#3091e0',\n  primaryDark: '#236daa',\n};\n\nexport interface PasswordItemI {\n  passwordId: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  setSnackbarVisible: any;\n  setSnackbarMessage: any;\n  navigation: any;\n}\n\nexport interface PasswordIconsI {\n  passwordId: string;\n  socialMedia: string;\n  description: string;\n  passwordGenerated: string;\n  passwordVisible: boolean;\n  setPasswordVisible: any;\n  setSnackbarVisible: any;\n  setSnackbarMessage: any;\n  navigation: any;\n}\n\nexport interface PasswordI {\n  id: string;\n  createdAt: number;\n  description: string;\n  password_generated: string;\n  social_media: string;\n}\n\nexport {\n  devWarnings,\n  lower,\n  upper,\n  number,\n  symbols,\n  popoverMessage,\n  defaultEmptyPasswordDescription,\n  appColors,\n  infoMessages,\n  FIREBASE_STORAGE_URL,\n  FIREBASE_STORAGE_BUCKET,\n  imagesTokens,\n};\n","import { select, put, takeLeading } from 'redux-saga/effects';\nimport {\n  generatePassword,\n  selectIsEditMode,\n  selectPasswordLength,\n  selectPasswordPicked,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { lower, upper, number, symbols } from 'utils/constants';\nimport { setPasswordGenerated } from 'utils/localStorageFuncs';\n\nimport {\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n  selectIsUpperCase,\n} from 'reduxStore/slices/configuratorSlice';\n\nexport function* getPasswordGeneratorFlow(): Generator {\n  try {\n    const length = yield select(selectPasswordLength);\n    const isUpperCase = yield select(selectIsUpperCase);\n    const isLowerCase = yield select(selectIsLowerCase);\n    const isNumbers = yield select(selectIsNumbers);\n    const isSymbols = yield select(selectIsSymbols);\n\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const isUpper: string = isUpperCase ? upper : '';\n    const isLower: string = isLowerCase ? lower : '';\n    const isNumber: string = isNumbers ? number : '';\n    const isSymbol: string = isSymbols ? symbols : '';\n\n    const all = isUpper + isLower + isNumber + isSymbol;\n    let password = '';\n\n    // @ts-ignore\n    for (let i = 0; i < length; i++) {\n      password += all.charAt(Math.floor(Math.random() * all.length));\n    }\n\n    setPasswordGenerated(password);\n\n    if (isEditMode) {\n      if (passwordPicked) {\n        //TODO: This flow needs to be updated in future\n        /* This condition will only be applied at the first time the user\n         * click in edit password, the password picked will be set as\n         * a generated password, and then will be deleted from the state.\n         * */\n        // @ts-ignore\n        password = passwordPicked;\n      }\n    }\n    return yield put(setPassword({ password }));\n  } catch (exception) {\n    console.log({ exception });\n  }\n}\n\nexport const passwordGeneratorSaga = [takeLeading(generatePassword.type, getPasswordGeneratorFlow)];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { getPasswordsByUserId } from 'services/database';\n\nexport function* getPasswordsFlow(): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const passwords = yield call(getPasswordsByUserId, userId);\n\n    return yield put(setPasswords({ passwords }));\n  } catch (exception) {\n    console.log({ source: 'Exception from getPasswordsSaga', exception });\n  }\n}\n\nexport const getPasswordsSaga = [takeLeading(getPasswordsFromFirebase.type, getPasswordsFlow)];\n","import { call, put, takeLeading, select } from 'redux-saga/effects';\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\nimport {\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPasswordPicked,\n  setPassword,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { getSocialMedia } from 'services/database';\n\nfunction* getSocialMediaFlow(): Generator {\n  try {\n    const isCreateMode = yield select(selectIsCreateMode);\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const socialMediaList = yield call(getSocialMedia);\n    // @ts-ignore\n    const socialMediaSelected = socialMediaList[0].name;\n\n    yield put(setSocialMediaList({ socialMediaList }));\n\n    if (isCreateMode) {\n      yield put(setSocialMediaPicked({ socialMediaPicked: socialMediaSelected }));\n    } else if (isEditMode) {\n      //TODO: This flow needs to be updated in future\n      /* this flow is only to put the passwordPicked in the\n       * text input in Password Generator and then delete it\n       * passwordPicked state.\n       * */\n      yield put(setPassword({ password: passwordPicked }));\n      yield put(setPasswordPicked({ passwordPicked: '' }));\n    }\n  } catch (exception) {\n    console.log({ source: 'Exception from getSocialMediaSaga', exception });\n  }\n}\n\nexport const getSocialMediaSaga = [\n  takeLeading(getSocialMediaListFromFirebase.type, getSocialMediaFlow),\n];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { savePassword2Firebase, selectPassword } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { sendPassword2Firebase } from 'services/database';\n\n// @ts-ignore\nfunction* savePasswordFlow({ payload }): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const { socialMedia, password, description } = payload;\n\n    // @ts-ignore\n    return yield call(sendPassword2Firebase, userId, password, description, socialMedia);\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\n// @ts-ignore\nexport const savePasswordSaga = [takeLeading(savePassword2Firebase.type, savePasswordFlow)];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { deletePasswordFromFirebase } from 'reduxStore/slices/passwordSlice';\nimport { deletePasswordById } from 'services/database';\n\n// @ts-ignore\nfunction* deletePasswordFlow({ payload }): Generator {\n  try {\n    const { passwordId } = payload;\n\n    // @ts-ignore\n    return yield call(deletePasswordById, passwordId);\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\n// @ts-ignore\nexport const deletePasswordSaga = [\n  takeLeading(deletePasswordFromFirebase.type, deletePasswordFlow),\n];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport {\n  editPasswordFromFirebase,\n  selectPassword,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { updatePasswordByIdFromFirebase } from 'services/database';\n\nfunction* updatePasswordFlow({ payload }: any): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n    const { socialMedia, password, description } = payload;\n\n    return yield call(\n      // @ts-ignore\n      updatePasswordByIdFromFirebase,\n      passwordId,\n      password,\n      description,\n      socialMedia\n    );\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\nexport const updatePasswordSaga = [takeLeading(editPasswordFromFirebase.type, updatePasswordFlow)];\n","import { all } from 'redux-saga/effects';\nimport { passwordGeneratorSaga } from 'reduxStore/sagas/passwordGeneratorSaga';\nimport { getPasswordsSaga } from 'reduxStore/sagas/getPasswordsSaga';\nimport { getSocialMediaSaga } from 'reduxStore/sagas/getSocialMediaSaga';\nimport { savePasswordSaga } from 'reduxStore/sagas/savePasswordSaga';\nimport { deletePasswordSaga } from 'reduxStore/sagas/deletePasswordSaga';\nimport { updatePasswordSaga } from 'reduxStore/sagas/updatePasswordSaga';\n\nexport default function* IndexSagas() {\n  yield all([\n    ...passwordGeneratorSaga,\n    ...getPasswordsSaga,\n    ...getSocialMediaSaga,\n    ...savePasswordSaga,\n    ...deletePasswordSaga,\n    ...updatePasswordSaga,\n  ]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { userSlice } from './userSlice';\nimport { passwordSlice } from './passwordSlice';\nimport { configuratorSlice } from 'reduxStore/slices/configuratorSlice';\nimport { applicationStatusSlice } from 'reduxStore/slices/applicationStatusSlice';\nimport { socialMediaSlice } from 'reduxStore/slices/socialMediaSlice';\n\nconst createRootReducer = () =>\n  combineReducers({\n    user: userSlice.reducer,\n    password: passwordSlice.reducer,\n    configurator: configuratorSlice.reducer,\n    applicationStatus: applicationStatusSlice.reducer,\n    socialMedia: socialMediaSlice.reducer,\n  });\n\nexport default createRootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport IndexSagas from 'reduxStore/sagas/index';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from 'reduxStore/slices/rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = configureStore({\n  reducer: createRootReducer(),\n  middleware,\n});\n\nsagaMiddleware.run(IndexSagas);\n\nexport default store;\n","module.exports = __webpack_public_path__ + \"static/media/passvault-512px.fb8f2fd2.png\";","import React, { useEffect, useState } from 'react';\n\nimport { LogBox, Platform } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport { Provider } from 'react-redux';\nimport { OnBoarding } from 'screens/OnBoarding/onBoarding';\nimport { Login } from 'screens/Login/login';\nimport { SignUp } from 'screens/SignUp/signup';\nimport { PasswordGenerator } from 'screens/PasswordGenerator/passwordGenerator';\nimport { Drawer } from 'screens/Drawer/drawer';\n\nimport store from 'reduxStore/store/index';\nimport { appColors, devWarnings } from 'utils/constants';\nimport { CustomStatusbar } from 'components/CustomStatusbar/customStatusbar';\nimport { getOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\n\nif (process.env.ENV === 'dev') {\n  LogBox.ignoreLogs(devWarnings);\n}\n\ndeclare global {\n  interface Window {\n    store: any;\n  }\n}\n\nwindow.store = store;\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [onBoardingViewed, setOnBoardingViewed] = useState(false);\n\n  useEffect(() => {\n    getOnBoardingViewed()\n      .then((value) => {\n        if (value === 'false') {\n          setOnBoardingViewed(false);\n        } else {\n          setOnBoardingViewed(true);\n        }\n      })\n      .catch((err) => {\n        console.log('Error checking is first launch: ', { err });\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  if (onBoardingViewed === null) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n        <CustomStatusbar />\n        <NavigationContainer>\n          <Stack.Navigator>\n            {loading && (\n              <Stack.Screen\n                name='Loading'\n                component={LoadingIndicator}\n                options={{ headerShown: false }}\n              />\n            )}\n            {!onBoardingViewed && Platform.OS !== 'web' && (\n              <Stack.Screen\n                name='OnBoarding'\n                component={OnBoarding}\n                options={{ headerShown: false }}\n              />\n            )}\n            <Stack.Screen name='Login' component={Login} options={{ headerShown: false }} />\n            <Stack.Screen name='SignUp' component={SignUp} options={{ headerShown: false }} />\n            <Stack.Screen\n              name='PasswordGenerator'\n              component={PasswordGenerator}\n              options={{\n                headerStyle: {\n                  backgroundColor: '#3091e0',\n                },\n                headerTintColor: '#FFF',\n              }}\n            />\n            <Stack.Screen\n              name='Drawer'\n              component={Drawer}\n              options={{\n                headerShown: false,\n              }}\n            />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </Provider>\n    );\n  }\n};\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { View, Text, Platform, Image, TextInput, TouchableOpacity } from 'react-native';\n\nimport { PasswordToggle } from 'components/PasswordToggle/passwordToggle';\nimport { shadow } from 'screens/PasswordGenerator/styles';\n\nimport { auth, signUp } from 'services/firebase';\n\nimport styles from 'screens/Login/styles';\n\nexport const SignUp = (props: { navigation: any }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [hidePassword, setHidePassword] = useState(true);\n\n  const dispatch = useDispatch();\n  const { navigation } = props;\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleSignUp = () => {\n    signUp(username, password);\n    setUsername('');\n    setPassword('');\n  };\n\n  const handleHidePassword = () => {\n    setHidePassword(!hidePassword);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder='Username'\n          value={username}\n          style={[styles.input, shadow.container]}\n          onChangeText={(text) => setUsername(text)}\n        />\n        <TextInput\n          placeholder='Password'\n          value={password}\n          style={[styles.input, shadow.container]}\n          onChangeText={(text) => setPassword(text)}\n          secureTextEntry={hidePassword}\n        />\n        <PasswordToggle hidePassword={!hidePassword} action={handleHidePassword} />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={handleSignUp} style={styles.button}>\n          <Text style={styles.buttonText}>Sign up</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.linkContainer}>\n        <TouchableOpacity\n          onPress={() => {\n            // @ts-ignore\n            navigation.navigate('Login');\n          }}\n          style={styles.link}\n        >\n          <Text style={styles.linkText}>Go to Login if you have an account</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n","import React from 'react';\nimport { View, StatusBar } from 'react-native';\nimport { appColors } from 'utils/constants';\n\n/*\n * For more reference check this snack:\n *   https://snack.expo.dev/@ahmed_gaber/safe-area-context?platform=ios\n */\n\nexport const CustomStatusbar = () => {\n  return (\n    <StatusBar animated={true} barStyle={'light-content'} backgroundColor={appColors.primaryDark} />\n  );\n};\n\nexport default CustomStatusbar;\n","import React from 'react';\nimport { Image } from 'react-native';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nimport {\n  imageSourceRetriever,\n  socialMediaIcon,\n  socialMediaIconColor,\n} from 'utils/imageDataRetriever';\n\nexport const SocialMediaIcon = (props: { style: any; socialMedia: string }) => {\n  const { style, socialMedia } = props;\n\n  if (['amazon', 'discord', 'google', 'slack', 'okta', 'outlook', 'twitch'].includes(socialMedia)) {\n    const imageSource = imageSourceRetriever(socialMedia);\n\n    return <Image style={style} source={imageSource} />;\n  } else {\n    const getSocialMedia: any = socialMediaIcon(socialMedia);\n    const socialMediaColor = socialMediaIconColor(socialMedia);\n\n    return <AntDesign style={style} name={getSocialMedia} size={24} color={socialMediaColor} />;\n  }\n};\n","export const imageSourceRetriever = (socialMedia: string) => {\n  return socialMedia === 'amazon'\n    ? require('assets/amazon.png')\n    : socialMedia === 'discord'\n    ? require('assets/discord.png')\n    : socialMedia === 'google'\n    ? require('assets/google.png')\n    : socialMedia === 'slack'\n    ? require('assets/slack.png')\n    : socialMedia === 'okta'\n    ? require('assets/okta.png')\n    : socialMedia === 'outlook'\n    ? require('assets/outlook.png')\n    : socialMedia === 'twitch'\n    ? require('assets/twitch.png')\n    : '';\n};\n\nexport const socialMediaIcon = (socialMedia: string) => {\n  return socialMedia === 'facebook'\n    ? 'facebook-square'\n    : socialMedia === 'linkedin'\n    ? 'linkedin-square'\n    : socialMedia === 'other'\n    ? 'questioncircle'\n    : socialMedia;\n};\n\nexport const socialMediaIconColor = (socialMedia: string) => {\n  return socialMedia === 'facebook'\n    ? '#4267B2'\n    : socialMedia === 'twitter'\n    ? '#00ACEE'\n    : socialMedia === 'linkedin'\n    ? '#2867B2'\n    : 'black';\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const item = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFF',\n    padding: 10,\n    borderRadius: 5,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginLeft: 3,\n    marginRight: 3,\n    marginBottom: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n\n  socialIconAndPasswordInfo: { flex: 1, width: '50%', flexDirection: 'row', alignItems: 'center' },\n\n  passwordAndDescription: {\n    width: '81%',\n    paddingHorizontal: 5,\n    flexDirection: 'column',\n  },\n\n  descriptionTextLabel: { fontSize: 13, marginBottom: 5 },\n\n  passwordInput: {\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 15 : 14,\n  },\n});\n\nexport const icons = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n\n  socialMedia: { width: 24, height: 24, marginRight: 10 },\n\n  singleIcon: {\n    marginRight: 10,\n  },\n});\n","import React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  deletePasswordFromFirebase,\n  setIsEditMode,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\n\nimport { Clipboard, Platform, TouchableOpacity, View } from 'react-native';\nimport { Entypo, FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { icons } from 'components/PasswordItem/styles';\n\nimport { infoMessages, PasswordIconsI } from 'utils/constants';\nimport { customAlertMessage, showInfoMessage } from 'utils/infoMessages';\nimport { setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\nexport const PasswordIcons = (props: PasswordIconsI) => {\n  const dispatch = useDispatch();\n\n  const {\n    passwordId,\n    socialMedia,\n    description,\n    passwordGenerated,\n    passwordVisible,\n    setPasswordVisible,\n    setSnackbarVisible,\n    setSnackbarMessage,\n    navigation,\n  } = props;\n\n  const _socialMedia = socialMedia.charAt(0).toUpperCase() + socialMedia.slice(1);\n\n  const handleShowHidePassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.copied2Clipboard);\n    } else {\n      setSnackbarMessage(infoMessages.copied2Clipboard);\n      setSnackbarVisible(true);\n    }\n\n    Clipboard.setString(passwordGenerated);\n  };\n\n  return (\n    <View style={icons.container}>\n      <TouchableOpacity onPress={handleShowHidePassword}>\n        <Entypo\n          style={icons.singleIcon}\n          name={passwordVisible ? 'eye' : 'eye-with-line'}\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleCopyButton}>\n        <MaterialCommunityIcons\n          style={icons.singleIcon}\n          name='content-copy'\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={() => {\n          dispatch(setIsEditMode({ isEditMode: true }));\n          dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n          dispatch(setPasswordPicked({ passwordPicked: passwordGenerated }));\n          dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n          dispatch(setSocialMediaPicked({ socialMediaPicked: socialMedia }));\n          navigation.navigate('PasswordGenerator');\n        }}\n      >\n        <FontAwesome style={{ marginRight: 5 }} name='edit' size={18} color='grey' />\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={() => {\n          customAlertMessage(\n            'Delete password warning',\n            `Are you sure you want to delete this ${_socialMedia}'s password?`,\n            () => dispatch(deletePasswordFromFirebase({ passwordId }))\n          );\n        }}\n      >\n        <Ionicons name='trash' size={18} color='#DB4437' />\n      </TouchableOpacity>\n    </View>\n  );\n};\n","import React, { useState } from 'react';\nimport { View, Text, TextInput } from 'react-native';\n\nimport { SocialMediaIcon } from 'components/SocialMediaIcon/socialMediaIcon';\nimport { PasswordIcons } from 'components/PasswordIcons/passwordIcon';\n\nimport { icons, item } from './styles';\n\nimport { PasswordItemI } from 'utils/constants';\n\nconst PasswordItem = (props: PasswordItemI) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const {\n    passwordId,\n    passwordGenerated,\n    socialMedia,\n    description,\n    setSnackbarVisible,\n    setSnackbarMessage,\n    navigation,\n  } = props;\n\n  return (\n    <View style={item.container}>\n      <View style={item.socialIconAndPasswordInfo}>\n        <SocialMediaIcon style={icons.socialMedia} socialMedia={socialMedia} />\n        <View style={item.passwordAndDescription}>\n          <Text style={item.descriptionTextLabel}>{description}</Text>\n          <TextInput\n            style={item.passwordInput}\n            showSoftInputOnFocus={false}\n            caretHidden={true}\n            value={passwordGenerated}\n            secureTextEntry={!passwordVisible}\n          />\n        </View>\n      </View>\n      <PasswordIcons\n        passwordId={passwordId}\n        socialMedia={socialMedia}\n        description={description}\n        passwordGenerated={passwordGenerated}\n        passwordVisible={passwordVisible}\n        setPasswordVisible={setPasswordVisible}\n        setSnackbarVisible={setSnackbarVisible}\n        setSnackbarMessage={setSnackbarMessage}\n        navigation={navigation}\n      />\n    </View>\n  );\n};\n\nexport default PasswordItem;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#EBEAED',\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingBottom: 20,\n  },\n  items: {\n    margin: 20,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 20,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    width: 250,\n    backgroundColor: '#FFF',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    borderRadius: 60,\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {\n    position: 'absolute',\n    alignItems: 'center',\n    fontSize: 45,\n    color: '#C0C0C0',\n  },\n  navWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  navButtonContainer: {\n    justifyContent: 'center',\n    backgroundColor: '#E13333',\n    width: '78%',\n    padding: 6,\n    marginTop: 2,\n    marginHorizontal: 10,\n    borderRadius: 10,\n  },\n  navButton: {\n    alignItems: 'center',\n    fontSize: 13,\n    fontWeight: '700',\n    color: 'white',\n  },\n});\n\nexport default styles;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  getPasswordsFromFirebase,\n  selectPasswords,\n  setIsCreateMode,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nimport { View, ScrollView, BackHandler, Platform } from 'react-native';\nimport { FAB } from 'react-native-paper';\n\nimport PasswordItem from 'components/PasswordItem/passwordItem';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\n\nimport { passwordsCollection } from 'services/firebase';\n\nimport { appColors, PasswordI } from 'utils/constants';\nimport styles from './styles';\n\nexport const PasswordList = (props: { navigation: any }) => {\n  const [isSnackbarVisible, setSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [scrollIsClose2Bottom, setScrollIsClose2Bottom] = useState(false);\n\n  const { navigation } = props;\n  const dispatch = useDispatch();\n  const scrollViewRef = useRef();\n\n  const passwords = useSelector(selectPasswords);\n  const isRequesting = useSelector(selectRequest);\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', () => {\n      BackHandler.exitApp();\n      return true;\n    });\n    passwordsCollection.onSnapshot(() => {\n      dispatch(getPasswordsFromFirebase());\n    });\n  }, []);\n\n  const handleScrollIsClose2Bottom = (event: any) => {\n    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;\n    const paddingToBottom = Platform.OS === 'web' ? 7 : 10;\n    const result =\n      layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n\n    setScrollIsClose2Bottom(result);\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <ScrollView\n            // ref={scrollViewRef}\n            scrollEventThrottle={16}\n            onScroll={handleScrollIsClose2Bottom}\n            contentContainerStyle={{\n              flexGrow: 1,\n            }}\n            keyboardShouldPersistTaps='handled'\n          >\n            <View style={styles.items}>\n              {passwords.map((passwordItem: PasswordI) => {\n                console.log();\n                return (\n                  <PasswordItem\n                    key={passwordItem.id}\n                    passwordId={passwordItem.id}\n                    passwordGenerated={passwordItem.password_generated}\n                    socialMedia={passwordItem.social_media}\n                    description={passwordItem.description}\n                    setSnackbarVisible={setSnackbarVisible}\n                    setSnackbarMessage={setSnackbarMessage}\n                    navigation={navigation}\n                  />\n                );\n              })}\n            </View>\n          </ScrollView>\n          <FAB\n            style={{\n              position: 'absolute',\n              margin: 26,\n              right: 0,\n              bottom: isSnackbarVisible ? 40 : 0,\n              backgroundColor: appColors.primary,\n            }}\n            color={appColors.textTint}\n            visible={!scrollIsClose2Bottom}\n            icon='plus'\n            onPress={() => {\n              dispatch(setIsCreateMode({ isCreateMode: true }));\n              navigation.navigate('PasswordGenerator');\n            }}\n          />\n          <CustomSnackbar\n            message={snackbarMessage}\n            isSnackbarVisible={isSnackbarVisible}\n            setSnackbarVisible={setSnackbarVisible}\n          />\n        </View>\n      )}\n    </>\n  );\n};\n","import { StyleSheet, Platform } from 'react-native';\n\nexport const imageBackground = StyleSheet.create({\n  container: {\n    width: undefined,\n    padding: 16,\n    paddingTop: 48,\n  },\n  name: {\n    marginTop: 60,\n    paddingHorizontal: 5,\n    color: '#F0F0F0',\n    backgroundColor: 'rgba(48, 145, 224, 0.6)',\n    borderRadius: 5,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textShadowColor: '#000',\n    textShadowOffset: { width: 5, height: 5 },\n    textShadowRadius: 10,\n  },\n});\n\nexport const divider = StyleSheet.create({\n  divider: {\n    marginHorizontal: 20,\n    marginTop: 40,\n    marginBottom: 20,\n    backgroundColor: '#464646',\n  },\n});\n\nexport const signout = StyleSheet.create({\n  container: {\n    backgroundColor: '#F3BBBB',\n    borderRadius: 5,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    marginHorizontal: 10,\n    paddingVertical: 15,\n    paddingLeft: Platform.OS === 'web' ? 19 : 17,\n  },\n  icon: {\n    marginRight: 32,\n  },\n  text: {\n    color: '#F11D1D',\n  },\n});\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport { Image, View, Text, ScrollView, ImageBackground, TouchableOpacity } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Divider, Drawer } from 'react-native-paper';\nimport { FontAwesome, MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { selectUserEmail } from 'reduxStore/slices/userSlice';\nimport { unsetPasswords, setIsCreateMode } from 'reduxStore/slices/passwordSlice';\n\nimport { signOut } from 'services/firebase';\n\nimport { imageBackground, divider, signout } from './styles';\n\nexport const CustomSidebar = (props: any) => {\n  const userEmail = useSelector(selectUserEmail);\n  const name = userEmail ? userEmail.substring(0, userEmail.indexOf('@')) : '';\n  const userName = name.charAt(0).toUpperCase() + name.slice(1);\n  const { navigation } = props;\n  const dispatch = useDispatch();\n\n  const handleSignOut = () => {\n    signOut(dispatch(unsetPasswords()), navigation.replace('Login'));\n  };\n\n  return (\n    <SafeAreaProvider>\n      <ImageBackground\n        source={require('assets/img/sidebar-banner.png')}\n        style={imageBackground.container}\n      >\n        <Text style={imageBackground.name}>Hi there, {userName} !</Text>\n      </ImageBackground>\n      <Drawer.Section title='Pages'>\n        <ScrollView style={{ paddingTop: 10 }}>\n          <DrawerItemList {...props} />\n          <DrawerItem\n            label='Password Generator'\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons name='engine-outline' size={size * 0.75} color={color} />\n            )}\n            onPress={() => {\n              navigation.closeDrawer();\n              dispatch(setIsCreateMode({ isCreateMode: true }));\n              navigation.navigate('PasswordGenerator');\n            }}\n          />\n        </ScrollView>\n      </Drawer.Section>\n\n      <Drawer.Section>\n        <DrawerItem\n          icon={({ color, size }) => (\n            <MaterialIcons name='logout' size={size * 0.75} color={color} />\n          )}\n          label='Sign out'\n          onPress={handleSignOut}\n        />\n      </Drawer.Section>\n    </SafeAreaProvider>\n  );\n};\n","import React from 'react';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport { PasswordList } from 'screens/PasswordList/passwordList';\nimport { CustomSidebar } from 'components/CustomSidebar/customSidebar';\n\nimport { Feather, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { Dimensions } from 'react-native';\n\nconst CustomDrawer = createDrawerNavigator();\n\nexport const Drawer = (props: { navigation: any }) => {\n  return (\n    <CustomDrawer.Navigator\n      screenOptions={{\n        drawerStyle: {\n          width: Dimensions.get('window').width * 0.7,\n        },\n        drawerActiveBackgroundColor: '#9ac8fc',\n        drawerActiveTintColor: '#3091e0',\n        drawerItemStyle: {\n          borderRadius: 5,\n        },\n      }}\n      drawerContent={(props) => <CustomSidebar {...props} />}\n    >\n      <CustomDrawer.Screen\n        name='PasswordList'\n        component={PasswordList}\n        options={{\n          title: 'Password List',\n          headerStyle: {\n            backgroundColor: '#3091e0',\n          },\n          headerTintColor: '#FFF',\n          drawerIcon: ({ color, size }) => <Feather name='list' size={size * 0.75} color={color} />,\n        }}\n      />\n    </CustomDrawer.Navigator>\n  );\n};\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 10,\n  },\n\n  image: {\n    flex: 0.7,\n    borderRadius: 3,\n    justifyContent: 'center',\n  },\n\n  title: {\n    fontWeight: 'bold',\n    fontSize: 25,\n    marginBottom: 5,\n    color: appColors.primaryDark,\n    textAlign: 'center',\n  },\n\n  description: {\n    fontSize: 14,\n    color: 'grey',\n    textAlign: 'center',\n    paddingHorizontal: 64,\n  },\n});\n","import { Image, Text, useWindowDimensions, View } from 'react-native';\nimport React from 'react';\n\nimport { styles } from './styles';\n\nexport const OnBoardingItem = (props: {\n  item: { id: number; title: string; description: string; image: string };\n}) => {\n  const { item } = props;\n  const { title, description, image } = item;\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={[styles.container, { width }]}>\n      <Image\n        source={{\n          uri: image,\n        }}\n        style={[styles.image, { width, resizeMode: 'contain' }]}\n      />\n\n      <View style={{ flex: 0.3, marginTop: 15, paddingTop: 5, paddingHorizontal: 8 }}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.description}>{description}</Text>\n      </View>\n    </View>\n  );\n};\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    height: 15,\n    marginVertical: 5,\n    marginBottom: 10,\n  },\n\n  dot: {\n    height: 10,\n    borderRadius: 10,\n    backgroundColor: appColors.primaryDark,\n    marginHorizontal: 8,\n  },\n});\n","import React from 'react';\nimport { View, StyleSheet, Animated, useWindowDimensions } from 'react-native';\n\nimport { styles } from './styles';\n\nexport const Paginator = (props: { data: any; scrollX: any }) => {\n  const { data, scrollX } = props;\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={styles.container}>\n      {data.map((_: any, i: number) => {\n        const inputRange = [(i - 1) * width, i * width, (i + 1) * width];\n        const dotWidth = scrollX.interpolate({\n          inputRange,\n          outputRange: [10, 20, 10],\n          extrapolate: 'clamp',\n        });\n        const opacity = scrollX.interpolate({\n          inputRange,\n          outputRange: [0.3, 1, 0.3],\n          extrapolate: 'clamp',\n        });\n\n        return <Animated.View key={i} style={[styles.dot, { width: dotWidth, opacity }]} />;\n      })}\n    </View>\n  );\n};\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n\n  button: {\n    position: 'absolute',\n    backgroundColor: appColors.primary,\n    borderRadius: 100,\n    padding: 15,\n  },\n});\n","import React, { useEffect, useRef } from 'react';\nimport { View, TouchableOpacity, Animated } from 'react-native';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport { AntDesign } from '@expo/vector-icons';\nimport { appColors } from 'utils/constants';\n\nimport { styles } from './styles';\n\nexport const NextButton = (props: { scrollTo: any; percentage: any }) => {\n  const { percentage, scrollTo } = props;\n  const size = 80;\n  const strokeWidth = 2;\n  const center = size / 2;\n  const radius = size / 2 - strokeWidth / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  const progressAnimation = useRef(new Animated.Value(0)).current;\n  const progressRef = useRef(null);\n\n  const animation = (toValue: any) => {\n    return Animated.timing(progressAnimation, {\n      toValue,\n      duration: 250,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  useEffect(() => {\n    animation(percentage);\n  }, [percentage]);\n\n  useEffect(() => {\n    progressAnimation.addListener(\n      (value) => {\n        const strokeDashoffset = circumference - (circumference * value.value) / 100;\n\n        if (progressRef?.current) {\n          // @ts-ignore\n          progressRef.current.setNativeProps({\n            strokeDashoffset,\n          });\n        }\n      },\n      // @ts-ignore\n      [percentage]\n    );\n\n    return () => {\n      progressAnimation.removeAllListeners();\n    };\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Svg width={size} height={size}>\n        <G rotation='-90' origin={center}>\n          <Circle\n            stroke={appColors.maximumTintColorSlider}\n            cx={center}\n            cy={center}\n            r={radius}\n            strokeWidth={strokeWidth}\n          />\n          <Circle\n            ref={progressRef}\n            stroke={appColors.primaryDark}\n            cx={center}\n            cy={center}\n            r={radius}\n            strokeWidth={strokeWidth}\n            strokeDasharray={circumference}\n            // strokeDashoffset={circumference - (circumference * 100) / 100}\n          />\n        </G>\n      </Svg>\n      <TouchableOpacity style={styles.button} activeOpacity={0.6} onPress={scrollTo}>\n        <AntDesign name='arrowright' size={20} color='#FFF' />\n      </TouchableOpacity>\n    </View>\n  );\n};\n","import { FIREBASE_STORAGE_BUCKET, FIREBASE_STORAGE_URL, imagesTokens } from 'utils/constants';\n\nconst {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN,\n} = imagesTokens;\nconst FIREBASE_STORAGE_FINAL_URL = `${FIREBASE_STORAGE_URL}/v0/b/${FIREBASE_STORAGE_BUCKET}/o`;\n\nexport const slides = [\n  {\n    id: 1,\n    title: 'Welcome to Passvault!',\n    description: 'The main goal of this app is to generate secure and configurable passwords',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/welcome.png?alt=media&token=${FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN}`,\n  },\n  {\n    id: 2,\n    title: 'Password Generator',\n    description: 'Configure and generate a password is very simple!',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password_generator.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN}`,\n  },\n  {\n    id: 3,\n    title: 'Storing Generated Passwords',\n    description: 'Optionally you can enroll up and store many generated passwords',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/sign-up.png?alt=media&token=${FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 4,\n    title: 'Free to use',\n    description:\n      \"If you don't feel comfortable creating an account, you can still generate passwords but those wont't be stored\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/free-to-use.png?alt=media&token=${FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN}`,\n  },\n  {\n    id: 5,\n    title: 'Check your Generated Passwords listed',\n    description:\n      \"If you're an authenticated user all your passwords will be listed (latest listed first), and navigate with a sidebar menu\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/passwords-listed.png?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN}`,\n  },\n  {\n    id: 6,\n    title: 'Update your existing passwords',\n    description:\n      'In order to avoid to create one entries, you can update an existing password and save the changes',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password-edit.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN}`,\n  },\n  {\n    id: 7,\n    title: \"Let's go with it!\",\n    description: \"Now we're ready to start use Passvault!\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/onboarding-completed.png?alt=media&token=${FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN}`,\n  },\n];\n","import React, { useRef, useState } from 'react';\nimport { View, StyleSheet, FlatList, Animated } from 'react-native';\nimport { OnBoardingItem } from 'components/OnBoarding/OnBoardingItem/onBoardingItem';\nimport { Paginator } from 'components/OnBoarding/Paginator/paginator';\nimport { NextButton } from 'components/OnBoarding/NextButton/nextButton';\nimport { slides } from './slides';\nimport { setOnBoardingViewed } from 'utils/localStorageFuncs';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport const OnBoarding = (props: { navigation: any }) => {\n  const { navigation } = props;\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const scrollX = useRef(new Animated.Value(0)).current;\n  const slidesRef = useRef(null);\n\n  const viewableItemsChanged = useRef((item: { viewableItems: any }) => {\n    const { viewableItems } = item;\n    setCurrentIndex(viewableItems[0].index);\n  }).current;\n\n  const viewConfig = useRef({ viewAreaCoveragePercentThreshold: 50 }).current;\n\n  const scrollTo = () => {\n    if (currentIndex < slides.length - 1) {\n      // @ts-ignore\n      slidesRef.current.scrollToIndex({ index: currentIndex + 1 });\n    } else {\n      setOnBoardingViewed('true');\n      navigation.replace('Login');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={{ flex: 1 }}>\n        <FlatList\n          ref={slidesRef}\n          data={slides}\n          renderItem={({ item }) => <OnBoardingItem item={item} />}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          pagingEnabled\n          bounces={false}\n          keyExtractor={(item) => `${item.id}`}\n          onScroll={Animated.event([{ nativeEvent: { contentOffset: { x: scrollX } } }], {\n            useNativeDriver: false,\n          })}\n          onViewableItemsChanged={viewableItemsChanged}\n          viewabilityConfig={viewConfig}\n        />\n      </View>\n      <Paginator data={slides} scrollX={scrollX} />\n      <NextButton scrollTo={scrollTo} percentage={(currentIndex + 1) * (100 / slides.length)} />\n    </View>\n  );\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nconst borderWidth = 4;\n\nexport const styles = StyleSheet.create({\n  sliderContainer: {\n    width: Platform.OS === 'web' ? '85%' : '80%',\n    paddingVertical: 10,\n    paddingLeft: 10,\n    flexDirection: 'column',\n  },\n});\n\nexport const trackMarkStyles = StyleSheet.create({\n  activeMark: {\n    borderColor: 'red',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n  inactiveMark: {\n    borderColor: 'grey',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { generatePassword, selectPasswordPicked, setLength } from 'reduxStore/slices/passwordSlice';\n\nimport { View, Text } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport { trackMarkStyles, styles } from './styles';\nimport { appColors } from 'utils/constants';\n\n// Reference: https://youtu.be/MwSudWtT7ps?t=271\n\nconst SliderContainer = (props: { defaultValue: number; handleGeneratePassword: any }) => {\n  const { defaultValue, handleGeneratePassword } = props;\n  const [value, setValue] = useState(defaultValue);\n  const passwordPicked = useSelector(selectPasswordPicked);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isNaN(value) && !passwordPicked) {\n      //TODO: This flow needs to be updated in future\n      /* If there was a password picked for the edit flow\n       * a new password won't be generated.\n       * */\n      dispatch(setLength({ length: value }));\n      dispatch(generatePassword());\n    }\n  }, [value]);\n\n  return (\n    <View style={styles.sliderContainer}>\n      <Slider\n        step={1}\n        value={defaultValue}\n        minimumValue={6}\n        maximumValue={50}\n        minimumTrackTintColor={appColors.primary}\n        maximumTrackTintColor={appColors.maximumTintColorSlider}\n        thumbTintColor={appColors.primary}\n        onValueChange={setValue}\n      />\n    </View>\n  );\n};\n\nexport default SliderContainer;\n","import {\n  generatePassword,\n  setIsCreateMode,\n  setIsEditMode,\n  resetPasswordGeneratorState,\n} from 'reduxStore/slices/passwordSlice';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { infoMessages } from 'utils/constants';\n\n/* Password Generator utils */\nexport const resetConfigurationState = (dispatch: any) => {\n  dispatch(resetPasswordGeneratorState());\n};\n\nexport const handleGeneratePassword = (passwordFromState: string, dispatch: any) => {\n  if (!passwordFromState) {\n    dispatch(generatePassword());\n  }\n};\n\nexport const showAuthenticatedMessage = (userId: string, isCreatedMode: boolean) => {\n  if (userId && isCreatedMode) {\n    showInfoMessage(infoMessages.about2CreatePassword);\n  }\n};\n\n/* Password Generator Configurator utils */\nexport const handleLeftCheckboxes = (\n  dispatch: any,\n  setCheck1: any,\n  setCheck2: any,\n  selector1: string,\n  selector2: string,\n  value: boolean,\n  handleOtherCheckboxes: any\n) => {\n  const payloadString1 = `{ \"${selector1}\": ${value} }`;\n  const payloadString2 = `{ \"${selector2}\": ${!value} }`;\n  const payload1 = JSON.parse(payloadString1);\n  const payload2 = JSON.parse(payloadString2);\n\n  dispatch(setCheck1(payload1));\n  dispatch(setCheck2(payload2));\n\n  handleOtherCheckboxes();\n};\n\nexport const handleRightCheckboxes = (\n  value: boolean,\n  checkbox1: boolean,\n  checkbox2: boolean,\n  checkbox3: boolean,\n  dispatch: any,\n  configuratorAction: any,\n  payload: object\n) => {\n  if (checkbox1 || checkbox2 || checkbox3) {\n    dispatch(configuratorAction(payload));\n  }\n};\n\nexport const updateConfiguratorStateAndGeneratePassword = (\n  dispatch: any,\n  generatePassword: any\n) => {\n  dispatch(generatePassword());\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Text, View, ToastAndroid, Platform /*, TouchableOpacity*/ } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { checkBox } from 'screens/PasswordGenerator/styles';\nimport {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n  selectIsEasy2Read,\n  selectIsAllChar,\n  selectIsUpperCase,\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n} from 'reduxStore/slices/configuratorSlice';\nimport { generatePassword } from 'reduxStore/slices/passwordSlice';\n\nimport {\n  handleLeftCheckboxes,\n  handleRightCheckboxes,\n  updateConfiguratorStateAndGeneratePassword,\n} from 'utils/configuratorUtils';\nimport { appColors } from 'utils/constants';\n\n/* Reference for checkbox usage: [\n  https://docs.expo.dev/versions/latest/sdk/checkbox/,\n  https://snack.expo.dev/\n]\n */\n\nexport const PasswordConfigurator = () => {\n  const dispatch = useDispatch();\n\n  const isEasy2Read = useSelector(selectIsEasy2Read);\n  const isAllChar = useSelector(selectIsAllChar);\n\n  const isUpperCase = useSelector(selectIsUpperCase);\n  const isLowerCase = useSelector(selectIsLowerCase);\n  const isNumbers = useSelector(selectIsNumbers);\n  const isSymbols = useSelector(selectIsSymbols);\n\n  const handleRightCheckboxesGivenLeftCheckboxes = () => {\n    dispatch(setIsUpperCaseAndIsLowerCase({ isUpperCase: true, isLowerCase: true }));\n\n    if (!isEasy2Read || isAllChar) {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: false, isSymbols: false }));\n    } else {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: true, isSymbols: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  return (\n    <View style={checkBox.container}>\n      {/* Left checkboxes */}\n      <View style={{ flexDirection: 'column', marginLeft: -20 }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Easy to read'}\n            isChecked={isEasy2Read}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsEasy2Read,\n                setIsAllChar,\n                'isEasy2Read',\n                'isAllChar',\n                !isEasy2Read,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'All characters'}\n            isChecked={isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsAllChar,\n                setIsEasy2Read,\n                'isAllChar',\n                'isEasy2Read',\n                !isAllChar,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n      </View>\n\n      {/* Right checkboxes */}\n      <View style={{ flexDirection: 'column' }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Uppercase'}\n            isChecked={isUpperCase}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isUpperCase,\n                isLowerCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsUpperCase,\n                { isUpperCase: !isUpperCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Lowercase'}\n            isChecked={isLowerCase}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isLowerCase,\n                isUpperCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsLowerCase,\n                { isLowerCase: !isLowerCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Numbers'}\n            isChecked={isNumbers}\n            disabled={!isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isNumbers,\n                isUpperCase,\n                isLowerCase,\n                isSymbols,\n                dispatch,\n                setIsNumbers,\n                {\n                  isNumbers: !isNumbers,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Symbols'}\n            isChecked={isSymbols}\n            disabled={!isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isSymbols,\n                isUpperCase,\n                isLowerCase,\n                isNumbers,\n                dispatch,\n                setIsSymbols,\n                {\n                  isSymbols: !isSymbols,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const createEditPassword = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n\n  userInputContainer: {\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: 10,\n    marginBottom: 5,\n  },\n\n  textInput: {\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n    marginBottom: 5,\n  },\n\n  dropdown: {\n    borderRadius: 10,\n    backgroundColor: 'white',\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n  },\n\n  textLabel: { fontSize: 17, marginRight: 5, marginBottom: 5 },\n\n  descriptionLengthIndicator: {\n    fontSize: 12,\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  savePassword2Firebase,\n  editPasswordFromFirebase,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport {\n  getSocialMediaListFromFirebase,\n  selectSocialMediaList,\n  selectSocialMediaPicked,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\n\nimport { Picker, Text, TextInput, View } from 'react-native';\nimport { Entypo } from '@expo/vector-icons';\n\nimport { cardView, shadow } from 'screens/PasswordGenerator/styles';\nimport { createEditPassword } from './styles';\nimport { appColors, defaultEmptyPasswordDescription } from 'utils/constants';\nimport { socialMediaCollection } from 'services/firebase';\nimport { customAlertMessage } from 'utils/infoMessages';\n\nexport const CreateEditPasswordConfigurator = (props: { navigation: any }) => {\n  const dispatch = useDispatch();\n  const passwordDescriptionMaxLen = 60;\n  const [description, setDescription] = useState('');\n  const socialMediaPicked = useSelector(selectSocialMediaPicked);\n  const passwordDescriptionPicked = useSelector(selectPasswordDescriptionPicked);\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const password = useSelector(selectPassword);\n\n  const { navigation } = props;\n  const createEditButtonLabel = isCreateMode ? 'Save' : 'Edit';\n\n  useEffect(() => {\n    if (isCreateMode || isEditMode) {\n      if (isEditMode) {\n        setDescription(\n          passwordDescriptionPicked !== defaultEmptyPasswordDescription\n            ? passwordDescriptionPicked\n            : ''\n        );\n      }\n\n      socialMediaCollection.onSnapshot(() => {\n        dispatch(getSocialMediaListFromFirebase());\n      });\n    }\n  }, []);\n\n  return (\n    <View style={[cardView.container, shadow.container, createEditPassword.container]}>\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Social media:</Text>\n        <Picker\n          // ref={pickerRef}\n          style={createEditPassword.dropdown}\n          selectedValue={socialMediaPicked}\n          onValueChange={(itemValue, itemIndex) => {\n            dispatch(setSocialMediaPicked({ socialMediaPicked: itemValue }));\n          }}\n        >\n          {socialMediaList.map((item: { id: string; name: string }) => {\n            const label = item.name.charAt(0).toUpperCase() + item.name.slice(1);\n            return <Picker.Item key={item.id} label={label} value={item.name} />;\n          })}\n        </Picker>\n      </View>\n\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Description:</Text>\n        <TextInput\n          style={createEditPassword.textInput}\n          placeholder={'Type in here...'}\n          maxLength={passwordDescriptionMaxLen}\n          value={description}\n          onChangeText={(text: string) => setDescription(text)}\n        />\n        <Text style={createEditPassword.descriptionLengthIndicator}>\n          {description.length}/{passwordDescriptionMaxLen}\n        </Text>\n      </View>\n\n      <Entypo.Button\n        style={createEditPassword.button}\n        name={isCreateMode ? 'save' : 'edit'}\n        size={24}\n        color={appColors.textTint}\n        backgroundColor={appColors.primary}\n        onPress={() => {\n          if (socialMediaPicked !== '') {\n            const data = {\n              password,\n              description,\n              socialMedia: socialMediaPicked,\n            };\n            if (isEditMode) {\n              customAlertMessage(\n                'Edit password warning !',\n                \"If you update this password, you won't be able to recover it.\",\n                () => {\n                  dispatch(editPasswordFromFirebase(data));\n                  navigation.navigate('PasswordList');\n                }\n              );\n            } else {\n              dispatch(savePassword2Firebase(data));\n              navigation.navigate('PasswordList');\n            }\n          }\n        }}\n      >\n        {createEditButtonLabel}\n      </Entypo.Button>\n    </View>\n  );\n};\n","import React, { useEffect, useState, useLayoutEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  generatePassword,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordLength,\n  selectPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\n\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Clipboard,\n  BackHandler,\n  Platform,\n  ScrollView,\n  Keyboard,\n} from 'react-native';\nimport { Divider } from 'react-native-paper';\nimport Checkbox from 'expo-checkbox';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport SliderContainer from 'components/SliderContainer/sliderContainer';\nimport { PasswordConfigurator } from 'components/PasswordConfigurator/passwordConfigurator';\nimport { CreateEditPasswordConfigurator } from 'components/CreateEditPasswordConfigurator/createEditPasswordConfigurator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\n\nimport { cardView, shadow, screen, passwordStyle, configuration, checkBox } from './styles';\nimport { getPasswordGenerated } from 'utils/localStorageFuncs';\nimport { infoMessages } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport {\n  resetConfigurationState,\n  handleGeneratePassword,\n  showAuthenticatedMessage,\n} from 'utils/configuratorUtils';\n\nexport const PasswordGenerator = (props: { navigation: any }) => {\n  const { navigation } = props;\n  const scrollViewRef = useRef();\n  const [isSnackbarVisible, setSnackbarVisible] = useState(false);\n  const [isKeyboardVisible, setKeyboardVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  const passwordFromState = useSelector(selectPassword);\n  const passwordLength = useSelector(selectPasswordLength);\n\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordPicked = useSelector(selectPasswordPicked);\n\n  const userId = useSelector(selectUserId);\n\n  const screenTitle = isEditMode\n    ? 'Password Edit'\n    : `Password Generator ${!userId ? '(Only)' : ''}`;\n\n  const dispatch = useDispatch();\n\n  const _handleGeneratePassword = () => {\n    handleGeneratePassword(passwordFromState, dispatch);\n  };\n\n  const handleCopyButton = () => {\n    getPasswordGenerated()\n      .then((password: any | string) => {\n        const password2Clipboard = isEditMode ? passwordFromState : password.password;\n\n        if (Platform.OS === 'android') {\n          showInfoMessage(infoMessages.copied2Clipboard);\n        } else {\n          setSnackbarMessage(infoMessages.copied2Clipboard);\n          setSnackbarVisible(true);\n        }\n\n        Clipboard.setString(password2Clipboard);\n      })\n      .catch((err: any) => {\n        console.log({ err });\n        Clipboard.setString('');\n      });\n  };\n\n  const handleRefreshButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.newPassword);\n    } else {\n      setSnackbarMessage(infoMessages.newPassword);\n      setSnackbarVisible(true);\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const handleBackAction = () => {\n    resetConfigurationState(dispatch);\n    navigation.navigate(userId ? 'PasswordList' : 'Login');\n    return true;\n  };\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n\n    if (Platform.OS === 'android') {\n      showAuthenticatedMessage(userId, isCreateMode);\n    } else {\n      setSnackbarMessage(infoMessages.about2CreatePassword);\n      setSnackbarVisible(true);\n    }\n\n    const keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', () => {\n      setKeyboardVisible(true);\n    });\n    const keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', () => {\n      setKeyboardVisible(false);\n    });\n\n    return () => {\n      resetConfigurationState(dispatch);\n      keyboardDidHideListener.remove();\n      keyboardDidShowListener.remove();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isKeyboardVisible) {\n      // @ts-ignore\n      scrollViewRef.current.scrollToEnd({ animating: true });\n    }\n  }, [isKeyboardVisible]);\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: screenTitle,\n    });\n  });\n\n  return (\n    <>\n      {/* @ts-ignore */}\n      <ScrollView ref={scrollViewRef}>\n        <View style={screen.container}>\n          <View style={[cardView.container, passwordStyle.container, shadow.container]}>\n            <View style={passwordStyle.inputContainer}>\n              <TextInput\n                showSoftInputOnFocus={false}\n                caretHidden={true}\n                style={passwordStyle.input}\n                value={passwordFromState}\n              />\n              <View style={passwordStyle.icons}>\n                <TouchableOpacity onPress={handleCopyButton}>\n                  <MaterialCommunityIcons\n                    style={{ marginRight: 10 }}\n                    name='content-copy'\n                    size={24}\n                    color='grey'\n                  />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={handleRefreshButton}>\n                  <Ionicons name='reload' size={24} color='grey' />\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n\n          <View style={[cardView.container, configuration.container, shadow.container]}>\n            <View style={configuration.textContainer}>\n              <Text style={configuration.textHeader}>Configure your password</Text>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <View style={configuration.passwordLengthContainer}>\n              <Text style={{ fontSize: 17 }}>Password length</Text>\n              <View style={configuration.lengthSliderContainer}>\n                <TextInput\n                  showSoftInputOnFocus={false}\n                  caretHidden={true}\n                  style={configuration.inputLength}\n                  keyboardType={'numeric'}\n                  value={passwordFromState.length.toString()}\n                />\n                <SliderContainer\n                  defaultValue={isEditMode ? passwordFromState.length : 10}\n                  handleGeneratePassword={_handleGeneratePassword}\n                />\n              </View>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <PasswordConfigurator />\n          </View>\n\n          {(isCreateMode || isEditMode) && (\n            <CreateEditPasswordConfigurator navigation={navigation} />\n          )}\n        </View>\n      </ScrollView>\n\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={isSnackbarVisible}\n        setSnackbarVisible={setSnackbarVisible}\n      />\n    </>\n  );\n};\n","import { Dimensions, StyleSheet } from 'react-native';\n\nexport const popoverStyles = StyleSheet.create({\n  content: {\n    width: Dimensions.get('screen').width * 0.45,\n    padding: 16,\n    backgroundColor: 'white',\n    borderRadius: 8,\n  },\n  arrow: {\n    borderTopColor: 'white',\n  },\n  background: {\n    backgroundColor: 'rgba(66,66,66,0.5)',\n  },\n});\n","import React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport { Popover } from 'react-native-modal-popover';\nimport { Feather } from '@expo/vector-icons';\n\nimport { popoverMessage } from 'utils/constants';\nimport { popoverStyles } from './styles';\n\nexport const CustomPopover = (props: {\n  popoverVisible: boolean;\n  closePopover: any;\n  popoverAnchorRect: any;\n  touchableRef: any;\n  onPress: any;\n}) => {\n  const { popoverVisible, closePopover, popoverAnchorRect, touchableRef, onPress } = props;\n  return (\n    <>\n      <TouchableOpacity ref={touchableRef} onPress={onPress}>\n        <Feather name='info' size={20} color='black' />\n      </TouchableOpacity>\n      <Popover\n        contentStyle={popoverStyles.content}\n        arrowStyle={popoverStyles.arrow}\n        backgroundStyle={popoverStyles.background}\n        visible={popoverVisible}\n        onClose={closePopover}\n        fromRect={popoverAnchorRect}\n        placement='top'\n        supportedOrientations={['portrait', 'landscape']}\n      >\n        <Text>{popoverMessage}</Text>\n      </Popover>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectRequest,\n  setIsRequest,\n  unsetIsRequest,\n} from 'reduxStore/slices/applicationStatusSlice';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { Image, Text, TextInput, Platform, View, TouchableOpacity } from 'react-native';\nimport { usePopover } from 'react-native-modal-popover';\n\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { PasswordToggle } from 'components/PasswordToggle/passwordToggle';\nimport { CustomPopover } from 'components/Popover/popover';\nimport { shadow } from 'screens/PasswordGenerator/styles';\n\nimport { setUserData2LS } from 'utils/localStorageFuncs';\nimport { auth, signIn } from 'services/firebase';\n\nimport styles from './styles';\n\n// Reference for popover: https://github.com/eveningkid/react-native-popable\n\nexport const Login = (props: { navigation: any }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [hidePassword, setHidePassword] = useState(true);\n\n  const dispatch = useDispatch();\n  const isRequesting = useSelector(selectRequest);\n  const { navigation } = props;\n\n  const { openPopover, closePopover, popoverVisible, touchableRef, popoverAnchorRect } =\n    usePopover();\n\n  useEffect(() => {\n    dispatch(setIsRequest({ isRequest: true }));\n  }, []);\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          dispatch(unsetIsRequest());\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n          dispatch(unsetIsRequest());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleLogin = () => {\n    signIn(username, password);\n  };\n\n  const handleHidePassword = () => {\n    setHidePassword(!hidePassword);\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n          <View style={styles.inputContainer}>\n            <TextInput\n              placeholder='Username'\n              value={username}\n              style={[styles.input, shadow.container]}\n              onChangeText={(text: string) => setUsername(text)}\n            />\n            <TextInput\n              placeholder='Password'\n              value={password}\n              style={[styles.input, shadow.container]}\n              onChangeText={(text: string) => setPassword(text)}\n              secureTextEntry={hidePassword}\n            />\n            <PasswordToggle hidePassword={!hidePassword} action={handleHidePassword} />\n          </View>\n\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity onPress={handleLogin} style={styles.button}>\n              <Text style={styles.buttonText}>Login</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('SignUp');\n              }}\n              style={[styles.button, styles.buttonOutLine]}\n            >\n              <Text style={styles.buttonOutLineText}>Sign up</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.linkContainer}>\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('PasswordGenerator');\n              }}\n              style={styles.link}\n            >\n              <Text style={styles.linkText}>Use it without an account </Text>\n            </TouchableOpacity>\n\n            <CustomPopover\n              popoverVisible={popoverVisible}\n              closePopover={closePopover}\n              popoverAnchorRect={popoverAnchorRect}\n              touchableRef={touchableRef}\n              onPress={openPopover}\n            />\n          </View>\n        </View>\n      )}\n    </>\n  );\n};\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const screen = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    marginBottom: 5,\n  },\n});\n\nexport const shadow = StyleSheet.create({\n  container: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n});\n\nexport const cardView = StyleSheet.create({\n  container: {\n    width: '90%',\n    padding: 10,\n    backgroundColor: '#FFF',\n    borderRadius: 5,\n    marginBottom: 15,\n    justifyContent: 'center',\n  },\n});\n\nexport const passwordStyle = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  inputContainer: {\n    margin: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  input: {\n    width: Platform.OS === 'web' ? '85%' : '75%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    borderRadius: 10,\n    textAlign: 'left',\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 16 : 20,\n  },\n  icons: {\n    marginLeft: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n});\n\nexport const configuration = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  textContainer: {\n    margin: 10,\n    justifyContent: 'flex-start',\n  },\n  textHeader: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  passwordLengthContainer: {\n    padding: 10,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n  inputLength: {\n    width: Platform.OS === 'web' ? '15%' : '20%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 7,\n    paddingVertical: 10,\n    marginRight: 5,\n    borderRadius: 10,\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  lengthSliderContainer: {\n    padding: 10,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n});\n\nexport const checkBox = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around',\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/amazon.4c033704.png\";","module.exports = __webpack_public_path__ + \"static/media/discord.17c0e41c.png\";","module.exports = __webpack_public_path__ + \"static/media/google.647ac848.png\";","module.exports = __webpack_public_path__ + \"static/media/slack.d9f7a674.png\";","module.exports = __webpack_public_path__ + \"static/media/okta.c20fa4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/outlook.217ab4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch.8e8dc9e1.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-banner.8c7d09ca.png\";","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  inputContainer: { width: '80%' },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginTop: 10,\n  },\n  buttonContainer: {\n    width: '60%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  button: {\n    backgroundColor: appColors.primary,\n    width: '70%',\n    padding: 10,\n    borderRadius: 10,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  buttonOutLine: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: appColors.primary,\n    borderWidth: 2,\n  },\n  buttonOutLineText: {\n    color: '#4F4F4F',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  loginImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n  tooltipImage: {},\n  linkContainer: {\n    width: '60%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  link: {\n    marginRight: 3,\n  },\n  linkText: {\n    fontSize: 15,\n  },\n});\n\nexport default styles;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState: {\n  isEasy2Read: boolean;\n  isAllChar: boolean;\n  isUpperCase: boolean;\n  isLowerCase: boolean;\n  isNumbers: boolean;\n  isSymbols: boolean;\n} = {\n  isEasy2Read: true,\n  isAllChar: false,\n  isUpperCase: true,\n  isLowerCase: true,\n  isNumbers: false,\n  isSymbols: false,\n};\n\nconst resetPasswordConfiguratorState = (state: any) => ({\n  ...state,\n  ...initialState,\n});\n\nexport const configuratorSlice = createSlice({\n  name: 'configurator',\n  initialState,\n  reducers: {\n    setIsEasy2Read: (state, { payload }) => ({\n      ...state,\n      isEasy2Read: payload.isEasy2Read,\n    }),\n    setIsAllChar: (state, { payload }) => ({\n      ...state,\n      isAllChar: payload.isAllChar,\n    }),\n    setIsUpperCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n    }),\n    setIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbers: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n    }),\n    setIsSymbols: (state, { payload }) => ({\n      ...state,\n      isSymbols: payload.isSymbols,\n    }),\n    setIsUpperCaseAndIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbersAndIsSymbols: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n      isSymbols: payload.isSymbols,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetPasswordGeneratorState, (state, { payload }) =>\n      resetPasswordConfiguratorState(state)\n    );\n  },\n});\n\nexport const {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n} = configuratorSlice.actions;\n\nexport const selectIsEasy2Read = (state: { configurator: { isEasy2Read: boolean } }) =>\n  state.configurator.isEasy2Read;\nexport const selectIsAllChar = (state: { configurator: { isAllChar: boolean } }) =>\n  state.configurator.isAllChar;\nexport const selectIsUpperCase = (state: { configurator: { isUpperCase: boolean } }) =>\n  state.configurator.isUpperCase;\nexport const selectIsLowerCase = (state: { configurator: { isLowerCase: boolean } }) =>\n  state.configurator.isLowerCase;\nexport const selectIsNumbers = (state: { configurator: { isNumbers: boolean } }) =>\n  state.configurator.isNumbers;\nexport const selectIsSymbols = (state: { configurator: { isSymbols: boolean } }) =>\n  state.configurator.isSymbols;\n","// Import the functions you need from the SDKs you need\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { clearUserDataFromLS, setUserData2LS } from 'utils/localStorageFuncs';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n};\n\nconst appLength: number = firebase.apps.length;\n\nconst app = appLength === 0 ? firebase.initializeApp(firebaseConfig) : firebase.app();\nconst database = firebase.firestore(app);\n\nexport const auth = firebase.auth();\nexport const passwordsCollection = database.collection('passwords');\nexport const socialMediaCollection = database.collection('social_media');\n\nexport const signIn = (username: string, password: string) => {\n  auth\n    .signInWithEmailAndPassword(`${username}@example.com`, password)\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      setUserData2LS(user?.uid, user?.email);\n    })\n    .catch((error) => {\n      alert(error.message);\n      console.log({ exception: error.message });\n    });\n};\n\nexport const signOut = (reduxAction: any, navigation: any) => {\n  auth\n    .signOut()\n    .then(() => {\n      clearUserDataFromLS();\n      reduxAction();\n      navigation.replace('Login');\n    })\n    .catch((error) => {\n      console.log({ exception: error.message });\n    });\n};\n\nexport const signUp = (username: string, password: string) => {\n  auth\n    .createUserWithEmailAndPassword(`${username}@example.com`, password)\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n      console.log({ user });\n    })\n    .catch((error) => {\n      alert(error.message);\n      console.log({ exception: error.message });\n    });\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { getUserDataFromLS } from 'utils/localStorageFuncs';\n\nexport const initialState = {\n  id: '',\n  email: '',\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUserData: (state, { payload }) => ({\n      ...state,\n      id: payload.id,\n      email: payload.email,\n    }),\n    unsetUserData: () => ({\n      ...initialState,\n    }),\n  },\n});\n\nexport const { setUserData, unsetUserData } = userSlice.actions;\n\nexport const selectUserId = (state: { user: { id: string } }) => state.user.id;\nexport const selectUserEmail = (state: { user: { email: string } }) => state.user.email;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  socialMediaPicked: string;\n  socialMediaList: any;\n} = {\n  socialMediaPicked: '',\n  socialMediaList: [],\n};\n\nexport const socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState,\n  reducers: {\n    setSocialMediaPicked: (state, { payload }) => ({\n      ...state,\n      socialMediaPicked: payload.socialMediaPicked,\n    }),\n    setSocialMediaList: (state, { payload }) => ({\n      ...state,\n      socialMediaList: payload.socialMediaList,\n    }),\n    getSocialMediaListFromFirebase: () => {},\n  },\n});\n\nexport const { setSocialMediaPicked, setSocialMediaList, getSocialMediaListFromFirebase } =\n  socialMediaSlice.actions;\n\nexport const selectSocialMediaPicked = (state: { socialMedia: { socialMediaPicked: any } }) =>\n  state.socialMedia.socialMediaPicked;\nexport const selectSocialMediaList = (state: { socialMedia: { socialMediaList: any } }) =>\n  state.socialMedia.socialMediaList;\n"],"sourceRoot":""}