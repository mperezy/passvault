{"version":3,"sources":["src/utils/localStorageFuncs.ts","src/services/database.ts","src/utils/infoMessages.ts","src/components/LoadingIndicator/loadingIndicator.tsx","src/redux/slices/passwordSlice.ts","src/utils/constants.ts","src/components/CustomSnackbar/customSnackbar.tsx","src/redux/sagas/passwordGeneratorSaga.ts","src/redux/sagas/getPasswordsSaga.ts","src/redux/sagas/getSocialMediaSaga.ts","src/redux/sagas/savePasswordSaga.ts","src/redux/sagas/deletePasswordSaga.ts","src/redux/sagas/updatePasswordSaga.ts","src/redux/sagas/index.ts","src/redux/slices/rootReducer.ts","src/redux/store/index.ts","assets/main/passvault-512px.png","App.tsx","src/screens/SignUp/signup.tsx","src/components/CustomStatusbar/customStatusbar.tsx","src/components/SocialMediaIcon/socialMediaIcon.tsx","src/utils/imageDataRetriever.ts","src/components/PasswordItem/styles.ts","src/components/PasswordIcons/passwordIcon.tsx","src/components/PasswordItem/passwordItem.tsx","src/components/CustomModal/styles.ts","src/components/CustomModal/customModal.tsx","src/screens/PasswordList/styles.ts","src/screens/PasswordList/passwordList.tsx","src/components/CustomSidebar/styles.ts","src/components/CustomSidebar/customSidebar.tsx","src/screens/Drawer/drawer.tsx","src/components/OnBoarding/OnBoardingItem/styles.ts","src/components/OnBoarding/OnBoardingItem/onBoardingItem.tsx","src/components/OnBoarding/Paginator/styles.ts","src/components/OnBoarding/Paginator/paginator.tsx","src/components/OnBoarding/NextButton/styles.ts","src/components/OnBoarding/NextButton/nextButton.tsx","src/screens/OnBoarding/slides.tsx","src/screens/OnBoarding/onBoarding.tsx","src/components/SliderContainer/styles.ts","src/components/SliderContainer/sliderContainer.tsx","src/components/PasswordConfigurator/CustomCheckBox/customCheckBox.tsx","src/utils/configuratorUtils.ts","src/components/PasswordConfigurator/passwordConfigurator.tsx","src/components/CreateEditPasswordConfigurator/styles.ts","src/components/CreateEditPasswordConfigurator/createEditPasswordConfigurator.tsx","src/screens/PasswordGenerator/passwordGenerator.tsx","src/components/Popover/styles.ts","src/components/Popover/popover.tsx","src/screens/Login/login.tsx","webpack:///./index.js?41f5","src/screens/PasswordGenerator/styles.ts","src/redux/slices/uiElementsSlice.ts","assets/amazon.png","assets/discord.png","assets/google.png","assets/slack.png","assets/okta.png","assets/outlook.png","assets/twitch.png","assets/img/sidebar-banner.png","src/redux/slices/configuratorSlice.ts","src/screens/Login/styles.ts","src/services/firebase.ts","src/redux/slices/userSlice.ts","src/redux/slices/applicationStatusSlice.ts","src/redux/slices/socialMediaSlice.ts"],"names":["appName","isObject","value","storeData","key","a","async","finalValue","JSON","stringify","toString","AsyncStorage","setItem","console","log","asyncStorageException","getData","getItem","parse","removeItem","setUserData2LS","userId","email","then","data","setPasswordGenerated","password","getPasswordGenerated","empty","catch","err","clearUserDataFromLS","res","setOnBoardingViewed","getOnBoardingViewed","firstLaunchFlag","sortBy","obj1","obj2","field","kind","x","getPasswordsByUserId","passwordList","passwordsCollection","where","get","querySnapshot","forEach","doc","push","id","passwordGenerated","password_generated","socialMedia","social_media","description","defaultEmptyPasswordDescription","createdAt","error","sort","y","sendPassword2Firebase","add","Date","getTime","uid","deletePasswordById","passwordId","delete","updatePasswordByIdFromFirebase","update","getSocialMedia","socialMediaList","socialMediaCollection","name","showInfoMessage","message","ToastAndroid","show","SHORT","styles","StyleSheet","create","container","flex","justifyContent","horizontal","flexDirection","padding","LoadingIndicator","style","size","color","initialState","passwordIdPicked","passwordPicked","passwordDescriptionPicked","length","isCreateMode","isEditMode","isDeleteMode","passwords","passwordSlice","createSlice","reducers","setPassword","state","payload","setPasswordPicked","setPasswordIdPicked","setPasswordDescriptionPicked","setLength","setIsCreateMode","setIsEditMode","setIsDeleteMode","setPasswords","resetPasswordGeneratorState","resetPasswordState","unsetPasswords","generatePassword","getPasswordsFromFirebase","savePassword2Firebase","deletePasswordFromFirebase","editPasswordFromFirebase","actions","selectPassword","selectPasswordIdPicked","selectPasswordPicked","selectPasswordDescriptionPicked","selectIsCreateMode","selectIsEditMode","selectIsDeleteMode","selectPasswordLength","selectPasswords","lower","upper","number","symbols","devWarnings","popoverMessage","infoMessages","copied2Clipboard","newPassword","about2CreatePassword","FIREBASE_STORAGE_URL","FIREBASE_STORAGE_BUCKET","imagesTokens","FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN","FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN","appColors","textTint","maximumTintColorSlider","activeTint","primary","primaryDark","red","CustomSnackbar","isSnackbarVisible","onDismiss","visible","duration","getPasswordGeneratorFlow","select","selectIsUpperCase","isUpperCase","selectIsLowerCase","isLowerCase","selectIsNumbers","isNumbers","selectIsSymbols","isSymbols","isUpper","isLower","isNumber","isSymbol","all","i","charAt","Math","floor","random","put","exception","passwordGeneratorSaga","takeLeading","type","getPasswordsFlow","selectUserId","call","setIsRequest","isRequest","unsetIsRequest","source","getPasswordsSaga","getSocialMediaFlow","socialMediaSelected","setSocialMediaList","setSocialMediaPicked","socialMediaPicked","getSocialMediaSaga","getSocialMediaListFromFirebase","savePasswordFlow","savePasswordSaga","deletePasswordFlow","deletePasswordSaga","updatePasswordFlow","selectSocialMediaPicked","updatePasswordSaga","IndexSagas","createRootReducer","combineReducers","user","userSlice","reducer","configurator","configuratorSlice","applicationStatus","applicationStatusSlice","socialMediaSlice","uiElements","uiElementsSlice","sagaMiddleware","createSagaMiddleware","middleware","store","configureStore","run","module","exports","process","LogBox","ignoreLogs","window","Stack","createNativeStackNavigator","App","useState","loading","setLoading","onBoardingViewed","useEffect","undefined","finally","Navigator","Screen","component","options","headerShown","Platform","OS","OnBoarding","Login","SignUp","PasswordGenerator","headerStyle","backgroundColor","headerTintColor","Drawer","navigation","username","setUsername","dispatch","useDispatch","auth","onAuthStateChanged","setUserData","replace","unsetUserData","loginImage","require","inputContainer","placeholder","input","shadow","onChangeText","text","buttonContainer","onPress","signUp","button","buttonText","linkContainer","navigate","link","linkText","CustomStatusbar","animated","barStyle","SocialMediaIcon","includes","imageSource","imageSourceRetriever","Image","socialMediaIcon","socialMediaColor","socialMediaIconColor","AntDesign","item","borderRadius","alignItems","marginLeft","marginRight","marginBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","socialIconAndPasswordInfo","passwordAndDescription","paddingHorizontal","descriptionTextLabel","fontSize","passwordInput","fontFamily","fontWeight","icons","singleIcon","PasswordIcons","passwordVisible","setPasswordVisible","mSocialMedia","toUpperCase","slice","View","TouchableOpacity","Entypo","setSnackbarMessage","snackbarMessage","setSnackbarVisible","snackbarVisible","Clipboard","setString","MaterialCommunityIcons","FontAwesome","setModalTitle","modalTitle","setModalMessage","modalMessage","setModalVisible","modalVisible","Ionicons","PasswordItem","Text","TextInput","showSoftInputOnFocus","caretHidden","secureTextEntry","content","borderColor","title","alignSelf","borderWidth","marginTop","paddingVertical","CustomModal","props","toggle","onSubmit","okButtonMessage","cancelButtonMessage","isVisible","onBackdropPress","onBackButtonPress","MaterialIcons","Button","sectionTitle","paddingBottom","items","margin","writeTaskWrapper","position","bottom","addWrapper","addText","navWrapper","navButtonContainer","marginHorizontal","navButton","fab","right","PasswordList","useSelector","selectSnackbarVisible","selectSnackbarMessage","selectModalTitle","selectModalMessage","selectModalVisible","scrollIsClose2Bottom","setScrollIsClose2Bottom","isRequesting","selectRequest","BackHandler","addEventListener","exitApp","onSnapshot","ScrollView","scrollEventThrottle","onScroll","event","nativeEvent","layoutMeasurement","contentOffset","contentSize","paddingToBottom","result","contentContainerStyle","flexGrow","keyboardShouldPersistTaps","map","FAB","icon","resetSnackbar","resetModal","imageBackground","paddingTop","textShadowColor","textShadowOffset","textShadowRadius","divider","paddingLeft","CustomSidebar","userEmail","selectUserEmail","substring","indexOf","userName","ImageBackground","Section","DrawerItemList","DrawerItem","label","closeDrawer","signOut","CustomDrawer","createDrawerNavigator","screenOptions","drawerStyle","Dimensions","drawerActiveBackgroundColor","drawerActiveTintColor","drawerItemStyle","drawerContent","drawerIcon","Feather","image","textAlign","OnBoardingItem","useWindowDimensions","uri","resizeMode","marginVertical","dot","Paginator","scrollX","_","inputRange","dotWidth","interpolate","outputRange","extrapolate","opacity","Animated","NextButton","scrollTo","percentage","circumference","PI","progressAnimation","useRef","Value","current","progressRef","toValue","timing","useNativeDriver","start","addListener","strokeDashoffset","setNativeProps","removeAllListeners","rotation","origin","stroke","cx","cy","r","strokeWidth","ref","strokeDasharray","activeOpacity","FIREBASE_STORAGE_FINAL_URL","slides","currentIndex","setCurrentIndex","slidesRef","viewableItemsChanged","viewableItems","index","viewConfig","viewAreaCoveragePercentThreshold","FlatList","renderItem","showsHorizontalScrollIndicator","pagingEnabled","bounces","keyExtractor","onViewableItemsChanged","viewabilityConfig","scrollToIndex","sliderContainer","activeMark","left","inactiveMark","SliderContainer","defaultValue","setValue","Number","isNaN","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","onValueChange","CustomCheckBox","isChecked","disabled","Checkbox","defaultProps","resetConfigurationState","handleLeftCheckboxes","setCheck1","setCheck2","selector1","selector2","handleOtherCheckboxes","payloadString1","payloadString2","payload1","payload2","handleRightCheckboxes","checkbox1","checkbox2","checkbox3","configuratorAction","updateConfiguratorStateAndGeneratePassword","PasswordConfigurator","isEasy2Read","selectIsEasy2Read","isAllChar","selectIsAllChar","handleRightCheckboxesGivenLeftCheckboxes","setIsUpperCaseAndIsLowerCase","setIsNumbersAndIsSymbols","checkBox","section","setIsEasy2Read","setIsAllChar","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSymbols","createEditPassword","userInputContainer","textInput","dropdown","textLabel","descriptionLengthIndicator","CreateEditPasswordConfigurator","setDescription","selectSocialMediaList","createEditButtonLabel","cardView","Picker","selectedValue","itemValue","Item","maxLength","scrollViewRef","isKeyboardVisible","setKeyboardVisible","passwordFromState","screenTitle","handleBackAction","isCreatedMode","showAuthenticatedMessage","keyboardDidShowListener","Keyboard","keyboardDidHideListener","remove","scrollToEnd","animating","useLayoutEffect","setOptions","screen","passwordStyle","password2Clipboard","configuration","textContainer","textHeader","Divider","passwordLengthContainer","lengthSliderContainer","inputLength","keyboardType","handleGeneratePassword","popoverStyles","arrow","borderTopColor","background","CustomPopover","popoverVisible","closePopover","popoverAnchorRect","touchableRef","contentStyle","arrowStyle","backgroundStyle","onClose","fromRect","placement","supportedOrientations","usePopover","openPopover","signIn","buttonOutLine","buttonOutLineText","registerRootComponent","paragraph","checkbox","initialSnackbarState","initialModalState","extraReducers","builder","addCase","resetPasswordConfiguratorState","tooltipImage","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","firebase","apps","initializeApp","database","firestore","collection","signInWithEmailAndPassword","toLowerCase","userCredentials","alert","createUserWithEmailAndPassword"],"mappings":"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","file":"static/js/app.00a3072e.chunk.js","sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst appName = 'passvault';\nconst isObject = (value: string) => typeof value === 'object';\n\nconst storeData = async (key: string, value: any) => {\n  try {\n    const finalValue = isObject(value) ? JSON.stringify(value) : value.toString();\n    await AsyncStorage.setItem(key, finalValue);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log({ asyncStorageException: e });\n  }\n};\n\n// eslint-disable-next-line consistent-return\nconst getData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (value !== null) {\n      return isObject(value) ? JSON.parse(value) : value;\n    }\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst removeItem = async (key: string) => {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst setUserData2LS = (userId: string | undefined, email: string | null | undefined) => {\n  storeData(`${appName}.userId`, userId || '').then((data) => data);\n  storeData(`${appName}.email`, email || '').then((data) => data);\n};\n\nconst setPasswordGenerated = (password: string) => {\n  storeData(`${appName}.password`, password).then((data: void) => data);\n};\n\nconst getPasswordGenerated = () => {\n  const empty = { password: '' };\n\n  return getData(`${appName}.password`)\n    .then((password: string) => ({ password }))\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.log({ err });\n      return empty;\n    });\n};\n\nconst getUserDataFromLS = () => {\n  const empty = { userId: '', email: '' };\n\n  return getData(`${appName}.userId`)\n    .then((userId: string) => {\n      getData(`${appName}.email`)\n        .then((email: string) => ({\n          userId,\n          email,\n        }))\n        .catch((err: any) => {\n          // eslint-disable-next-line no-console\n          console.log(err);\n          return empty;\n        });\n    })\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.log(err);\n      return empty;\n    });\n};\n\nconst clearUserDataFromLS = () => {\n  removeItem(`${appName}.userId`).then((res: void) => res);\n  removeItem(`${appName}.email`).then((res: void) => res);\n};\n\nconst setOnBoardingViewed = (value: any) => {\n  storeData(`${appName}.alreadyLaunched`, value).then((data: void) => data);\n};\n\nconst getOnBoardingViewed = () =>\n  getData(`${appName}.alreadyLaunched`)\n    .then((firstLaunchFlag) => firstLaunchFlag)\n    .catch((err) => {\n      // eslint-disable-next-line no-console\n      console.log({ err });\n      return null;\n    });\n\nexport {\n  setUserData2LS,\n  getUserDataFromLS,\n  clearUserDataFromLS,\n  setPasswordGenerated,\n  getPasswordGenerated,\n  setOnBoardingViewed,\n  getOnBoardingViewed,\n};\n","import { passwordsCollection, socialMediaCollection } from 'services/firebase';\nimport { defaultEmptyPasswordDescription } from 'utils/constants';\n\nconst sortBy = (obj1: any, obj2: any, field: string, kind: string = 'asc') => {\n  const x = kind === 'asc' ? 1 : -1;\n  return obj1[field] < obj2[field] ? -1 * x : obj1[field] > obj2[field] ? 1 * x : 0;\n};\n\nexport const getPasswordsByUserId = async (userId: any) => {\n  const passwordList: {\n    id: string;\n    passwordGenerated: string;\n    socialMedia: string;\n    description: string;\n    createdAt: number;\n  }[] = [];\n\n  await passwordsCollection\n    .where('uid', '==', userId)\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.forEach((doc) =>\n        passwordList.push({\n          id: doc.id,\n          passwordGenerated: doc.data().password_generated,\n          socialMedia: doc.data().social_media,\n          description: doc.data().description || defaultEmptyPasswordDescription,\n          createdAt: doc.data().createdAt,\n        })\n      )\n    )\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.log('Error getting documents: ', error);\n    });\n\n  return passwordList.sort((x, y) =>\n    sortBy(x, y, 'createdAt', process.env.PASSWORD_LIST_ORDER_TYPE)\n  );\n};\n\nexport const sendPassword2Firebase = async (\n  userId: string,\n  password: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .add({\n      createdAt: new Date().getTime(),\n      password_generated: password,\n      social_media: socialMedia,\n      description,\n      uid: userId,\n    })\n    .then(() => {\n      // eslint-disable-next-line no-console\n      console.log('A new password was added in database.');\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log('Something went wrong trying to add a new password in database.');\n    });\n};\n\nexport const deletePasswordById = async (passwordId: string) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .delete()\n    .then(() => {\n      // eslint-disable-next-line no-console\n      console.log('A password was deleted from database.');\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log('Something went wrong trying to delete a password from database.');\n    });\n};\n\nexport const updatePasswordByIdFromFirebase = async (\n  passwordId: string,\n  passwordGenerated: string,\n  description: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .update({\n      password_generated: passwordGenerated,\n      description,\n      social_media: socialMedia,\n    })\n    .then(() => {\n      // eslint-disable-next-line no-console\n      console.log('A password was updated from database.');\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log('Something went wrong trying to update a password from database.');\n    });\n};\n\nexport const getSocialMedia = async () => {\n  const socialMediaList: { id: string; name: string }[] = [];\n\n  await socialMediaCollection.get().then((querySnapshot) => {\n    querySnapshot.forEach((doc) =>\n      socialMediaList.push({\n        id: doc.id,\n        name: doc.data().name,\n      })\n    );\n  });\n\n  return socialMediaList;\n};\n","import { ToastAndroid } from 'react-native';\n\nexport const showInfoMessage = (message: string) => {\n  ToastAndroid.show(message, ToastAndroid.SHORT);\n};\n","import React from 'react';\n\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n});\n\nexport const LoadingIndicator = () => (\n  <View style={[styles.container, styles.horizontal]}>\n    <ActivityIndicator size='large' color='#3091e0' />\n  </View>\n);\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  password: string;\n  passwordIdPicked: string;\n  passwordPicked: string;\n  passwordDescriptionPicked: string;\n  length: number;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  isDeleteMode: boolean;\n  passwords: any;\n} = {\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n  passwords: [],\n};\n\nconst resetPasswordState = (state: any) => ({\n  ...state,\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  passwordDescriptionPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  isDeleteMode: false,\n});\n\nexport const passwordSlice = createSlice({\n  name: 'password',\n  initialState,\n  reducers: {\n    setPassword: (state, { payload }) => ({\n      ...state,\n      password: payload.password,\n    }),\n    setPasswordPicked: (state, { payload }) => ({\n      ...state,\n      passwordPicked: payload.passwordPicked,\n    }),\n    setPasswordIdPicked: (state, { payload }) => ({\n      ...state,\n      passwordIdPicked: payload.passwordIdPicked,\n    }),\n    setPasswordDescriptionPicked: (state, { payload }) => ({\n      ...state,\n      passwordDescriptionPicked: payload.passwordDescriptionPicked,\n    }),\n    setLength: (state, { payload }) => ({\n      ...state,\n      length: payload.length,\n    }),\n    setIsCreateMode: (state, { payload }) => ({\n      ...state,\n      isCreateMode: payload.isCreateMode,\n    }),\n    setIsEditMode: (state, { payload }) => ({\n      ...state,\n      isEditMode: payload.isEditMode,\n    }),\n    setIsDeleteMode: (state, { payload }) => ({\n      ...state,\n      isDeleteMode: payload.isDeleteMode,\n    }),\n    setPasswords: (state, { payload }) => ({\n      ...state,\n      passwords: payload.passwords,\n    }),\n    resetPasswordGeneratorState: (state) => resetPasswordState(state),\n    unsetPasswords: () => ({ ...initialState }),\n    generatePassword: () => {},\n    getPasswordsFromFirebase: () => {},\n    savePassword2Firebase: (state, { payload }) => {},\n    deletePasswordFromFirebase: () => {},\n    editPasswordFromFirebase: () => {},\n  },\n});\n\nexport const {\n  setPassword,\n  setPasswordPicked,\n  setPasswordIdPicked,\n  setPasswordDescriptionPicked,\n  setLength,\n  setIsCreateMode,\n  setIsEditMode,\n  setIsDeleteMode,\n  setPasswords,\n  resetPasswordGeneratorState,\n  unsetPasswords,\n  generatePassword,\n  getPasswordsFromFirebase,\n  savePassword2Firebase,\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n} = passwordSlice.actions;\n\nexport const selectPassword = (state: { password: { password: string } }) =>\n  state.password.password;\nexport const selectPasswordIdPicked = (state: { password: { passwordIdPicked: string } }) =>\n  state.password.passwordIdPicked;\nexport const selectPasswordPicked = (state: { password: { passwordPicked: string } }) =>\n  state.password.passwordPicked;\nexport const selectPasswordDescriptionPicked = (state: {\n  password: { passwordDescriptionPicked: string };\n}) => state.password.passwordDescriptionPicked;\nexport const selectIsCreateMode = (state: { password: { isCreateMode: boolean } }) =>\n  state.password.isCreateMode;\nexport const selectIsEditMode = (state: { password: { isEditMode: boolean } }) =>\n  state.password.isEditMode;\nexport const selectIsDeleteMode = (state: { password: { isDeleteMode: boolean } }) =>\n  state.password.isDeleteMode;\nexport const selectPasswordLength = (state: { password: { length: number } }) =>\n  state.password.length;\nexport const selectPasswords = (state: { password: { passwords: any } }) =>\n  state.password.passwords;\n","const lower = 'abcdefghijklmñopqrstuvwxyz';\nconst upper = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\nconst number = '0123456789';\nconst symbols = '[]{}<>\":|!@#$%^&*()_+`~/';\n\nconst devWarnings = [\n  'Clipboard has been extracted from react-native core',\n  'AsyncStorage has been extracted from react-native core',\n  'Setting a timer for a long period of time, i.e. multiple minutes',\n  'Picker has been extracted from react-native core and will be removed',\n];\n\nconst popoverMessage = 'You can generate passwords without store them.';\n\nconst defaultEmptyPasswordDescription = 'This password has no description. Please update it.';\n\nconst infoMessages = {\n  copied2Clipboard: 'The password was copied to clipboard',\n  newPassword: 'New password generated',\n  about2CreatePassword: \"You're about to create a new password\",\n};\n\nconst FIREBASE_STORAGE_URL = 'https://firebasestorage.googleapis.com';\nconst { FIREBASE_STORAGE_BUCKET } = process.env;\n\nconst imagesTokens = {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN: '9a72b084-fbf7-4ec0-bfc7-4c0c4fe923c7',\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN: '48ac40a8-14ac-4b31-8246-1b9a64efc19e',\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN: '9a4c9252-2f1e-4580-868c-e5d6fd383cd9',\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN: '65edc2f3-657d-43f9-89b1-a2e1be19e41f',\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN: '287fce56-7f18-4d06-a85b-24b6fbc42171',\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN: '79295f0a-cf45-4ed2-aa1d-0e7c29cafea3',\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN: '5f6da2b8-26cc-48ca-8352-30afd0cb3dd3',\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN: '5cf416cc-0f22-4ca6-be38-fc816742a76e',\n};\n\nconst appColors = {\n  textTint: '#FFF',\n  maximumTintColorSlider: '#d3d3d3',\n  activeTint: '#9ac8fc',\n  primary: '#3091e0',\n  primaryDark: '#236daa',\n  red: '#DB4437',\n};\n\nexport interface PasswordI {\n  id: string;\n  description: string;\n  passwordGenerated: string;\n  socialMedia: string;\n}\n\nexport {\n  devWarnings,\n  lower,\n  upper,\n  number,\n  symbols,\n  popoverMessage,\n  defaultEmptyPasswordDescription,\n  appColors,\n  infoMessages,\n  FIREBASE_STORAGE_URL,\n  FIREBASE_STORAGE_BUCKET,\n  imagesTokens,\n};\n","import React from 'react';\nimport { Snackbar } from 'react-native-paper';\n\n// Reference for Icons usage: https://icons.expo.fyi/\n\nexport const CustomSnackbar = ({ message, isSnackbarVisible, onDismiss }: Props) => (\n  <Snackbar visible={isSnackbarVisible} onDismiss={onDismiss} duration={1500}>\n    {message}\n  </Snackbar>\n);\n\ninterface Props {\n  message: string;\n  isSnackbarVisible: boolean;\n  onDismiss: any;\n}\n","import { select, put, takeLeading } from 'redux-saga/effects';\nimport {\n  generatePassword,\n  selectIsEditMode,\n  selectPasswordLength,\n  selectPasswordPicked,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { lower, upper, number, symbols } from 'utils/constants';\nimport { setPasswordGenerated } from 'utils/localStorageFuncs';\n\nimport {\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n  selectIsUpperCase,\n} from 'reduxStore/slices/configuratorSlice';\n\nfunction* getPasswordGeneratorFlow(): Generator {\n  try {\n    const length = yield select(selectPasswordLength);\n    const isUpperCase = yield select(selectIsUpperCase);\n    const isLowerCase = yield select(selectIsLowerCase);\n    const isNumbers = yield select(selectIsNumbers);\n    const isSymbols = yield select(selectIsSymbols);\n\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const isUpper: string = isUpperCase ? upper : '';\n    const isLower: string = isLowerCase ? lower : '';\n    const isNumber: string = isNumbers ? number : '';\n    const isSymbol: string = isSymbols ? symbols : '';\n\n    const all = isUpper + isLower + isNumber + isSymbol;\n    let password = '';\n\n    // @ts-ignore\n    for (let i = 0; i < length; i++) {\n      password += all.charAt(Math.floor(Math.random() * all.length));\n    }\n\n    setPasswordGenerated(password);\n\n    if (isEditMode) {\n      if (passwordPicked) {\n        // TODO: This flow needs to be updated in future\n        /* This condition will only be applied at the first time the user\n         * click in edit password, the password picked will be set as\n         * a generated password, and then will be deleted from the state.\n         * */\n        // @ts-ignore\n        password = passwordPicked;\n      }\n    }\n    yield put(setPassword({ password }));\n  } catch (exception) {\n    // eslint-disable-next-line no-console\n    console.log({ exception });\n  }\n}\n\nexport const passwordGeneratorSaga = [takeLeading(generatePassword.type, getPasswordGeneratorFlow)];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { getPasswordsByUserId } from 'services/database';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nfunction* getPasswordsFlow(): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const passwords = yield call(getPasswordsByUserId, userId);\n\n    yield put(setIsRequest({ isRequest: true }));\n    yield put(setPasswords({ passwords }));\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    // eslint-disable-next-line no-console\n    console.log({ source: 'Exception from getPasswordsSaga', exception });\n  }\n}\n\nexport const getPasswordsSaga = [takeLeading(getPasswordsFromFirebase.type, getPasswordsFlow)];\n","import { call, put, takeLeading, select } from 'redux-saga/effects';\nimport {\n  getSocialMediaListFromFirebase,\n  setSocialMediaList,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\nimport {\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPasswordPicked,\n  setPassword,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { getSocialMedia } from 'services/database';\n\nfunction* getSocialMediaFlow(): Generator {\n  try {\n    const isCreateMode = yield select(selectIsCreateMode);\n    const isEditMode = yield select(selectIsEditMode);\n    const passwordPicked = yield select(selectPasswordPicked);\n\n    const socialMediaList = yield call(getSocialMedia);\n    // @ts-ignore\n    const socialMediaSelected = socialMediaList[0].name;\n\n    yield put(setSocialMediaList({ socialMediaList }));\n\n    if (isCreateMode) {\n      yield put(setSocialMediaPicked({ socialMediaPicked: socialMediaSelected }));\n    } else if (isEditMode) {\n      // TODO: This flow needs to be updated in future\n      /* this flow is only to put the passwordPicked in the\n       * text input in Password Generator and then delete it\n       * passwordPicked state.\n       * */\n      yield put(setPassword({ password: passwordPicked }));\n      yield put(setPasswordPicked({ passwordPicked: '' }));\n    }\n  } catch (exception) {\n    // eslint-disable-next-line no-console\n    console.log({ source: 'Exception from getSocialMediaSaga', exception });\n  }\n}\n\nexport const getSocialMediaSaga = [\n  takeLeading(getSocialMediaListFromFirebase.type, getSocialMediaFlow),\n];\n","import { select, call, takeLeading } from 'redux-saga/effects';\nimport { savePassword2Firebase } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { sendPassword2Firebase } from 'services/database';\n\nfunction* savePasswordFlow({ payload }: Params): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const { socialMedia, password, description } = payload;\n\n    // @ts-ignore\n    yield call(sendPassword2Firebase, userId, password, description, socialMedia);\n  } catch (exception) {\n    // eslint-disable-next-line no-console\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\n// @ts-ignore\nexport const savePasswordSaga = [takeLeading(savePassword2Firebase.type, savePasswordFlow)];\n\ninterface Params {\n  payload: {\n    socialMedia: string;\n    password: string;\n    description: string;\n  };\n}\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport {\n  deletePasswordFromFirebase,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { deletePasswordById } from 'services/database';\nimport { setIsRequest, unsetIsRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nfunction* deletePasswordFlow(): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n\n    yield put(setIsRequest({ isRequest: true }));\n\n    // @ts-ignore\n    yield call(deletePasswordById, passwordId);\n\n    yield put(unsetIsRequest());\n  } catch (exception) {\n    // eslint-disable-next-line no-console\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\nexport const deletePasswordSaga = [\n  // @ts-ignore\n  takeLeading(deletePasswordFromFirebase.type, deletePasswordFlow),\n];\n","import { select, call, takeLeading } from 'redux-saga/effects';\nimport {\n  editPasswordFromFirebase,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { updatePasswordByIdFromFirebase } from 'services/database';\nimport { selectSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\nfunction* updatePasswordFlow(): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n    const socialMedia = yield select(selectSocialMediaPicked);\n    const password = yield select(selectPassword);\n    const description = yield select(selectPasswordDescriptionPicked);\n\n    yield call(\n      // @ts-ignore\n      updatePasswordByIdFromFirebase,\n      passwordId,\n      password,\n      description,\n      socialMedia\n    );\n  } catch (exception) {\n    // eslint-disable-next-line no-console\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\nexport const updatePasswordSaga = [takeLeading(editPasswordFromFirebase.type, updatePasswordFlow)];\n","import { all } from 'redux-saga/effects';\nimport { passwordGeneratorSaga } from 'reduxStore/sagas/passwordGeneratorSaga';\nimport { getPasswordsSaga } from 'reduxStore/sagas/getPasswordsSaga';\nimport { getSocialMediaSaga } from 'reduxStore/sagas/getSocialMediaSaga';\nimport { savePasswordSaga } from 'reduxStore/sagas/savePasswordSaga';\nimport { deletePasswordSaga } from 'reduxStore/sagas/deletePasswordSaga';\nimport { updatePasswordSaga } from 'reduxStore/sagas/updatePasswordSaga';\n\nexport default function* IndexSagas() {\n  yield all([\n    ...passwordGeneratorSaga,\n    ...getPasswordsSaga,\n    ...getSocialMediaSaga,\n    ...savePasswordSaga,\n    ...deletePasswordSaga,\n    ...updatePasswordSaga,\n  ]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { userSlice } from './userSlice';\nimport { passwordSlice } from './passwordSlice';\nimport { configuratorSlice } from 'reduxStore/slices/configuratorSlice';\nimport { applicationStatusSlice } from 'reduxStore/slices/applicationStatusSlice';\nimport { socialMediaSlice } from 'reduxStore/slices/socialMediaSlice';\nimport { uiElementsSlice } from 'reduxStore/slices/uiElementsSlice';\n\nconst createRootReducer = () =>\n  combineReducers({\n    user: userSlice.reducer,\n    password: passwordSlice.reducer,\n    configurator: configuratorSlice.reducer,\n    applicationStatus: applicationStatusSlice.reducer,\n    socialMedia: socialMediaSlice.reducer,\n    uiElements: uiElementsSlice.reducer,\n  });\n\nexport default createRootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport IndexSagas from 'reduxStore/sagas/index';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from 'reduxStore/slices/rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = configureStore({\n  reducer: createRootReducer(),\n  middleware,\n});\n\nsagaMiddleware.run(IndexSagas);\n\nexport default store;\n","module.exports = __webpack_public_path__ + \"static/media/passvault-512px.fb8f2fd2.png\";","import React, { useEffect, useState } from 'react';\n\nimport { LogBox, Platform } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport { Provider } from 'react-redux';\nimport { OnBoarding } from 'screens/OnBoarding/onBoarding';\nimport { Login } from 'screens/Login/login';\nimport { SignUp } from 'screens/SignUp/signup';\nimport { PasswordGenerator } from 'screens/PasswordGenerator/passwordGenerator';\nimport { Drawer } from 'screens/Drawer/drawer';\n\nimport store from 'reduxStore/store/index';\nimport { devWarnings } from 'utils/constants';\nimport { CustomStatusbar } from 'components/CustomStatusbar/customStatusbar';\nimport { getOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\n\nif (process.env.ENV === 'dev') {\n  LogBox.ignoreLogs(devWarnings);\n}\n\ndeclare global {\n  // eslint-disable-next-line no-unused-vars\n  interface Window {\n    store: any;\n  }\n}\n\nwindow.store = store;\nconst Stack = createNativeStackNavigator();\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [onBoardingViewed, setOnBoardingViewed] = useState(false);\n\n  useEffect(() => {\n    getOnBoardingViewed()\n      .then((value) => {\n        if (value === 'false' || value === undefined) {\n          setOnBoardingViewed(false);\n        } else {\n          setOnBoardingViewed(true);\n        }\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.log('Error checking is first launch: ', { err });\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  if (onBoardingViewed === null) {\n    return null;\n  }\n  return (\n    <Provider store={store}>\n      <CustomStatusbar />\n      <NavigationContainer>\n        <Stack.Navigator>\n          {loading && (\n            <Stack.Screen\n              name='Loading'\n              component={LoadingIndicator}\n              options={{ headerShown: false }}\n            />\n          )}\n          {!onBoardingViewed && Platform.OS !== 'web' && (\n            <Stack.Screen\n              name='OnBoarding'\n              component={OnBoarding}\n              options={{ headerShown: false }}\n            />\n          )}\n          <Stack.Screen name='Login' component={Login} options={{ headerShown: false }} />\n          <Stack.Screen name='SignUp' component={SignUp} options={{ headerShown: false }} />\n          <Stack.Screen\n            name='PasswordGenerator'\n            component={PasswordGenerator}\n            options={{\n              headerStyle: {\n                backgroundColor: '#3091e0',\n              },\n              headerTintColor: '#FFF',\n            }}\n          />\n          <Stack.Screen\n            name='Drawer'\n            component={Drawer}\n            options={{\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { View, Text, Image, TextInput, TouchableOpacity } from 'react-native';\n\nimport { auth, signUp } from 'services/firebase';\n\nimport { shadow } from 'screens/PasswordGenerator/styles';\nimport styles from 'screens/Login/styles';\n\nexport const SignUp = ({ navigation }: Props) => {\n  const [username, setUsername] = useState('');\n  const dispatch = useDispatch();\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleSignUp = () => {\n    signUp(username);\n    setUsername('');\n  };\n\n  return (\n    <View style={styles.container}>\n      <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder='Username'\n          value={username}\n          style={[styles.input, shadow.container]}\n          onChangeText={(text) => setUsername(text)}\n        />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={handleSignUp} style={styles.button}>\n          <Text style={styles.buttonText}>Sign up</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.linkContainer}>\n        <TouchableOpacity\n          onPress={() => {\n            // @ts-ignore\n            navigation.navigate('Login');\n          }}\n          style={styles.link}\n        >\n          <Text style={styles.linkText}>Go to Login if you have an account</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import React from 'react';\nimport { StatusBar } from 'react-native';\nimport { appColors } from 'utils/constants';\n\n/*\n * For more reference check this snack:\n *   https://snack.expo.dev/@ahmed_gaber/safe-area-context?platform=ios\n */\n\nexport const CustomStatusbar = () => (\n  <StatusBar animated barStyle='light-content' backgroundColor={appColors.primaryDark} />\n);\n\nexport default CustomStatusbar;\n","import React from 'react';\nimport { Image } from 'react-native';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nimport {\n  imageSourceRetriever,\n  socialMediaIcon,\n  socialMediaIconColor,\n} from 'utils/imageDataRetriever';\n\nexport const SocialMediaIcon = ({ style, socialMedia }: Props) => {\n  if (['amazon', 'discord', 'google', 'slack', 'okta', 'outlook', 'twitch'].includes(socialMedia)) {\n    const imageSource = imageSourceRetriever(socialMedia);\n\n    return <Image style={style} source={imageSource} />;\n  }\n  const getSocialMedia: any = socialMediaIcon(socialMedia);\n  const socialMediaColor = socialMediaIconColor(socialMedia);\n\n  return <AntDesign style={style} name={getSocialMedia} size={24} color={socialMediaColor} />;\n};\n\ninterface Props {\n  style: any;\n  socialMedia: string;\n}\n","export const imageSourceRetriever = (socialMedia: string) =>\n  socialMedia === 'amazon'\n    ? require('assets/amazon.png')\n    : socialMedia === 'discord'\n    ? require('assets/discord.png')\n    : socialMedia === 'google'\n    ? require('assets/google.png')\n    : socialMedia === 'slack'\n    ? require('assets/slack.png')\n    : socialMedia === 'okta'\n    ? require('assets/okta.png')\n    : socialMedia === 'outlook'\n    ? require('assets/outlook.png')\n    : socialMedia === 'twitch'\n    ? require('assets/twitch.png')\n    : '';\n\nexport const socialMediaIcon = (socialMedia: string) =>\n  socialMedia === 'facebook'\n    ? 'facebook-square'\n    : socialMedia === 'linkedin'\n    ? 'linkedin-square'\n    : socialMedia === 'other'\n    ? 'questioncircle'\n    : socialMedia;\n\nexport const socialMediaIconColor = (socialMedia: string) =>\n  socialMedia === 'facebook'\n    ? '#4267B2'\n    : socialMedia === 'twitter'\n    ? '#00ACEE'\n    : socialMedia === 'linkedin'\n    ? '#2867B2'\n    : 'black';\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const item = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFF',\n    padding: 10,\n    borderRadius: 5,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginLeft: 3,\n    marginRight: 3,\n    marginBottom: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n\n  socialIconAndPasswordInfo: { flex: 1, width: '50%', flexDirection: 'row', alignItems: 'center' },\n\n  passwordAndDescription: {\n    width: '81%',\n    paddingHorizontal: 5,\n    flexDirection: 'column',\n  },\n\n  descriptionTextLabel: { fontSize: 13, marginBottom: 5 },\n\n  passwordInput: {\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 15 : 14,\n  },\n});\n\nexport const icons = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n\n  socialMedia: { width: 24, height: 24, marginRight: 10 },\n\n  singleIcon: {\n    marginRight: 10,\n  },\n});\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  setIsDeleteMode,\n  setIsEditMode,\n  setPasswordDescriptionPicked,\n  setPasswordIdPicked,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\n\nimport { Clipboard, Platform, TouchableOpacity, View } from 'react-native';\nimport { Entypo, FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { icons } from 'components/PasswordItem/styles';\n\nimport { appColors, infoMessages } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\nimport {\n  setModalMessage,\n  setModalTitle,\n  setModalVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\n\nexport const PasswordIcons = ({\n  passwordId,\n  socialMedia,\n  description,\n  passwordGenerated,\n  passwordVisible,\n  setPasswordVisible,\n  navigation,\n}: Props) => {\n  const dispatch = useDispatch();\n\n  const mSocialMedia = socialMedia.charAt(0).toUpperCase() + socialMedia.slice(1);\n\n  const handleShowHidePassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.copied2Clipboard);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.copied2Clipboard }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    Clipboard.setString(passwordGenerated);\n  };\n\n  const handleEditButton = () => {\n    dispatch(setIsEditMode({ isEditMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setPasswordPicked({ passwordPicked: passwordGenerated }));\n    dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n    dispatch(setSocialMediaPicked({ socialMediaPicked: socialMedia }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleDeleteButton = () => {\n    dispatch(setIsDeleteMode({ isDeleteMode: true }));\n    dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n    dispatch(setModalTitle({ modalTitle: 'Delete password warning' }));\n    dispatch(\n      setModalMessage({\n        modalMessage: `Are you sure you want to delete this ${mSocialMedia}'s password?`,\n      })\n    );\n    dispatch(setModalVisible({ modalVisible: true }));\n  };\n\n  return (\n    <View style={icons.container}>\n      <TouchableOpacity onPress={handleShowHidePassword}>\n        <Entypo\n          style={icons.singleIcon}\n          name={passwordVisible ? 'eye' : 'eye-with-line'}\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleCopyButton}>\n        <MaterialCommunityIcons\n          style={icons.singleIcon}\n          name='content-copy'\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleEditButton}>\n        <FontAwesome style={{ marginRight: 5 }} name='edit' size={18} color='grey' />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleDeleteButton}>\n        <Ionicons name='trash' size={18} color={appColors.red} />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  socialMedia: string;\n  description: string;\n  passwordGenerated: string;\n  passwordVisible: boolean;\n  setPasswordVisible: any;\n  navigation: any;\n}\n","import React, { useState } from 'react';\nimport { View, Text, TextInput } from 'react-native';\n\nimport { SocialMediaIcon } from 'components/SocialMediaIcon/socialMediaIcon';\nimport { PasswordIcons } from 'components/PasswordIcons/passwordIcon';\n\nimport { icons, item } from './styles';\n\nexport const PasswordItem = ({\n  passwordId,\n  passwordGenerated,\n  socialMedia,\n  description,\n  navigation,\n}: Props) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n\n  return (\n    <View style={item.container}>\n      <View style={item.socialIconAndPasswordInfo}>\n        <SocialMediaIcon style={icons.socialMedia} socialMedia={socialMedia} />\n        <View style={item.passwordAndDescription}>\n          <Text style={item.descriptionTextLabel}>{description}</Text>\n          <TextInput\n            style={item.passwordInput}\n            showSoftInputOnFocus={false}\n            caretHidden\n            value={passwordGenerated}\n            secureTextEntry={!passwordVisible}\n          />\n        </View>\n      </View>\n      <PasswordIcons\n        passwordId={passwordId}\n        socialMedia={socialMedia}\n        description={description}\n        passwordGenerated={passwordGenerated}\n        passwordVisible={passwordVisible}\n        setPasswordVisible={setPasswordVisible}\n        navigation={navigation}\n      />\n    </View>\n  );\n};\n\ninterface Props {\n  passwordId: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  description: string;\n  navigation: any;\n}\n","import { StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  content: {\n    flexDirection: 'column',\n    backgroundColor: 'white',\n    padding: 25,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 4,\n    borderColor: 'rgba(0, 0, 0, 0.1)',\n  },\n\n  title: {\n    alignSelf: 'flex-start',\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 12,\n  },\n\n  message: {\n    alignSelf: 'flex-start',\n    marginBottom: 10,\n  },\n\n  input: {\n    width: '90%',\n    alignSelf: 'flex-start',\n    borderWidth: 1,\n    borderRadius: 10,\n    marginTop: 15,\n    marginBottom: 20,\n    paddingVertical: 3,\n    paddingHorizontal: 15,\n  },\n\n  buttonContainer: {\n    flexDirection: 'row',\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    paddingHorizontal: 5,\n  },\n});\n","import React, { useEffect } from 'react';\nimport { Text, View } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport Modal from 'react-native-modal';\nimport { appColors } from 'utils/constants';\n\nimport { styles } from './styles';\n\nexport const CustomModal = (props: {\n  visible: boolean;\n  toggle: any;\n  onSubmit: any;\n  title: string;\n  message: string;\n  okButtonMessage: string;\n  cancelButtonMessage: string;\n}) => {\n  const { visible, toggle, onSubmit, title, message, okButtonMessage, cancelButtonMessage } = props;\n\n  return (\n    <Modal isVisible={visible} onBackdropPress={toggle} onBackButtonPress={toggle}>\n      <View style={styles.content}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.message}>{message}</Text>\n        <View style={styles.buttonContainer}>\n          <View style={styles.button}>\n            <MaterialIcons.Button name='close' onPress={toggle} backgroundColor={appColors.red}>\n              No\n            </MaterialIcons.Button>\n          </View>\n          <View style={styles.button}>\n            <MaterialIcons.Button\n              name='check'\n              onPress={onSubmit}\n              backgroundColor={appColors.primary}\n            >\n              Yes\n            </MaterialIcons.Button>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#EBEAED',\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingBottom: 20,\n  },\n  items: {\n    margin: 20,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 20,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    width: 250,\n    backgroundColor: '#FFF',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    borderRadius: 60,\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {\n    position: 'absolute',\n    alignItems: 'center',\n    fontSize: 45,\n    color: '#C0C0C0',\n  },\n  navWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  navButtonContainer: {\n    justifyContent: 'center',\n    backgroundColor: '#E13333',\n    width: '78%',\n    padding: 6,\n    marginTop: 2,\n    marginHorizontal: 10,\n    borderRadius: 10,\n  },\n  navButton: {\n    alignItems: 'center',\n    fontSize: 13,\n    fontWeight: '700',\n    color: 'white',\n  },\n\n  fab: {\n    position: 'absolute',\n    margin: 26,\n    right: 0,\n    backgroundColor: appColors.primary,\n  },\n});\n\nexport default styles;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n  getPasswordsFromFirebase,\n  selectIsDeleteMode,\n  selectIsEditMode,\n  selectPasswords,\n  setIsCreateMode,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectRequest } from 'reduxStore/slices/applicationStatusSlice';\nimport {\n  resetModal,\n  resetSnackbar,\n  selectModalMessage,\n  selectModalTitle,\n  selectModalVisible,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\n\nimport { View, ScrollView, BackHandler, Platform } from 'react-native';\nimport { FAB } from 'react-native-paper';\n\nimport { PasswordItem } from 'components/PasswordItem/passwordItem';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { CustomModal as Modal } from 'components/CustomModal/customModal';\n\nimport { passwordsCollection } from 'services/firebase';\n\nimport { appColors, PasswordI } from 'utils/constants';\nimport styles from './styles';\n\nexport const PasswordList = ({ navigation }: Props) => {\n  const snackbarVisible = useSelector(selectSnackbarVisible);\n  const snackbarMessage = useSelector(selectSnackbarMessage);\n\n  const modalTitle = useSelector(selectModalTitle);\n  const modalMessage = useSelector(selectModalMessage);\n  const modalVisible = useSelector(selectModalVisible);\n\n  const isEditMode = useSelector(selectIsEditMode);\n  const isDeleteMode = useSelector(selectIsDeleteMode);\n\n  const [scrollIsClose2Bottom, setScrollIsClose2Bottom] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const passwords = useSelector(selectPasswords);\n  const isRequesting = useSelector(selectRequest);\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', () => {\n      BackHandler.exitApp();\n      return true;\n    });\n\n    passwordsCollection.onSnapshot(() => {\n      dispatch(getPasswordsFromFirebase());\n    });\n  }, []);\n\n  const handleScrollIsClose2Bottom = (event: any) => {\n    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;\n    const paddingToBottom = Platform.OS === 'web' ? 7 : 10;\n    const result =\n      layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n\n    setScrollIsClose2Bottom(result);\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  const handleOnPressFAB = () => {\n    dispatch(setIsCreateMode({ isCreateMode: true }));\n    navigation.navigate('PasswordGenerator');\n  };\n\n  const handleModalToggle = () => {\n    dispatch(resetModal());\n  };\n  const handleModalOnSubmit = () => {\n    if (isDeleteMode) {\n      dispatch(deletePasswordFromFirebase());\n    } else if (isEditMode) {\n      dispatch(editPasswordFromFirebase());\n      navigation.navigate('PasswordList');\n    }\n    dispatch(resetModal());\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <ScrollView\n            scrollEventThrottle={16}\n            onScroll={handleScrollIsClose2Bottom}\n            contentContainerStyle={{ flexGrow: 1 }}\n            keyboardShouldPersistTaps='handled'\n          >\n            <View style={styles.items}>\n              {passwords.map(({ id, description, passwordGenerated, socialMedia }: PasswordI) => (\n                <PasswordItem\n                  key={id}\n                  passwordId={id}\n                  passwordGenerated={passwordGenerated}\n                  socialMedia={socialMedia}\n                  description={description}\n                  navigation={navigation}\n                />\n              ))}\n            </View>\n          </ScrollView>\n          <FAB\n            style={[styles.fab, { bottom: snackbarVisible ? 40 : 0 }]}\n            color={appColors.textTint}\n            visible={!scrollIsClose2Bottom}\n            icon='plus'\n            onPress={handleOnPressFAB}\n          />\n          <CustomSnackbar\n            message={snackbarMessage}\n            isSnackbarVisible={snackbarVisible}\n            onDismiss={handleOnDismissSnackbar}\n          />\n          <Modal\n            visible={modalVisible}\n            toggle={handleModalToggle}\n            onSubmit={handleModalOnSubmit}\n            title={modalTitle}\n            message={modalMessage}\n            okButtonMessage='Yes'\n            cancelButtonMessage='No'\n          />\n        </View>\n      )}\n    </>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import { StyleSheet, Platform } from 'react-native';\n\nexport const imageBackground = StyleSheet.create({\n  container: {\n    width: undefined,\n    padding: 16,\n    paddingTop: 48,\n  },\n  name: {\n    marginTop: 60,\n    paddingHorizontal: 5,\n    color: '#F0F0F0',\n    backgroundColor: 'rgba(48, 145, 224, 0.6)',\n    borderRadius: 5,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textShadowColor: '#000',\n    textShadowOffset: { width: 5, height: 5 },\n    textShadowRadius: 10,\n  },\n});\n\nexport const divider = StyleSheet.create({\n  divider: {\n    marginHorizontal: 20,\n    marginTop: 40,\n    marginBottom: 20,\n    backgroundColor: '#464646',\n  },\n});\n\nexport const signout = StyleSheet.create({\n  container: {\n    backgroundColor: '#F3BBBB',\n    borderRadius: 5,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    marginHorizontal: 10,\n    paddingVertical: 15,\n    paddingLeft: Platform.OS === 'web' ? 19 : 17,\n  },\n  icon: {\n    marginRight: 32,\n  },\n  text: {\n    color: '#F11D1D',\n  },\n});\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport { Text, ScrollView, ImageBackground } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Drawer } from 'react-native-paper';\nimport { MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { selectUserEmail } from 'reduxStore/slices/userSlice';\nimport { unsetPasswords, setIsCreateMode } from 'reduxStore/slices/passwordSlice';\n\nimport { signOut } from 'services/firebase';\n\n// eslint-disable-next-line import/no-unresolved\nimport { DrawerDescriptorMap } from '@react-navigation/drawer/lib/typescript/src/types';\nimport { DrawerNavigationState, ParamListBase } from '@react-navigation/routers';\nimport { imageBackground } from './styles';\n\nexport const CustomSidebar = (props: Props) => {\n  const userEmail = useSelector(selectUserEmail);\n  const name = userEmail ? userEmail.substring(0, userEmail.indexOf('@')) : '';\n  const userName = name.charAt(0).toUpperCase() + name.slice(1);\n  const { navigation } = props;\n  const dispatch = useDispatch();\n\n  const handleSignOut = () => {\n    signOut().then(() => {\n      dispatch(unsetPasswords());\n      navigation.replace('Login');\n    });\n  };\n\n  return (\n    <SafeAreaProvider>\n      <ImageBackground\n        source={require('assets/img/sidebar-banner.png')}\n        style={imageBackground.container}\n      >\n        <Text style={imageBackground.name}>Hi there, {userName} !</Text>\n      </ImageBackground>\n      <Drawer.Section title='Pages'>\n        <ScrollView style={{ paddingTop: 10 }}>\n          <DrawerItemList {...props} />\n          <DrawerItem\n            label='Password Generator'\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons name='engine-outline' size={size * 0.75} color={color} />\n            )}\n            onPress={() => {\n              navigation.closeDrawer();\n              dispatch(setIsCreateMode({ isCreateMode: true }));\n              navigation.navigate('PasswordGenerator');\n            }}\n          />\n        </ScrollView>\n      </Drawer.Section>\n\n      <Drawer.Section>\n        <DrawerItem\n          icon={({ color, size }) => (\n            <MaterialIcons name='logout' size={size * 0.75} color={color} />\n          )}\n          label='Sign out'\n          onPress={handleSignOut}\n        />\n      </Drawer.Section>\n    </SafeAreaProvider>\n  );\n};\n\ninterface Props {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: any;\n  descriptors: DrawerDescriptorMap;\n}\n","import React from 'react';\n\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport { PasswordList } from 'screens/PasswordList/passwordList';\nimport { CustomSidebar } from 'components/CustomSidebar/customSidebar';\n\nimport { Feather } from '@expo/vector-icons';\nimport { Dimensions } from 'react-native';\n\nconst CustomDrawer = createDrawerNavigator();\n\nexport const Drawer = () => (\n  <CustomDrawer.Navigator\n    screenOptions={{\n      drawerStyle: {\n        width: Dimensions.get('window').width * 0.7,\n      },\n      drawerActiveBackgroundColor: '#9ac8fc',\n      drawerActiveTintColor: '#3091e0',\n      drawerItemStyle: {\n        borderRadius: 5,\n      },\n    }}\n    drawerContent={(props) => <CustomSidebar {...props} />}\n  >\n    <CustomDrawer.Screen\n      name='PasswordList'\n      component={PasswordList}\n      options={{\n        title: 'Password List',\n        headerStyle: {\n          backgroundColor: '#3091e0',\n        },\n        headerTintColor: '#FFF',\n        drawerIcon: ({ color, size }) => <Feather name='list' size={size * 0.75} color={color} />,\n      }}\n    />\n  </CustomDrawer.Navigator>\n);\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 10,\n  },\n\n  image: {\n    flex: 0.7,\n    borderRadius: 3,\n    justifyContent: 'center',\n  },\n\n  title: {\n    fontWeight: 'bold',\n    fontSize: 25,\n    marginBottom: 5,\n    color: appColors.primaryDark,\n    textAlign: 'center',\n  },\n\n  description: {\n    fontSize: 14,\n    color: 'grey',\n    textAlign: 'center',\n    paddingHorizontal: 64,\n  },\n});\n","import { Image, Text, useWindowDimensions, View } from 'react-native';\nimport React from 'react';\n\nimport { styles } from './styles';\n\nexport const OnBoardingItem = ({ item }: Props) => {\n  const { title, description, image } = item;\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={[styles.container, { width }]}>\n      <Image\n        source={{\n          uri: image,\n        }}\n        style={[styles.image, { width, resizeMode: 'contain' }]}\n      />\n\n      <View style={{ flex: 0.3, marginTop: 15, paddingTop: 5, paddingHorizontal: 8 }}>\n        <Text style={styles.title}>{title}</Text>\n        <Text style={styles.description}>{description}</Text>\n      </View>\n    </View>\n  );\n};\n\ninterface Props {\n  item: { id: number; title: string; description: string; image: string };\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    height: 15,\n    marginVertical: 5,\n    marginBottom: 10,\n  },\n\n  dot: {\n    height: 10,\n    borderRadius: 10,\n    backgroundColor: appColors.primaryDark,\n    marginHorizontal: 8,\n  },\n});\n","import React from 'react';\nimport { View, Animated, useWindowDimensions } from 'react-native';\n\nimport { styles } from './styles';\n\nexport function Paginator({ data, scrollX }: Props) {\n  const { width } = useWindowDimensions();\n\n  return (\n    <View style={styles.container}>\n      {data.map((_: any, i: number) => {\n        const inputRange = [(i - 1) * width, i * width, (i + 1) * width];\n        const dotWidth = scrollX.interpolate({\n          inputRange,\n          outputRange: [10, 20, 10],\n          extrapolate: 'clamp',\n        });\n        const opacity = scrollX.interpolate({\n          inputRange,\n          outputRange: [0.3, 1, 0.3],\n          extrapolate: 'clamp',\n        });\n\n        return <Animated.View key={i} style={[styles.dot, { width: dotWidth, opacity }]} />;\n      })}\n    </View>\n  );\n}\n\ninterface Props {\n  data: any;\n  scrollX: any;\n}\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nexport const styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n\n  button: {\n    position: 'absolute',\n    backgroundColor: appColors.primary,\n    borderRadius: 100,\n    padding: 15,\n  },\n});\n","import React, { useEffect, useRef } from 'react';\nimport { View, TouchableOpacity, Animated } from 'react-native';\nimport Svg, { G, Circle } from 'react-native-svg';\nimport { AntDesign } from '@expo/vector-icons';\nimport { appColors } from 'utils/constants';\n\nimport { styles } from './styles';\n\nexport const NextButton = ({ scrollTo, percentage }: Props) => {\n  const size = 80;\n  const strokeWidth = 2;\n  const center = size / 2;\n  const radius = size / 2 - strokeWidth / 2;\n  const circumference = 2 * Math.PI * radius;\n\n  const progressAnimation = useRef(new Animated.Value(0)).current;\n  const progressRef = useRef(null);\n\n  const animation = (toValue: any) =>\n    Animated.timing(progressAnimation, {\n      toValue,\n      duration: 250,\n      useNativeDriver: true,\n    }).start();\n\n  useEffect(() => {\n    animation(percentage);\n  }, [percentage]);\n\n  useEffect(() => {\n    progressAnimation.addListener(\n      (value) => {\n        const strokeDashoffset = circumference - (circumference * value.value) / 100;\n\n        if (progressRef?.current) {\n          // @ts-ignore\n          progressRef.current.setNativeProps({\n            strokeDashoffset,\n          });\n        }\n      },\n      // @ts-ignore\n      [percentage]\n    );\n\n    return () => {\n      progressAnimation.removeAllListeners();\n    };\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <Svg width={size} height={size}>\n        <G rotation='-90' origin={center}>\n          <Circle\n            stroke={appColors.maximumTintColorSlider}\n            cx={center}\n            cy={center}\n            r={radius}\n            strokeWidth={strokeWidth}\n          />\n          <Circle\n            ref={progressRef}\n            stroke={appColors.primaryDark}\n            cx={center}\n            cy={center}\n            r={radius}\n            strokeWidth={strokeWidth}\n            strokeDasharray={circumference}\n            // strokeDashoffset={circumference - (circumference * 100) / 100}\n          />\n        </G>\n      </Svg>\n      <TouchableOpacity style={styles.button} activeOpacity={0.6} onPress={scrollTo}>\n        <AntDesign name='arrowright' size={20} color='#FFF' />\n      </TouchableOpacity>\n    </View>\n  );\n};\n\ninterface Props {\n  scrollTo: any;\n  percentage: any;\n}\n","import { FIREBASE_STORAGE_BUCKET, FIREBASE_STORAGE_URL, imagesTokens } from 'utils/constants';\n\nconst {\n  FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN,\n  FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN,\n} = imagesTokens;\nconst FIREBASE_STORAGE_FINAL_URL = `${FIREBASE_STORAGE_URL}/v0/b/${FIREBASE_STORAGE_BUCKET}/o`;\n\nexport const slides = [\n  {\n    id: 1,\n    title: 'Welcome to Passvault!',\n    description: 'The main goal of this app is to generate secure and configurable passwords',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/welcome.png?alt=media&token=${FIREBASE_FIRESTORAGE_WELCOME_IMAGE_TOKEN}`,\n  },\n  {\n    id: 2,\n    title: 'Password Generator',\n    description: 'Configure and generate a password is very simple!',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password_generator.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_GENERATOR_IMAGE_TOKEN}`,\n  },\n  {\n    id: 3,\n    title: 'Storing Generated Passwords',\n    description: 'Optionally you can enroll up and store many generated passwords',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/sign-up.png?alt=media&token=${FIREBASE_FIRESTORAGE_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 4,\n    title: 'Signup is very easy!',\n    description:\n      \"No passwords required, duh! you only need a username with more than 6 characters for signup and login. That's it!\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/easy-signup.gif?alt=media&token=${FIREBASE_FIRESTORAGE_EASY_SIGNUP_IMAGE_TOKEN}`,\n  },\n  {\n    id: 5,\n    title: 'Free to use',\n    description:\n      \"If you don't feel comfortable creating an account, you can still generate passwords but those wont't be stored\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/free-to-use.png?alt=media&token=${FIREBASE_FIRESTORAGE_FREE2USE_IMAGE_TOKEN}`,\n  },\n  {\n    id: 6,\n    title: 'Check your Generated Passwords listed',\n    description:\n      \"If you're an authenticated user all your passwords will be listed (latest listed first), and navigate with a sidebar menu\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/passwords-listed.png?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORDS_LISTED_IMAGE_TOKEN}`,\n  },\n  {\n    id: 7,\n    title: 'Update your existing passwords',\n    description:\n      'In order to avoid to create more entries, you can update an existing password and save the changes',\n    image: `${FIREBASE_STORAGE_FINAL_URL}/password-edit.gif?alt=media&token=${FIREBASE_FIRESTORAGE_PASSWORD_EDIT_IMAGE_TOKEN}`,\n  },\n  {\n    id: 8,\n    title: \"Let's go with it!\",\n    description: \"Now we're ready to start to use Passvault!\",\n    image: `${FIREBASE_STORAGE_FINAL_URL}/onboarding-completed.png?alt=media&token=${FIREBASE_FIRESTORAGE_ONBOARDING_COMPLETE_IMAGE_TOKEN}`,\n  },\n];\n","import React, { useRef, useState } from 'react';\nimport { View, StyleSheet, FlatList, Animated } from 'react-native';\nimport { OnBoardingItem } from 'components/OnBoarding/OnBoardingItem/onBoardingItem';\nimport { Paginator } from 'components/OnBoarding/Paginator/paginator';\nimport { NextButton } from 'components/OnBoarding/NextButton/nextButton';\nimport { setOnBoardingViewed } from 'utils/localStorageFuncs';\nimport { slides } from './slides';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport const OnBoarding = ({ navigation }: Props) => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const scrollX = useRef(new Animated.Value(0)).current;\n  const slidesRef = useRef(null);\n\n  const viewableItemsChanged = useRef((item: { viewableItems: any }) => {\n    const { viewableItems } = item;\n    setCurrentIndex(viewableItems[0].index);\n  }).current;\n\n  const viewConfig = useRef({ viewAreaCoveragePercentThreshold: 50 }).current;\n\n  const scrollTo = () => {\n    if (currentIndex < slides.length - 1) {\n      // @ts-ignore\n      slidesRef.current.scrollToIndex({ index: currentIndex + 1 });\n    } else {\n      setOnBoardingViewed('true');\n      navigation.replace('Login');\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={{ flex: 1 }}>\n        <FlatList\n          ref={slidesRef}\n          data={slides}\n          renderItem={({ item }) => <OnBoardingItem item={item} />}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          pagingEnabled\n          bounces={false}\n          keyExtractor={(item) => `${item.id}`}\n          onScroll={Animated.event([{ nativeEvent: { contentOffset: { x: scrollX } } }], {\n            useNativeDriver: false,\n          })}\n          onViewableItemsChanged={viewableItemsChanged}\n          viewabilityConfig={viewConfig}\n        />\n      </View>\n      <Paginator data={slides} scrollX={scrollX} />\n      <NextButton scrollTo={scrollTo} percentage={(currentIndex + 1) * (100 / slides.length)} />\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import { Platform, StyleSheet } from 'react-native';\n\nconst borderWidth = 4;\n\nexport const styles = StyleSheet.create({\n  sliderContainer: {\n    width: Platform.OS === 'web' ? '85%' : '80%',\n    paddingVertical: 10,\n    paddingLeft: 10,\n    flexDirection: 'column',\n  },\n});\n\nexport const trackMarkStyles = StyleSheet.create({\n  activeMark: {\n    borderColor: 'red',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n  inactiveMark: {\n    borderColor: 'grey',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { generatePassword, selectPasswordPicked, setLength } from 'reduxStore/slices/passwordSlice';\n\nimport { View } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport { appColors } from 'utils/constants';\nimport { styles } from './styles';\n\n// Reference: https://youtu.be/MwSudWtT7ps?t=271\n\nconst SliderContainer = ({ defaultValue }: Props) => {\n  const [value, setValue] = useState(defaultValue);\n  const passwordPicked = useSelector(selectPasswordPicked);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!Number.isNaN(value) && !passwordPicked) {\n      // TODO: This flow needs to be updated in future\n      /* If there was a password picked for the edit flow\n       * a new password won't be generated.\n       * */\n      dispatch(setLength({ length: value }));\n      dispatch(generatePassword());\n    }\n  }, [value]);\n\n  return (\n    <View style={styles.sliderContainer}>\n      <Slider\n        step={1}\n        value={defaultValue}\n        minimumValue={6}\n        maximumValue={50}\n        minimumTrackTintColor={appColors.primary}\n        maximumTrackTintColor={appColors.maximumTintColorSlider}\n        thumbTintColor={appColors.primary}\n        onValueChange={setValue}\n      />\n    </View>\n  );\n};\n\nexport default SliderContainer;\n\ninterface Props {\n  defaultValue: number;\n}\n","import React from 'react';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nexport const CustomCheckBox = ({ label, isChecked, disabled, color, onPress }: Props) => (\n  <TouchableOpacity\n    disabled={disabled}\n    style={{ flexDirection: 'row', alignItems: 'center' }}\n    onPress={onPress}\n  >\n    <Checkbox\n      style={{ margin: 8 }}\n      value={isChecked}\n      disabled={disabled}\n      color={isChecked ? color : undefined}\n    />\n    <Text style={{ fontSize: 14, opacity: !disabled ? 1 : 0.3 }}>{label}</Text>\n  </TouchableOpacity>\n);\n\nconst defaultProps = {\n  disabled: false,\n};\n\ninterface Props {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  color: string;\n  onPress: any;\n}\n\nCustomCheckBox.defaultProps = defaultProps;\n","import { generatePassword, resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { infoMessages } from 'utils/constants';\n\n/* Password Generator utils */\nexport const resetConfigurationState = (dispatch: any) => {\n  dispatch(resetPasswordGeneratorState());\n};\n\nexport const handleGeneratePassword = (passwordFromState: string, dispatch: any) => {\n  if (!passwordFromState) {\n    dispatch(generatePassword());\n  }\n};\n\nexport const showAuthenticatedMessage = (userId: string, isCreatedMode: boolean) => {\n  if (userId && isCreatedMode) {\n    showInfoMessage(infoMessages.about2CreatePassword);\n  }\n};\n\n/* Password Generator Configurator utils */\nexport const handleLeftCheckboxes = (\n  dispatch: any,\n  setCheck1: any,\n  setCheck2: any,\n  selector1: string,\n  selector2: string,\n  value: boolean,\n  handleOtherCheckboxes: any\n) => {\n  const payloadString1 = `{ \"${selector1}\": ${value} }`;\n  const payloadString2 = `{ \"${selector2}\": ${!value} }`;\n  const payload1 = JSON.parse(payloadString1);\n  const payload2 = JSON.parse(payloadString2);\n\n  dispatch(setCheck1(payload1));\n  dispatch(setCheck2(payload2));\n\n  handleOtherCheckboxes();\n};\n\nexport const handleRightCheckboxes = (\n  value: boolean,\n  checkbox1: boolean,\n  checkbox2: boolean,\n  checkbox3: boolean,\n  dispatch: any,\n  configuratorAction: any,\n  payload: object\n) => {\n  if (checkbox1 || checkbox2 || checkbox3) {\n    dispatch(configuratorAction(payload));\n  }\n};\n\nexport const updateConfiguratorStateAndGeneratePassword = (dispatch: any) => {\n  dispatch(generatePassword());\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { View } from 'react-native';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { checkBox } from 'screens/PasswordGenerator/styles';\nimport {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n  selectIsEasy2Read,\n  selectIsAllChar,\n  selectIsUpperCase,\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n} from 'reduxStore/slices/configuratorSlice';\nimport { generatePassword } from 'reduxStore/slices/passwordSlice';\n\nimport {\n  handleLeftCheckboxes,\n  handleRightCheckboxes,\n  updateConfiguratorStateAndGeneratePassword,\n} from 'utils/configuratorUtils';\nimport { appColors } from 'utils/constants';\n\n/* Reference for checkbox usage: [\n  https://docs.expo.dev/versions/latest/sdk/checkbox/,\n  https://snack.expo.dev/\n]\n */\n\nexport const PasswordConfigurator = () => {\n  const dispatch = useDispatch();\n\n  const isEasy2Read = useSelector(selectIsEasy2Read);\n  const isAllChar = useSelector(selectIsAllChar);\n\n  const isUpperCase = useSelector(selectIsUpperCase);\n  const isLowerCase = useSelector(selectIsLowerCase);\n  const isNumbers = useSelector(selectIsNumbers);\n  const isSymbols = useSelector(selectIsSymbols);\n\n  const handleRightCheckboxesGivenLeftCheckboxes = () => {\n    dispatch(setIsUpperCaseAndIsLowerCase({ isUpperCase: true, isLowerCase: true }));\n\n    if (!isEasy2Read || isAllChar) {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: false, isSymbols: false }));\n    } else {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: true, isSymbols: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  return (\n    <View style={checkBox.container}>\n      {/* Left checkboxes */}\n      <View style={{ flexDirection: 'column', marginLeft: -20 }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Easy to read'\n            isChecked={isEasy2Read}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsEasy2Read,\n                setIsAllChar,\n                'isEasy2Read',\n                'isAllChar',\n                !isEasy2Read,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='All characters'\n            isChecked={isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsAllChar,\n                setIsEasy2Read,\n                'isAllChar',\n                'isEasy2Read',\n                !isAllChar,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n      </View>\n\n      {/* Right checkboxes */}\n      <View style={{ flexDirection: 'column' }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Uppercase'\n            isChecked={isUpperCase}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isUpperCase,\n                isLowerCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsUpperCase,\n                { isUpperCase: !isUpperCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Lowercase'\n            isChecked={isLowerCase}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isLowerCase,\n                isUpperCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsLowerCase,\n                { isLowerCase: !isLowerCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Numbers'\n            isChecked={isNumbers}\n            disabled={!isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isNumbers,\n                isUpperCase,\n                isLowerCase,\n                isSymbols,\n                dispatch,\n                setIsNumbers,\n                {\n                  isNumbers: !isNumbers,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label='Symbols'\n            isChecked={isSymbols}\n            disabled={!isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isSymbols,\n                isUpperCase,\n                isLowerCase,\n                isNumbers,\n                dispatch,\n                setIsSymbols,\n                {\n                  isSymbols: !isSymbols,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch);\n            }}\n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const createEditPassword = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n\n  userInputContainer: {\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: 10,\n    marginBottom: 5,\n  },\n\n  textInput: {\n    borderWidth: 1,\n    borderRadius: 10,\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n    marginBottom: 5,\n  },\n\n  dropdown: {\n    borderRadius: 10,\n    backgroundColor: 'white',\n    paddingHorizontal: Platform.OS === 'web' ? 7 : 8,\n    paddingVertical: Platform.OS === 'web' ? 6 : 3,\n  },\n\n  textLabel: { fontSize: 17, marginRight: 5, marginBottom: 5 },\n\n  descriptionLengthIndicator: {\n    fontSize: 12,\n    alignSelf: 'flex-end',\n  },\n\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  savePassword2Firebase,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordDescriptionPicked,\n  selectPasswordIdPicked,\n  setPasswordIdPicked,\n  setPasswordDescriptionPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport {\n  getSocialMediaListFromFirebase,\n  selectSocialMediaList,\n  selectSocialMediaPicked,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\n\nimport { Picker, Text, TextInput, View } from 'react-native';\nimport { Entypo } from '@expo/vector-icons';\n\nimport { cardView, shadow } from 'screens/PasswordGenerator/styles';\nimport { appColors, defaultEmptyPasswordDescription } from 'utils/constants';\nimport { socialMediaCollection } from 'services/firebase';\nimport { setModalMessage, setModalTitle, setModalVisible } from 'reduxStore/slices/uiElementsSlice';\nimport { createEditPassword } from './styles';\n\nexport const CreateEditPasswordConfigurator = ({ navigation }: Props) => {\n  const dispatch = useDispatch();\n  const passwordDescriptionMaxLen = 60;\n  const [description, setDescription] = useState('');\n\n  const socialMediaPicked = useSelector(selectSocialMediaPicked);\n  const passwordDescriptionPicked = useSelector(selectPasswordDescriptionPicked);\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordIdPicked = useSelector(selectPasswordIdPicked);\n  const password = useSelector(selectPassword);\n\n  const createEditButtonLabel = isCreateMode ? 'Save' : 'Edit';\n\n  useEffect(() => {\n    if (isCreateMode || isEditMode) {\n      if (isEditMode) {\n        setDescription(\n          passwordDescriptionPicked !== defaultEmptyPasswordDescription\n            ? passwordDescriptionPicked\n            : ''\n        );\n      }\n\n      socialMediaCollection.onSnapshot(() => {\n        dispatch(getSocialMediaListFromFirebase());\n      });\n    }\n  }, []);\n\n  const handleCreateEditButton = () => {\n    if (socialMediaPicked !== '') {\n      const data = {\n        password,\n        description,\n        socialMedia: socialMediaPicked,\n      };\n      if (isEditMode) {\n        dispatch(setPasswordDescriptionPicked({ passwordDescriptionPicked: description }));\n        dispatch(setPasswordIdPicked({ passwordIdPicked }));\n        dispatch(setModalTitle({ modalTitle: 'Edit password warning !' }));\n        dispatch(\n          setModalMessage({\n            modalMessage: \"If you update this password, you won't be able to recover it.\",\n          })\n        );\n        dispatch(setModalVisible({ modalVisible: true }));\n      } else {\n        dispatch(savePassword2Firebase(data));\n        navigation.navigate('PasswordList');\n      }\n    }\n  };\n\n  return (\n    <View style={[cardView.container, shadow.container, createEditPassword.container]}>\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Social media:</Text>\n        <Picker\n          // ref={pickerRef}\n          style={createEditPassword.dropdown}\n          selectedValue={socialMediaPicked}\n          onValueChange={(itemValue) => {\n            dispatch(setSocialMediaPicked({ socialMediaPicked: itemValue }));\n          }}\n        >\n          {socialMediaList.map((item: { id: string; name: string }) => {\n            const label = item.name.charAt(0).toUpperCase() + item.name.slice(1);\n            return <Picker.Item key={item.id} label={label} value={item.name} />;\n          })}\n        </Picker>\n      </View>\n\n      <View style={createEditPassword.userInputContainer}>\n        <Text style={createEditPassword.textLabel}>Description:</Text>\n        <TextInput\n          style={createEditPassword.textInput}\n          placeholder='Type in here...'\n          maxLength={passwordDescriptionMaxLen}\n          value={description}\n          onChangeText={(text: string) => setDescription(text)}\n        />\n        <Text style={createEditPassword.descriptionLengthIndicator}>\n          {description.length}/{passwordDescriptionMaxLen}\n        </Text>\n      </View>\n\n      <Entypo.Button\n        style={createEditPassword.button}\n        name={isCreateMode ? 'save' : 'edit'}\n        size={24}\n        color={appColors.textTint}\n        backgroundColor={appColors.primary}\n        onPress={handleCreateEditButton}\n      >\n        {createEditButtonLabel}\n      </Entypo.Button>\n    </View>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import React, { useEffect, useState, useLayoutEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  generatePassword,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport {\n  resetSnackbar,\n  selectSnackbarMessage,\n  selectSnackbarVisible,\n  setSnackbarMessage,\n  setSnackbarVisible,\n} from 'reduxStore/slices/uiElementsSlice';\n\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Clipboard,\n  BackHandler,\n  Platform,\n  ScrollView,\n  Keyboard,\n} from 'react-native';\nimport { Divider } from 'react-native-paper';\n\nimport SliderContainer from 'components/SliderContainer/sliderContainer';\nimport { PasswordConfigurator } from 'components/PasswordConfigurator/passwordConfigurator';\nimport { CreateEditPasswordConfigurator } from 'components/CreateEditPasswordConfigurator/createEditPasswordConfigurator';\n\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\nimport { getPasswordGenerated } from 'utils/localStorageFuncs';\nimport { infoMessages } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport {\n  resetConfigurationState,\n  handleGeneratePassword,\n  showAuthenticatedMessage,\n} from 'utils/configuratorUtils';\nimport { cardView, shadow, screen, passwordStyle, configuration } from './styles';\n\nexport const PasswordGenerator = ({ navigation }: Props) => {\n  const scrollViewRef = useRef();\n  const [isKeyboardVisible, setKeyboardVisible] = useState(false);\n\n  const snackbarMessage = useSelector(selectSnackbarMessage);\n  const snackbarVisible = useSelector(selectSnackbarVisible);\n\n  const passwordFromState = useSelector(selectPassword);\n\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n\n  const userId = useSelector(selectUserId);\n\n  const screenTitle = isEditMode\n    ? 'Password Edit'\n    : `Password Generator ${!userId ? '(Only)' : ''}`;\n\n  const dispatch = useDispatch();\n\n  const mHandleGeneratePassword = () => {\n    handleGeneratePassword(passwordFromState, dispatch);\n  };\n\n  const handleCopyButton = () => {\n    getPasswordGenerated()\n      .then((password: any | string) => {\n        const password2Clipboard = isEditMode ? passwordFromState : password.password;\n\n        if (Platform.OS === 'android') {\n          showInfoMessage(infoMessages.copied2Clipboard);\n        } else {\n          dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.copied2Clipboard }));\n          dispatch(setSnackbarVisible({ snackbarVisible: true }));\n        }\n\n        Clipboard.setString(password2Clipboard);\n      })\n      .catch((err: any) => {\n        // eslint-disable-next-line no-console\n        console.log({ err });\n        Clipboard.setString('');\n      });\n  };\n\n  const handleRefreshButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.newPassword);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.newPassword }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const handleBackAction = () => {\n    resetConfigurationState(dispatch);\n    navigation.navigate(userId ? 'PasswordList' : 'Login');\n    return true;\n  };\n\n  const handleOnDismissSnackbar = () => {\n    dispatch(resetSnackbar());\n  };\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n\n    if (Platform.OS === 'android') {\n      showAuthenticatedMessage(userId, isCreateMode);\n    } else {\n      dispatch(setSnackbarMessage({ snackbarMessage: infoMessages.about2CreatePassword }));\n      dispatch(setSnackbarVisible({ snackbarVisible: true }));\n    }\n\n    const keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', () => {\n      setKeyboardVisible(true);\n    });\n    const keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', () => {\n      setKeyboardVisible(false);\n    });\n\n    return () => {\n      resetConfigurationState(dispatch);\n      keyboardDidHideListener.remove();\n      keyboardDidShowListener.remove();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isKeyboardVisible) {\n      // @ts-ignore\n      scrollViewRef.current.scrollToEnd({ animating: true });\n    }\n  }, [isKeyboardVisible]);\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: screenTitle,\n    });\n  });\n\n  return (\n    <>\n      {/* @ts-ignore */}\n      <ScrollView ref={scrollViewRef}>\n        <View style={screen.container}>\n          <View style={[cardView.container, passwordStyle.container, shadow.container]}>\n            <View style={passwordStyle.inputContainer}>\n              <TextInput\n                showSoftInputOnFocus={false}\n                caretHidden\n                style={passwordStyle.input}\n                value={passwordFromState}\n              />\n              <View style={passwordStyle.icons}>\n                <TouchableOpacity onPress={handleCopyButton}>\n                  <MaterialCommunityIcons\n                    style={{ marginRight: 10 }}\n                    name='content-copy'\n                    size={24}\n                    color='grey'\n                  />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={handleRefreshButton}>\n                  <Ionicons name='reload' size={24} color='grey' />\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n\n          <View style={[cardView.container, configuration.container, shadow.container]}>\n            <View style={configuration.textContainer}>\n              <Text style={configuration.textHeader}>Configure your password</Text>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <View style={configuration.passwordLengthContainer}>\n              <Text style={{ fontSize: 17 }}>Password length</Text>\n              <View style={configuration.lengthSliderContainer}>\n                <TextInput\n                  showSoftInputOnFocus={false}\n                  caretHidden\n                  style={configuration.inputLength}\n                  keyboardType='numeric'\n                  value={passwordFromState.length.toString()}\n                />\n                <SliderContainer\n                  defaultValue={isEditMode ? passwordFromState.length : 10}\n                  handleGeneratePassword={mHandleGeneratePassword}\n                />\n              </View>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <PasswordConfigurator />\n          </View>\n\n          {(isCreateMode || isEditMode) && (\n            <CreateEditPasswordConfigurator navigation={navigation} />\n          )}\n        </View>\n      </ScrollView>\n\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={snackbarVisible}\n        onDismiss={handleOnDismissSnackbar}\n      />\n    </>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import { Dimensions, StyleSheet } from 'react-native';\n\nexport const popoverStyles = StyleSheet.create({\n  content: {\n    width: Dimensions.get('screen').width * 0.45,\n    padding: 16,\n    backgroundColor: 'white',\n    borderRadius: 8,\n  },\n  arrow: {\n    borderTopColor: 'white',\n  },\n  background: {\n    backgroundColor: 'rgba(66,66,66,0.5)',\n  },\n});\n","import React from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\nimport { Popover } from 'react-native-modal-popover';\nimport { Feather } from '@expo/vector-icons';\n\nimport { popoverMessage } from 'utils/constants';\nimport { popoverStyles } from './styles';\n\nexport const CustomPopover = ({\n  popoverVisible,\n  closePopover,\n  popoverAnchorRect,\n  touchableRef,\n  onPress,\n}: Props) => (\n  <>\n    <TouchableOpacity ref={touchableRef} onPress={onPress}>\n      <Feather name='info' size={20} color='black' />\n    </TouchableOpacity>\n    <Popover\n      contentStyle={popoverStyles.content}\n      arrowStyle={popoverStyles.arrow}\n      backgroundStyle={popoverStyles.background}\n      visible={popoverVisible}\n      onClose={closePopover}\n      fromRect={popoverAnchorRect}\n      placement='top'\n      supportedOrientations={['portrait', 'landscape']}\n    >\n      <Text>{popoverMessage}</Text>\n    </Popover>\n  </>\n);\n\ninterface Props {\n  popoverVisible: boolean;\n  closePopover: any;\n  popoverAnchorRect: any;\n  touchableRef: any;\n  onPress: any;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectRequest,\n  setIsRequest,\n  unsetIsRequest,\n} from 'reduxStore/slices/applicationStatusSlice';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { Image, Text, TextInput, View, TouchableOpacity } from 'react-native';\nimport { usePopover } from 'react-native-modal-popover';\n\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomPopover } from 'components/Popover/popover';\nimport { shadow } from 'screens/PasswordGenerator/styles';\n\nimport { auth, signIn } from 'services/firebase';\n\nimport styles from './styles';\n\n// Reference for popover: https://github.com/eveningkid/react-native-popable\n\nexport const Login = ({ navigation }: Props) => {\n  const [username, setUsername] = useState('');\n\n  const dispatch = useDispatch();\n  const isRequesting = useSelector(selectRequest);\n\n  const { openPopover, closePopover, popoverVisible, touchableRef, popoverAnchorRect } =\n    usePopover();\n\n  useEffect(() => {\n    dispatch(setIsRequest({ isRequest: true }));\n  }, []);\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          dispatch(unsetIsRequest());\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n          dispatch(unsetIsRequest());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleLogin = () => {\n    signIn(username);\n    setUsername('');\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n          <View style={styles.inputContainer}>\n            <TextInput\n              placeholder='Username'\n              value={username}\n              style={[styles.input, shadow.container]}\n              onChangeText={(text: string) => setUsername(text)}\n            />\n          </View>\n\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity onPress={handleLogin} style={styles.button}>\n              <Text style={styles.buttonText}>Login</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('SignUp');\n              }}\n              style={[styles.button, styles.buttonOutLine]}\n            >\n              <Text style={styles.buttonOutLineText}>Sign up</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.linkContainer}>\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('PasswordGenerator');\n              }}\n              style={styles.link}\n            >\n              <Text style={styles.linkText}>Use it without an account </Text>\n            </TouchableOpacity>\n\n            <CustomPopover\n              popoverVisible={popoverVisible}\n              closePopover={closePopover}\n              popoverAnchorRect={popoverAnchorRect}\n              touchableRef={touchableRef}\n              onPress={openPopover}\n            />\n          </View>\n        </View>\n      )}\n    </>\n  );\n};\n\ninterface Props {\n  navigation: any;\n}\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const screen = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    marginBottom: 5,\n  },\n});\n\nexport const shadow = StyleSheet.create({\n  container: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n});\n\nexport const cardView = StyleSheet.create({\n  container: {\n    width: '90%',\n    padding: 10,\n    backgroundColor: '#FFF',\n    borderRadius: 5,\n    marginBottom: 15,\n    justifyContent: 'center',\n  },\n});\n\nexport const passwordStyle = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  inputContainer: {\n    margin: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  input: {\n    width: Platform.OS === 'web' ? '85%' : '75%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    borderRadius: 10,\n    textAlign: 'left',\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 16 : 20,\n  },\n  icons: {\n    marginLeft: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n});\n\nexport const configuration = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  textContainer: {\n    margin: 10,\n    justifyContent: 'flex-start',\n  },\n  textHeader: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  passwordLengthContainer: {\n    padding: 10,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n  inputLength: {\n    width: Platform.OS === 'web' ? '15%' : '20%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 7,\n    paddingVertical: 10,\n    marginRight: 5,\n    borderRadius: 10,\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  lengthSliderContainer: {\n    padding: 10,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n});\n\nexport const checkBox = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around',\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nconst initialSnackbarState = {\n  snackbarMessage: '',\n  snackbarVisible: false,\n};\n\nconst initialModalState = {\n  modalTitle: '',\n  modalMessage: '',\n  modalVisible: false,\n};\n\nexport const uiElementsSlice = createSlice({\n  name: 'uiElements',\n  initialState,\n  reducers: {\n    // snackbar actions\n    setSnackbarMessage: (state, { payload }) => ({\n      ...state,\n      snackbarMessage: payload.snackbarMessage,\n    }),\n    setSnackbarVisible: (state, { payload }) => ({\n      ...state,\n      snackbarVisible: payload.snackbarVisible,\n    }),\n    resetSnackbar: (state) => ({\n      ...state,\n      ...initialSnackbarState,\n    }),\n\n    // modal actions\n    setModalTitle: (state, { payload }) => ({\n      ...state,\n      modalTitle: payload.modalTitle,\n    }),\n    setModalMessage: (state, { payload }) => ({\n      ...state,\n      modalMessage: payload.modalMessage,\n    }),\n    setModalVisible: (state, { payload }) => ({\n      ...state,\n      modalVisible: payload.modalVisible,\n    }),\n    resetModal: (state) => ({\n      ...state,\n      ...initialModalState,\n    }),\n  },\n});\n\nexport const {\n  setSnackbarMessage,\n  setSnackbarVisible,\n  resetSnackbar,\n  setModalTitle,\n  setModalMessage,\n  setModalVisible,\n  resetModal,\n} = uiElementsSlice.actions;\n\n// snackbar select\nexport const selectSnackbarMessage = (state: { uiElements: { snackbarMessage: any } }) =>\n  state.uiElements.snackbarMessage;\nexport const selectSnackbarVisible = (state: { uiElements: { snackbarVisible: any } }) =>\n  state.uiElements.snackbarVisible;\n\n// modal select\nexport const selectModalTitle = (state: { uiElements: { modalTitle: any } }) =>\n  state.uiElements.modalTitle;\nexport const selectModalMessage = (state: { uiElements: { modalMessage: any } }) =>\n  state.uiElements.modalMessage;\nexport const selectModalVisible = (state: { uiElements: { modalVisible: any } }) =>\n  state.uiElements.modalVisible;\n","module.exports = __webpack_public_path__ + \"static/media/amazon.4c033704.png\";","module.exports = __webpack_public_path__ + \"static/media/discord.17c0e41c.png\";","module.exports = __webpack_public_path__ + \"static/media/google.647ac848.png\";","module.exports = __webpack_public_path__ + \"static/media/slack.d9f7a674.png\";","module.exports = __webpack_public_path__ + \"static/media/okta.c20fa4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/outlook.217ab4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch.8e8dc9e1.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-banner.8c7d09ca.png\";","import { createSlice } from '@reduxjs/toolkit';\nimport { resetPasswordGeneratorState } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState: {\n  isEasy2Read: boolean;\n  isAllChar: boolean;\n  isUpperCase: boolean;\n  isLowerCase: boolean;\n  isNumbers: boolean;\n  isSymbols: boolean;\n} = {\n  isEasy2Read: true,\n  isAllChar: false,\n  isUpperCase: true,\n  isLowerCase: true,\n  isNumbers: false,\n  isSymbols: false,\n};\n\nconst resetPasswordConfiguratorState = (state: any) => ({\n  ...state,\n  ...initialState,\n});\n\nexport const configuratorSlice = createSlice({\n  name: 'configurator',\n  initialState,\n  reducers: {\n    setIsEasy2Read: (state, { payload }) => ({\n      ...state,\n      isEasy2Read: payload.isEasy2Read,\n    }),\n    setIsAllChar: (state, { payload }) => ({\n      ...state,\n      isAllChar: payload.isAllChar,\n    }),\n    setIsUpperCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n    }),\n    setIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbers: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n    }),\n    setIsSymbols: (state, { payload }) => ({\n      ...state,\n      isSymbols: payload.isSymbols,\n    }),\n    setIsUpperCaseAndIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbersAndIsSymbols: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n      isSymbols: payload.isSymbols,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(resetPasswordGeneratorState, (state) => resetPasswordConfiguratorState(state));\n  },\n});\n\nexport const {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n} = configuratorSlice.actions;\n\nexport const selectIsEasy2Read = (state: { configurator: { isEasy2Read: boolean } }) =>\n  state.configurator.isEasy2Read;\nexport const selectIsAllChar = (state: { configurator: { isAllChar: boolean } }) =>\n  state.configurator.isAllChar;\nexport const selectIsUpperCase = (state: { configurator: { isUpperCase: boolean } }) =>\n  state.configurator.isUpperCase;\nexport const selectIsLowerCase = (state: { configurator: { isLowerCase: boolean } }) =>\n  state.configurator.isLowerCase;\nexport const selectIsNumbers = (state: { configurator: { isNumbers: boolean } }) =>\n  state.configurator.isNumbers;\nexport const selectIsSymbols = (state: { configurator: { isSymbols: boolean } }) =>\n  state.configurator.isSymbols;\n","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  inputContainer: { width: '80%' },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginTop: 10,\n  },\n  buttonContainer: {\n    width: '60%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  button: {\n    backgroundColor: appColors.primary,\n    width: '70%',\n    padding: 10,\n    borderRadius: 10,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  buttonOutLine: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: appColors.primary,\n    borderWidth: 2,\n  },\n  buttonOutLineText: {\n    color: '#4F4F4F',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  loginImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n  tooltipImage: {},\n  linkContainer: {\n    width: '60%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  link: {\n    marginRight: 3,\n  },\n  linkText: {\n    fontSize: 15,\n  },\n});\n\nexport default styles;\n","// Import the functions you need from the SDKs you need\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { clearUserDataFromLS, setUserData2LS } from 'utils/localStorageFuncs';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n};\n\nconst appLength: number = firebase.apps.length;\n\nconst app = appLength === 0 ? firebase.initializeApp(firebaseConfig) : firebase.app();\nconst database = firebase.firestore(app);\n\nexport const auth = firebase.auth();\nexport const passwordsCollection = database.collection('passwords');\nexport const socialMediaCollection = database.collection('social_media');\n\nexport const signIn = (username: string) => {\n  auth\n    .signInWithEmailAndPassword(`${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      setUserData2LS(user?.uid, user?.email);\n    })\n    .catch((error) => {\n      alert(error.message);\n\n      // eslint-disable-next-line no-console\n      console.log({ exception: error.message });\n    });\n};\n\nexport const signOut = () =>\n  auth\n    .signOut()\n    .then(() => {\n      clearUserDataFromLS();\n    })\n    .catch((error) => {\n      // eslint-disable-next-line no-console\n      console.log({ exception: error.message });\n    });\n\nexport const signUp = (username: string) => {\n  auth\n    .createUserWithEmailAndPassword(`${username}@example.com`, username.toLowerCase())\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      // eslint-disable-next-line no-console\n      console.log({ user });\n    })\n    .catch((error) => {\n      alert(error.message);\n\n      // eslint-disable-next-line no-console\n      console.log({ exception: error.message });\n    });\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState = {\n  id: '',\n  email: '',\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUserData: (state, { payload }) => ({\n      ...state,\n      id: payload.id,\n      email: payload.email,\n    }),\n    unsetUserData: () => ({\n      ...initialState,\n    }),\n  },\n});\n\nexport const { setUserData, unsetUserData } = userSlice.actions;\n\nexport const selectUserId = (state: { user: { id: string } }) => state.user.id;\nexport const selectUserEmail = (state: { user: { email: string } }) => state.user.email;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState = {\n  isRequest: false,\n};\n\nexport const applicationStatusSlice = createSlice({\n  name: 'applicationStatus',\n  initialState,\n  reducers: {\n    setIsRequest: (state, { payload }) => ({\n      ...state,\n      isRequest: payload.isRequest,\n    }),\n    unsetIsRequest: () => ({\n      ...initialState,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPasswordsFromFirebase, (state) => ({\n        ...state,\n        isRequest: true,\n      }))\n      .addCase(setPasswords, (state) => ({\n        ...state,\n        isRequest: false,\n      }));\n  },\n});\n\nexport const { setIsRequest, unsetIsRequest } = applicationStatusSlice.actions;\n\nexport const selectRequest = (state: { applicationStatus: { isRequest: boolean } }) =>\n  state.applicationStatus.isRequest;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  socialMediaPicked: string;\n  socialMediaList: any;\n} = {\n  socialMediaPicked: '',\n  socialMediaList: [],\n};\n\nexport const socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState,\n  reducers: {\n    setSocialMediaPicked: (state, { payload }) => ({\n      ...state,\n      socialMediaPicked: payload.socialMediaPicked,\n    }),\n    setSocialMediaList: (state, { payload }) => ({\n      ...state,\n      socialMediaList: payload.socialMediaList,\n    }),\n    getSocialMediaListFromFirebase: () => {},\n  },\n});\n\nexport const { setSocialMediaPicked, setSocialMediaList, getSocialMediaListFromFirebase } =\n  socialMediaSlice.actions;\n\nexport const selectSocialMediaPicked = (state: { socialMedia: { socialMediaPicked: string } }) =>\n  state.socialMedia.socialMediaPicked;\nexport const selectSocialMediaList = (state: { socialMedia: { socialMediaList: string } }) =>\n  state.socialMedia.socialMediaList;\n"],"sourceRoot":""}