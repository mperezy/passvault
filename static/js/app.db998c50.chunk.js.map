{"version":3,"sources":["src/redux/slices/applicationStatusSlice.ts","src/components/PasswordConfigurator/CustomCheckBox/customCheckBox.tsx","src/utils/localStorageFuncs.ts","src/utils/infoMessages.ts","src/components/LoadingIndicator/loadingIndicator.tsx","src/components/PasswordToggle/passwordToggle.tsx","src/components/CustomSnackbar/customSnackbar.tsx","src/redux/slices/passwordSlice.ts","src/redux/sagas/passwordGeneratorSaga.ts","src/services/database.ts","src/redux/sagas/getPasswordsSaga.ts","src/redux/sagas/getSocialMediaSaga.ts","src/redux/sagas/savePasswordSaga.ts","src/redux/sagas/deletePasswordSaga.ts","src/redux/sagas/updatePassword.ts","src/redux/sagas/index.ts","src/redux/slices/rootReducer.ts","src/redux/store/index.ts","assets/main/passvault-512px.png","src/utils/constants.ts","App.tsx","src/screens/SignUp/signup.tsx","src/components/CustomStatusbar/customStatusbar.tsx","src/components/SocialMediaIcon/socialMediaIcon.tsx","src/utils/imageDataRetriever.ts","src/components/PasswordItem/styles.ts","src/components/PasswordIcons/passwordIcon.tsx","src/components/PasswordItem/passwordItem.tsx","src/screens/PasswordList/styles.ts","src/screens/PasswordList/passwordList.tsx","src/components/CustomSidebar/styles.ts","src/components/CustomSidebar/customSidebar.tsx","src/screens/Drawer/drawer.tsx","src/components/SliderContainer/styles.ts","src/components/SliderContainer/sliderContainer.tsx","src/utils/configuratorUtils.ts","src/components/PasswordConfigurator/passwordConfigurator.tsx","src/components/CreateEditPasswordConfigurator/styles.ts","src/components/CreateEditPasswordConfigurator/createEditPasswordConfigurator.tsx","src/screens/PasswordGenerator/passwordGenerator.tsx","src/components/Popover/styles.ts","src/components/Popover/popover.tsx","src/screens/Login/login.tsx","webpack:///./index.js?41f5","src/screens/PasswordGenerator/styles.ts","assets/amazon.png","assets/discord.png","assets/google.png","assets/slack.png","assets/okta.png","assets/outlook.png","assets/twitch.png","assets/img/sidebar-banner.png","src/screens/Login/styles.ts","src/redux/slices/configuratorSlice.ts","src/services/firebase.ts","src/redux/slices/userSlice.ts","src/redux/slices/socialMediaSlice.ts"],"names":["initialState","isRequest","applicationStatusSlice","createSlice","name","reducers","setIsRequest","state","payload","unsetIsRequest","extraReducers","builder","addCase","getPasswordsFromFirebase","setPasswords","actions","selectRequest","applicationStatus","CustomCheckBox","props","label","isChecked","disabled","color","onPress","style","flexDirection","alignItems","margin","value","undefined","fontSize","opacity","appName","isObject","storeData","key","a","async","finalValue","JSON","stringify","toString","AsyncStorage","setItem","console","log","asyncStorageException","getData","getItem","parse","removeItem","setUserData2LS","userId","email","then","data","setPasswordGenerated","password","getPasswordGenerated","empty","catch","err","clearUserDataFromLS","res","showInfoMessage","message","ToastAndroid","show","SHORT","styles","StyleSheet","create","container","flex","justifyContent","horizontal","padding","LoadingIndicator","size","PasswordToggle","hidePassword","action","marginTop","appColors","primary","CustomSnackbar","isSnackbarVisible","setSnackbarVisible","visible","onDismiss","duration","passwordIdPicked","passwordPicked","length","isCreateMode","isEditMode","passwords","passwordSlice","setPassword","setPasswordPicked","setPasswordIdPicked","setLength","setIsCreateMode","setIsEditMode","resetPasswordGeneratorState","resetPasswordState","unsetPasswords","generatePassword","savePassword2Firebase","deletePasswordFromFirebase","editPasswordFromFirebase","selectPassword","selectPasswordIdPicked","selectPasswordPicked","selectIsCreateMode","selectIsEditMode","selectPasswordLength","selectPasswords","getPasswordGeneratorFlow","select","selectIsUpperCase","isUpperCase","selectIsLowerCase","isLowerCase","selectIsNumbers","isNumbers","selectIsSymbols","isSymbols","isUpper","upper","isLower","lower","isNumber","number","isSymbol","symbols","all","i","charAt","Math","floor","random","put","exception","passwordGeneratorSaga","takeLeading","type","sortBy","obj1","obj2","field","kind","x","getPasswordsByUserId","passwordList","passwordsCollection","where","get","querySnapshot","forEach","doc","push","id","password_generated","social_media","createdAt","error","sort","y","sendPassword2Firebase","socialMedia","add","Date","getTime","uid","deletePasswordById","passwordId","delete","updatePasswordByIdFromFirebase","passwordGenerated","update","getSocialMedia","socialMediaList","socialMediaCollection","getPasswordsFlow","selectUserId","call","source","getPasswordsSaga","getSocialMediaFlow","selectSocialMediaPicked","socialMediaPicked","socialMediaSelected","setSocialMediaList","setSocialMediaPicked","getSocialMediaSaga","getSocialMediaListFromFirebase","savePasswordFlow","savePasswordSaga","deletePasswordFlow","deletePasswordSaga","updatePasswordFlow","updatePasswordSaga","IndexSagas","createRootReducer","combineReducers","user","userSlice","reducer","configurator","configuratorSlice","socialMediaSlice","sagaMiddleware","createSagaMiddleware","middleware","store","configureStore","run","module","exports","devWarnings","popoverMessage","infoMessages","copied2Clipboard","newPassword","about2CreatePassword","textTint","maximumTintColorSlider","activeTint","primaryDark","process","LogBox","ignoreLogs","window","Stack","createNativeStackNavigator","App","Navigator","Screen","component","Login","options","headerShown","SignUp","PasswordGenerator","headerStyle","backgroundColor","headerTintColor","Drawer","useState","username","setUsername","setHidePassword","dispatch","useDispatch","navigation","useEffect","auth","onAuthStateChanged","setUserData","replace","unsetUserData","loginImage","require","inputContainer","placeholder","input","shadow","onChangeText","text","secureTextEntry","buttonContainer","signUp","button","buttonText","linkContainer","navigate","link","linkText","CustomStatusbar","animated","barStyle","SocialMediaIcon","includes","imageSource","imageSourceRetriever","Image","socialMediaIcon","socialMediaColor","socialMediaIconColor","AntDesign","icons","singleIcon","marginRight","width","height","item","borderRadius","marginLeft","marginBottom","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","iconPasswordWrapper","fontFamily","Platform","OS","fontWeight","PasswordIcons","passwordVisible","setPasswordVisible","setSnackbarMessage","_socialMedia","toUpperCase","slice","View","TouchableOpacity","Entypo","Clipboard","setString","MaterialCommunityIcons","FontAwesome","Alert","alert","Ionicons","PasswordItem","TextInput","showSoftInputOnFocus","caretHidden","sectionTitle","paddingBottom","items","writeTaskWrapper","position","bottom","paddingVertical","paddingHorizontal","borderColor","borderWidth","addWrapper","addText","navWrapper","navButtonContainer","marginHorizontal","navButton","PasswordList","snackbarMessage","scrollIsClose2Bottom","setScrollIsClose2Bottom","useRef","useSelector","isRequesting","BackHandler","addEventListener","exitApp","onSnapshot","ScrollView","scrollEventThrottle","onScroll","event","nativeEvent","layoutMeasurement","contentOffset","contentSize","paddingToBottom","result","contentContainerStyle","flexGrow","keyboardShouldPersistTaps","map","passwordItem","FAB","right","icon","imageBackground","paddingTop","textShadowColor","textShadowOffset","textShadowRadius","CustomSidebar","divider","paddingLeft","userEmail","selectUserEmail","substring","indexOf","userName","ImageBackground","Text","Section","title","DrawerItemList","DrawerItem","closeDrawer","MaterialIcons","signOut","CustomDrawer","createDrawerNavigator","screenOptions","drawerStyle","Dimensions","drawerActiveBackgroundColor","drawerActiveTintColor","drawerItemStyle","drawerContent","drawerIcon","Feather","sliderContainer","activeMark","left","inactiveMark","SliderContainer","defaultValue","handleGeneratePassword","setValue","isNaN","step","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","onValueChange","resetConfigurationState","handleLeftCheckboxes","setCheck1","setCheck2","selector1","selector2","handleOtherCheckboxes","payloadString1","payloadString2","payload1","payload2","handleRightCheckboxes","checkbox1","checkbox2","checkbox3","configuratorAction","updateConfiguratorStateAndGeneratePassword","PasswordConfigurator","isEasy2Read","selectIsEasy2Read","isAllChar","selectIsAllChar","handleRightCheckboxesGivenLeftCheckboxes","setIsUpperCaseAndIsLowerCase","setIsNumbersAndIsSymbols","checkBox","section","setIsEasy2Read","setIsAllChar","setIsUpperCase","setIsLowerCase","setIsNumbers","setIsSymbols","savePassword","dropdown","textLabel","CreateEditPasswordConfigurator","selectSocialMediaList","createEditButtonLabel","cardView","Picker","selectedValue","itemValue","itemIndex","Item","Button","passwordFromState","screenTitle","handleBackAction","isCreatedMode","showAuthenticatedMessage","useLayoutEffect","setOptions","screen","passwordStyle","password2Clipboard","configuration","textContainer","textHeader","Divider","passwordLengthContainer","lengthSliderContainer","inputLength","keyboardType","popoverStyles","content","arrow","borderTopColor","background","CustomPopover","popoverVisible","closePopover","popoverAnchorRect","touchableRef","ref","contentStyle","arrowStyle","backgroundStyle","onClose","fromRect","placement","supportedOrientations","usePopover","openPopover","signIn","buttonOutLine","buttonOutLineText","registerRootComponent","textAlign","paragraph","checkbox","tooltipImage","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","firebase","apps","initializeApp","database","firestore","collection","signInWithEmailAndPassword","userCredentials","reduxAction","createUserWithEmailAndPassword"],"mappings":"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","file":"static/js/app.db998c50.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\n\nexport const initialState = {\n  isRequest: false,\n};\n\nexport const applicationStatusSlice = createSlice({\n  name: 'applicationStatus',\n  initialState,\n  reducers: {\n    setIsRequest: (state, { payload }) => ({\n      ...state,\n      isRequest: payload.isRequest,\n    }),\n    unsetIsRequest: () => ({\n      ...initialState,\n    }),\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getPasswordsFromFirebase, (state, { payload }) => ({\n      ...state,\n      isRequest: true,\n    })),\n      builder.addCase(setPasswords, (state, { payload }) => ({\n        ...state,\n        isRequest: false,\n      }));\n  },\n});\n\nexport const { setIsRequest, unsetIsRequest } = applicationStatusSlice.actions;\n\nexport const selectRequest = (state: { applicationStatus: { isRequest: boolean } }) =>\n  state.applicationStatus.isRequest;\n","import React from 'react';\n\nimport { Text, TouchableOpacity } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nexport const CustomCheckBox = (props: {\n  label: string;\n  isChecked: boolean;\n  disabled?: boolean;\n  color: string;\n  onPress: any;\n}) => {\n  const { label, isChecked, disabled, color, onPress } = props;\n\n  return (\n    <TouchableOpacity\n      disabled={disabled}\n      style={{ flexDirection: 'row', alignItems: 'center' }}\n      onPress={onPress}\n    >\n      <Checkbox\n        style={{ margin: 8 }}\n        value={isChecked}\n        disabled={disabled !== null ? disabled : false}\n        color={isChecked ? color : undefined}\n      />\n      <Text style={{ fontSize: 14, opacity: !disabled ? 1 : 0.3 }}>{label}</Text>\n    </TouchableOpacity>\n  );\n};\n","import AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst appName = 'passvault';\nconst isObject = (value: string) => typeof value === 'object';\n\nconst storeData = async (key: string, value: string) => {\n  try {\n    const finalValue = isObject(value) ? JSON.stringify(value) : value.toString();\n    await AsyncStorage.setItem(key, finalValue);\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst getData = async (key: string) => {\n  try {\n    const value = await AsyncStorage.getItem(key);\n    if (value !== null) {\n      return isObject(value) ? JSON.parse(value) : value;\n    }\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst removeItem = async (key: string) => {\n  try {\n    await AsyncStorage.removeItem(key);\n  } catch (e) {\n    console.log({ asyncStorageException: e });\n  }\n};\n\nconst setUserData2LS = (userId: string | undefined, email: string | null | undefined) => {\n  storeData(`${appName}.userId`, userId || '').then((data) => data);\n  storeData(`${appName}.email`, email || '').then((data) => data);\n};\n\nconst setPasswordGenerated = (password: string) => {\n  storeData(`${appName}.password`, password).then((data: void) => data);\n};\n\nconst getPasswordGenerated = () => {\n  const empty = { password: '' };\n\n  return getData(`${appName}.password`)\n    .then((password: string) => ({ password }))\n    .catch((err) => {\n      console.log({ err });\n      return empty;\n    });\n};\n\nconst getUserDataFromLS = () => {\n  const empty = { userId: '', email: '' };\n\n  return getData(`${appName}.userId`)\n    .then((userId: string) => {\n      getData(`${appName}.email`)\n        .then((email: string) => ({\n          userId,\n          email,\n        }))\n        .catch((err: any) => {\n          console.log(err);\n          return empty;\n        });\n    })\n    .catch((err) => {\n      console.log(err);\n      return empty;\n    });\n};\n\nconst clearUserDataFromLS = () => {\n  removeItem(`${appName}.userId`).then((res: void) => res);\n  removeItem(`${appName}.email`).then((res: void) => res);\n};\n\nexport {\n  setUserData2LS,\n  getUserDataFromLS,\n  clearUserDataFromLS,\n  setPasswordGenerated,\n  getPasswordGenerated,\n};\n","import { ToastAndroid, Platform } from 'react-native';\n\nexport const showInfoMessage = (message: string) => {\n  ToastAndroid.show(message, ToastAndroid.SHORT);\n};\n","import React from 'react';\n\nimport { StyleSheet, View, ActivityIndicator } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n});\n\nexport const LoadingIndicator = () => {\n  return (\n    <View style={[styles.container, styles.horizontal]}>\n      <ActivityIndicator size='large' color='#3091e0' />\n    </View>\n  );\n};\n","import React from 'react';\nimport { View } from 'react-native';\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { appColors } from 'utils/constants';\n\nexport const PasswordToggle = (props: { hidePassword: boolean; action: any }) => {\n  const { hidePassword, action } = props;\n  return (\n    <View style={{ marginTop: 10 }}>\n      <CustomCheckBox\n        label='Show password'\n        isChecked={hidePassword}\n        color={appColors.primary}\n        onPress={action}\n      />\n    </View>\n  );\n};\n","import React from 'react';\nimport { Snackbar } from 'react-native-paper';\n\n// Reference for Icons usage: https://icons.expo.fyi/\n\nexport const CustomSnackbar = (props: {\n  message: string;\n  isSnackbarVisible: boolean;\n  setSnackbarVisible: any;\n}) => {\n  const { message, isSnackbarVisible, setSnackbarVisible } = props;\n  return (\n    <Snackbar\n      visible={isSnackbarVisible}\n      onDismiss={() => setSnackbarVisible(!isSnackbarVisible)}\n      duration={1500}\n    >\n      {message}\n    </Snackbar>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  password: string;\n  passwordIdPicked: string;\n  passwordPicked: string;\n  length: number;\n  isCreateMode: boolean;\n  isEditMode: boolean;\n  passwords: any;\n} = {\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n  passwords: [],\n};\n\nconst resetPasswordState = (state: any) => ({\n  ...state,\n  password: '',\n  passwordIdPicked: '',\n  passwordPicked: '',\n  length: 6,\n  isCreateMode: false,\n  isEditMode: false,\n});\n\nexport const passwordSlice = createSlice({\n  name: 'password',\n  initialState,\n  reducers: {\n    setPassword: (state, { payload }) => ({\n      ...state,\n      password: payload.password,\n    }),\n    setPasswordPicked: (state, { payload }) => ({\n      ...state,\n      passwordPicked: payload.passwordPicked,\n    }),\n    setPasswordIdPicked: (state, { payload }) => ({\n      ...state,\n      passwordIdPicked: payload.passwordIdPicked,\n    }),\n    setLength: (state, { payload }) => ({\n      ...state,\n      length: payload.length,\n    }),\n    setIsCreateMode: (state, { payload }) => ({\n      ...state,\n      isCreateMode: payload.isCreateMode,\n    }),\n    setIsEditMode: (state, { payload }) => ({\n      ...state,\n      isEditMode: payload.isEditMode,\n    }),\n    setPasswords: (state, { payload }) => ({\n      ...state,\n      passwords: payload.passwords,\n    }),\n    resetPasswordGeneratorState: (state) => resetPasswordState(state),\n    unsetPasswords: () => ({ ...initialState }),\n    generatePassword: () => {},\n    getPasswordsFromFirebase: () => {},\n    savePassword2Firebase: (state, { payload }) => {},\n    deletePasswordFromFirebase: (state, { payload }) => {},\n    editPasswordFromFirebase: (state, { payload }) => {},\n  },\n});\n\nexport const {\n  setPassword,\n  setPasswordPicked,\n  setPasswordIdPicked,\n  setLength,\n  setIsCreateMode,\n  setIsEditMode,\n  setPasswords,\n  resetPasswordGeneratorState,\n  unsetPasswords,\n  generatePassword,\n  getPasswordsFromFirebase,\n  savePassword2Firebase,\n  deletePasswordFromFirebase,\n  editPasswordFromFirebase,\n} = passwordSlice.actions;\n\nexport const selectPassword = (state: { password: { password: any } }) => state.password.password;\nexport const selectPasswordIdPicked = (state: { password: { passwordIdPicked: any } }) =>\n  state.password.passwordIdPicked;\nexport const selectPasswordPicked = (state: { password: { passwordPicked: any } }) =>\n  state.password.passwordPicked;\nexport const selectIsCreateMode = (state: { password: { isCreateMode: boolean } }) =>\n  state.password.isCreateMode;\nexport const selectIsEditMode = (state: { password: { isEditMode: boolean } }) =>\n  state.password.isEditMode;\nexport const selectPasswordLength = (state: { password: string | any[] }) => state.password.length;\nexport const selectPasswords = (state: { password: { passwords: any } }) =>\n  state.password.passwords;\n","import { select, put, takeLeading } from 'redux-saga/effects';\nimport {\n  generatePassword,\n  selectPasswordLength,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { lower, upper, number, symbols } from 'utils/constants';\nimport { setPasswordGenerated } from 'utils/localStorageFuncs';\n\nimport {\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n  selectIsUpperCase,\n} from 'reduxStore/slices/configuratorSlice';\n\nexport function* getPasswordGeneratorFlow(): Generator {\n  try {\n    const length = yield select(selectPasswordLength);\n    const isUpperCase = yield select(selectIsUpperCase);\n    const isLowerCase = yield select(selectIsLowerCase);\n    const isNumbers = yield select(selectIsNumbers);\n    const isSymbols = yield select(selectIsSymbols);\n\n    const isUpper: string = isUpperCase ? upper : '';\n    const isLower: string = isLowerCase ? lower : '';\n    const isNumber: string = isNumbers ? number : '';\n    const isSymbol: string = isSymbols ? symbols : '';\n\n    const all = isUpper + isLower + isNumber + isSymbol;\n    let password = '';\n\n    // @ts-ignore\n    for (let i = 0; i < length; i++) {\n      password += all.charAt(Math.floor(Math.random() * all.length));\n    }\n\n    setPasswordGenerated(password);\n\n    return yield put(setPassword({ password }));\n  } catch (exception) {\n    console.log({ exception });\n  }\n}\n\nexport const passwordGeneratorSaga = [takeLeading(generatePassword.type, getPasswordGeneratorFlow)];\n","import { passwordsCollection, socialMediaCollection } from 'services/firebase';\n\nconst sortBy = (obj1: object, obj2: object, field: string, kind: string) => {\n  const x = kind === 'asc' ? 1 : -1;\n  // @ts-ignore\n  return obj1[field] < obj2[field] ? -1 * x : obj1[field] > obj2[field] ? 1 * x : 0;\n};\n\nexport const getPasswordsByUserId = async (userId: any) => {\n  const passwordList: {\n    id: string;\n    password_generated: string;\n    social_media: string;\n    createdAt: number;\n  }[] = [];\n\n  await passwordsCollection\n    .where('uid', '==', userId)\n    .get()\n    .then((querySnapshot) =>\n      querySnapshot.forEach((doc) =>\n        passwordList.push({\n          id: doc.id,\n          password_generated: doc.data().password_generated,\n          social_media: doc.data().social_media,\n          createdAt: doc.data().createdAt,\n        })\n      )\n    )\n    .catch((error) => {\n      console.log('Error getting documents: ', error);\n    });\n\n  return passwordList.sort((x, y) => sortBy(x, y, 'createdAt', 'asc'));\n};\n\nexport const sendPassword2Firebase = async (\n  userId: string,\n  password: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .add({\n      createdAt: new Date().getTime(),\n      password_generated: password,\n      social_media: socialMedia,\n      uid: userId,\n    })\n    .then(() => console.log('A new password was added in database.'))\n    .catch(() => console.log('Something went wrong trying to add a new password in database.'));\n};\n\nexport const deletePasswordById = async (passwordId: string | undefined) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .delete()\n    .then(() => console.log('A password was deleted from database.'))\n    .catch(() => console.log('Something went wrong trying to delete a password from database.'));\n};\n\nexport const updatePasswordByIdFromFirebase = async (\n  passwordId: string,\n  passwordGenerated: string,\n  socialMedia: string\n) => {\n  await passwordsCollection\n    .doc(passwordId)\n    .update({\n      password_generated: passwordGenerated,\n      social_media: socialMedia,\n    })\n    .then(() => console.log('A password was updated from database.'))\n    .catch(() => console.log('Something went wrong trying to update a password from database.'));\n};\n\nexport const getSocialMedia = async () => {\n  const socialMediaList: { id: string; name: string }[] = [];\n\n  await socialMediaCollection.get().then((querySnapshot) => {\n    querySnapshot.forEach((doc) =>\n      socialMediaList.push({\n        id: doc.id,\n        name: doc.data().name,\n      })\n    );\n  });\n\n  return socialMediaList;\n};\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { getPasswordsFromFirebase, setPasswords } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { getPasswordsByUserId } from 'services/database';\n\nexport function* getPasswordsFlow(): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const passwords = yield call(getPasswordsByUserId, userId);\n\n    return yield put(setPasswords({ passwords }));\n  } catch (exception) {\n    console.log({ source: 'Exception from getPasswordsSaga', exception });\n  }\n}\n\nexport const getPasswordsSaga = [takeLeading(getPasswordsFromFirebase.type, getPasswordsFlow)];\n","import { call, put, takeLeading, select } from 'redux-saga/effects';\nimport {\n  getSocialMediaListFromFirebase,\n  selectSocialMediaPicked,\n  setSocialMediaList,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\nimport {\n  selectIsEditMode,\n  selectPasswordPicked,\n  setPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport { getSocialMedia } from 'services/database';\n\nfunction* getSocialMediaFlow(): Generator {\n  try {\n    const passwordPicked = yield select(selectPasswordPicked);\n    const socialMediaPicked = yield select(selectSocialMediaPicked);\n    const isEditMode = yield select(selectIsEditMode);\n    const socialMediaList = yield call(getSocialMedia);\n    const socialMediaSelected = socialMediaPicked ? socialMediaPicked : socialMediaList[0].name;\n    yield put(setSocialMediaList({ socialMediaList }));\n\n    yield put(setSocialMediaPicked({ socialMediaPicked: socialMediaSelected }));\n\n    if (isEditMode) {\n      return yield put(setPassword({ password: passwordPicked }));\n    } else {\n      return;\n    }\n  } catch (exception) {\n    console.log({ source: 'Exception from getSocialMediaSaga', exception });\n  }\n}\n\nexport const getSocialMediaSaga = [\n  takeLeading(getSocialMediaListFromFirebase.type, getSocialMediaFlow),\n];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { savePassword2Firebase, selectPassword } from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\nimport { sendPassword2Firebase } from 'services/database';\n\n// @ts-ignore\nfunction* savePasswordFlow({ payload }): Generator {\n  try {\n    const userId = yield select(selectUserId);\n    const { socialMedia, password } = payload;\n\n    // @ts-ignore\n    return yield call(sendPassword2Firebase, userId, password, socialMedia);\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\n// @ts-ignore\nexport const savePasswordSaga = [takeLeading(savePassword2Firebase.type, savePasswordFlow)];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport { deletePasswordFromFirebase } from 'reduxStore/slices/passwordSlice';\nimport { deletePasswordById } from 'services/database';\n\n// @ts-ignore\nfunction* deletePasswordFlow({ payload }): Generator {\n  try {\n    const { passwordId } = payload;\n\n    // @ts-ignore\n    return yield call(deletePasswordById, passwordId);\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\n// @ts-ignore\nexport const deletePasswordSaga = [\n  takeLeading(deletePasswordFromFirebase.type, deletePasswordFlow),\n];\n","import { put, select, call, takeLeading } from 'redux-saga/effects';\nimport {\n  editPasswordFromFirebase,\n  selectPassword,\n  selectPasswordIdPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { updatePasswordByIdFromFirebase } from 'services/database';\n\n// @ts-ignore\nfunction* updatePasswordFlow({ payload }): Generator {\n  try {\n    const passwordId = yield select(selectPasswordIdPicked);\n    const { socialMedia, password } = payload;\n\n    // @ts-ignore\n    return yield call(updatePasswordByIdFromFirebase, passwordId, password, socialMedia);\n  } catch (exception) {\n    console.log({ source: 'Exception from savePasswordSaga', exception });\n  }\n}\n\n// @ts-ignore\nexport const updatePasswordSaga = [takeLeading(editPasswordFromFirebase.type, updatePasswordFlow)];\n","import { all } from 'redux-saga/effects';\nimport { passwordGeneratorSaga } from 'reduxStore/sagas/passwordGeneratorSaga';\nimport { getPasswordsSaga } from 'reduxStore/sagas/getPasswordsSaga';\nimport { getSocialMediaSaga } from 'reduxStore/sagas/getSocialMediaSaga';\nimport { savePasswordSaga } from 'reduxStore/sagas/savePasswordSaga';\nimport { deletePasswordSaga } from 'reduxStore/sagas/deletePasswordSaga';\nimport { updatePasswordSaga } from 'reduxStore/sagas/updatePassword';\n\nexport default function* IndexSagas() {\n  yield all([\n    ...passwordGeneratorSaga,\n    ...getPasswordsSaga,\n    ...getSocialMediaSaga,\n    ...savePasswordSaga,\n    ...deletePasswordSaga,\n    ...updatePasswordSaga,\n  ]);\n}\n","import { combineReducers } from '@reduxjs/toolkit';\n\nimport { userSlice } from './userSlice';\nimport { passwordSlice } from './passwordSlice';\nimport { configuratorSlice } from 'reduxStore/slices/configuratorSlice';\nimport { applicationStatusSlice } from 'reduxStore/slices/applicationStatusSlice';\nimport { socialMediaSlice } from 'reduxStore/slices/socialMediaSlice';\n\nconst createRootReducer = () =>\n  combineReducers({\n    user: userSlice.reducer,\n    password: passwordSlice.reducer,\n    configurator: configuratorSlice.reducer,\n    applicationStatus: applicationStatusSlice.reducer,\n    socialMedia: socialMediaSlice.reducer,\n  });\n\nexport default createRootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport IndexSagas from 'reduxStore/sagas/index';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from 'reduxStore/slices/rootReducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [sagaMiddleware];\n\nconst store = configureStore({\n  reducer: createRootReducer(),\n  middleware,\n});\n\nsagaMiddleware.run(IndexSagas);\n\nexport default store;\n","module.exports = __webpack_public_path__ + \"static/media/passvault-512px.fb8f2fd2.png\";","const lower = 'abcdefghijklmñopqrstuvwxyz';\nconst upper = 'ABCDEFGHIJKLMNÑOPQRSTUVWXYZ';\nconst number = '0123456789';\nconst symbols = '[]{}<>\":|!@#$%^&*()_+`~/';\n\nconst devWarnings = [\n  'Clipboard has been extracted from react-native core',\n  'AsyncStorage has been extracted from react-native core',\n  'Setting a timer for a long period of time, i.e. multiple minutes',\n  'Picker has been extracted from react-native core and will be removed',\n];\n\nconst popoverMessage = 'You can generate passwords without store them.';\n\nconst infoMessages = {\n  copied2Clipboard: 'The password was copied to clipboard',\n  newPassword: 'New password generated',\n  about2CreatePassword: \"You're about to create a new password\",\n};\n\nconst appColors = {\n  textTint: '#FFF',\n  maximumTintColorSlider: '#d3d3d3',\n  activeTint: '#9ac8fc',\n  primary: '#3091e0',\n  primaryDark: '#236daa',\n};\n\nexport interface PasswordItemI {\n  passwordId: string;\n  passwordGenerated: string;\n  socialMedia: string;\n  setSnackbarVisible: any;\n  setSnackbarMessage: any;\n  navigation: any;\n}\n\nexport interface PasswordIconsI {\n  passwordId: string;\n  socialMedia: string;\n  passwordGenerated: string;\n  passwordVisible: boolean;\n  setPasswordVisible: any;\n  setSnackbarVisible: any;\n  setSnackbarMessage: any;\n  navigation: any;\n}\n\nexport interface PasswordI {\n  id: string;\n  createdAt: number;\n  password_generated: string;\n  social_media: string;\n}\n\nexport { devWarnings, lower, upper, number, symbols, popoverMessage, appColors, infoMessages };\n","import React from 'react';\n\nimport { LogBox } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\n\nimport { Provider } from 'react-redux';\nimport { Login } from 'screens/Login/login';\nimport { SignUp } from 'screens/SignUp/signup';\nimport { PasswordGenerator } from 'screens/PasswordGenerator/passwordGenerator';\nimport { Drawer } from 'screens/Drawer/drawer';\n\nimport store from 'reduxStore/store/index';\nimport { appColors, devWarnings } from 'utils/constants';\nimport { CustomStatusbar } from 'components/CustomStatusbar/customStatusbar';\n\nif (process.env.ENV === 'dev') {\n  LogBox.ignoreLogs(devWarnings);\n}\n\ndeclare global {\n  interface Window {\n    store: any;\n  }\n}\n\nwindow.store = store;\nconst Stack = createNativeStackNavigator();\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <CustomStatusbar />\n      <NavigationContainer>\n        <Stack.Navigator>\n          <Stack.Screen name='Login' component={Login} options={{ headerShown: false }} />\n          <Stack.Screen name='SignUp' component={SignUp} options={{ headerShown: false }} />\n          <Stack.Screen\n            name='PasswordGenerator'\n            component={PasswordGenerator}\n            options={{\n              headerStyle: {\n                backgroundColor: '#3091e0',\n              },\n              headerTintColor: '#FFF',\n            }}\n          />\n          <Stack.Screen\n            name='Drawer'\n            component={Drawer}\n            options={{\n              headerShown: false,\n            }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </Provider>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { View, Text, Platform, Image, TextInput, TouchableOpacity } from 'react-native';\n\nimport { PasswordToggle } from 'components/PasswordToggle/passwordToggle';\nimport { shadow } from 'screens/PasswordGenerator/styles';\n\nimport { auth, signUp } from 'services/firebase';\n\nimport styles from 'screens/Login/styles';\n\nexport const SignUp = (props: { navigation: any }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [hidePassword, setHidePassword] = useState(true);\n\n  const dispatch = useDispatch();\n  const { navigation } = props;\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleSignUp = () => {\n    signUp(username, password);\n    setUsername('');\n    setPassword('');\n  };\n\n  const handleHidePassword = () => {\n    setHidePassword(!hidePassword);\n  };\n\n  return (\n    <View style={styles.container}>\n      <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder='Username'\n          value={username}\n          style={[styles.input, shadow.container]}\n          onChangeText={(text) => setUsername(text)}\n        />\n        <TextInput\n          placeholder='Password'\n          value={password}\n          style={[styles.input, shadow.container]}\n          onChangeText={(text) => setPassword(text)}\n          secureTextEntry={hidePassword}\n        />\n        <PasswordToggle hidePassword={!hidePassword} action={handleHidePassword} />\n      </View>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={handleSignUp} style={styles.button}>\n          <Text style={styles.buttonText}>Sign up</Text>\n        </TouchableOpacity>\n      </View>\n\n      <View style={styles.linkContainer}>\n        <TouchableOpacity\n          onPress={() => {\n            // @ts-ignore\n            navigation.navigate('Login');\n          }}\n          style={styles.link}\n        >\n          <Text style={styles.linkText}>Go to Login if you have an account</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n","import React from 'react';\nimport { View, StatusBar } from 'react-native';\nimport { appColors } from 'utils/constants';\n\n/*\n * For more reference check this snack:\n *   https://snack.expo.dev/@ahmed_gaber/safe-area-context?platform=ios\n */\n\nexport const CustomStatusbar = () => {\n  return (\n    <StatusBar animated={true} barStyle={'light-content'} backgroundColor={appColors.primaryDark} />\n  );\n};\n\nexport default CustomStatusbar;\n","import React from 'react';\nimport { Image } from 'react-native';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nimport {\n  imageSourceRetriever,\n  socialMediaIcon,\n  socialMediaIconColor,\n} from 'utils/imageDataRetriever';\n\nexport const SocialMediaIcon = (props: { style: any; socialMedia: string }) => {\n  const { style, socialMedia } = props;\n\n  if (['amazon', 'discord', 'google', 'slack', 'okta', 'outlook', 'twitch'].includes(socialMedia)) {\n    const imageSource = imageSourceRetriever(socialMedia);\n\n    return <Image style={style} source={imageSource} />;\n  } else {\n    const getSocialMedia: any = socialMediaIcon(socialMedia);\n    const socialMediaColor = socialMediaIconColor(socialMedia);\n\n    return <AntDesign style={style} name={getSocialMedia} size={24} color={socialMediaColor} />;\n  }\n};\n","export const imageSourceRetriever = (socialMedia: string) => {\n  return socialMedia === 'amazon'\n    ? require('assets/amazon.png')\n    : socialMedia === 'discord'\n    ? require('assets/discord.png')\n    : socialMedia === 'google'\n    ? require('assets/google.png')\n    : socialMedia === 'slack'\n    ? require('assets/slack.png')\n    : socialMedia === 'okta'\n    ? require('assets/okta.png')\n    : socialMedia === 'outlook'\n    ? require('assets/outlook.png')\n    : socialMedia === 'twitch'\n    ? require('assets/twitch.png')\n    : '';\n};\n\nexport const socialMediaIcon = (socialMedia: string) => {\n  return socialMedia === 'facebook'\n    ? 'facebook-square'\n    : socialMedia === 'linkedin'\n    ? 'linkedin-square'\n    : socialMedia === 'other'\n    ? 'questioncircle'\n    : socialMedia;\n};\n\nexport const socialMediaIconColor = (socialMedia: string) => {\n  return socialMedia === 'facebook'\n    ? '#4267B2'\n    : socialMedia === 'twitter'\n    ? '#00ACEE'\n    : socialMedia === 'linkedin'\n    ? '#2867B2'\n    : 'black';\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const icons = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n\n  singleIcon: {\n    marginRight: 10,\n  },\n\n  socialMedia: { width: 24, height: 24, marginRight: 10 },\n});\n\nexport const item = StyleSheet.create({\n  container: {\n    backgroundColor: '#FFF',\n    padding: 17,\n    borderRadius: 5,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginLeft: 3,\n    marginRight: 3,\n    marginBottom: 10,\n\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n\n  iconPasswordWrapper: { width: '50%', flexDirection: 'row', alignItems: 'center' },\n});\n\nexport const input = StyleSheet.create({\n  container: {\n    width: '100%',\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 16 : 13,\n  },\n});\n","import React from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  deletePasswordFromFirebase,\n  setIsEditMode,\n  setPasswordIdPicked,\n  setPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\n\nimport { Alert, Clipboard, Platform, TouchableOpacity, View } from 'react-native';\nimport { Entypo, FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\n\nimport { icons } from 'components/PasswordItem/styles';\n\nimport { infoMessages, PasswordIconsI } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { setSocialMediaPicked } from 'reduxStore/slices/socialMediaSlice';\n\nexport const PasswordIcons = (props: PasswordIconsI) => {\n  const dispatch = useDispatch();\n\n  const {\n    passwordId,\n    socialMedia,\n    passwordGenerated,\n    passwordVisible,\n    setPasswordVisible,\n    setSnackbarVisible,\n    setSnackbarMessage,\n    navigation,\n  } = props;\n\n  const _socialMedia = socialMedia.charAt(0).toUpperCase() + socialMedia.slice(1);\n\n  const handleShowHidePassword = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleCopyButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.copied2Clipboard);\n    } else {\n      setSnackbarMessage(infoMessages.copied2Clipboard);\n      setSnackbarVisible(true);\n    }\n\n    Clipboard.setString(passwordGenerated);\n  };\n\n  return (\n    <View style={icons.container}>\n      <TouchableOpacity onPress={handleShowHidePassword}>\n        <Entypo\n          style={icons.singleIcon}\n          name={passwordVisible ? 'eye' : 'eye-with-line'}\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity onPress={handleCopyButton}>\n        <MaterialCommunityIcons\n          style={icons.singleIcon}\n          name='content-copy'\n          size={18}\n          color='grey'\n        />\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={() => {\n          dispatch(setIsEditMode({ isEditMode: true }));\n          dispatch(setPasswordIdPicked({ passwordIdPicked: passwordId }));\n          dispatch(setPasswordPicked({ passwordPicked: passwordGenerated }));\n          dispatch(setSocialMediaPicked({ socialMediaPicked: socialMedia }));\n          navigation.navigate('PasswordGenerator');\n        }}\n      >\n        <FontAwesome style={{ marginRight: 5 }} name='edit' size={18} color='grey' />\n      </TouchableOpacity>\n      <TouchableOpacity\n        onPress={() => {\n          Alert.alert(\n            'Delete password warning',\n            `Are you sure you want to delete this ${_socialMedia}'s password?`,\n            [\n              {\n                text: 'No',\n                style: 'cancel',\n              },\n              { text: 'Yes', onPress: () => dispatch(deletePasswordFromFirebase({ passwordId })) },\n            ]\n          );\n        }}\n      >\n        <Ionicons name='trash' size={18} color='#DB4437' />\n      </TouchableOpacity>\n    </View>\n  );\n};\n","import React, { useState } from 'react';\nimport { View, TextInput } from 'react-native';\n\nimport { SocialMediaIcon } from 'components/SocialMediaIcon/socialMediaIcon';\nimport { PasswordIcons } from 'components/PasswordIcons/passwordIcon';\n\nimport { icons, item, input } from './styles';\n\nimport { PasswordItemI } from 'utils/constants';\n\nconst PasswordItem = (props: PasswordItemI) => {\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const {\n    passwordId,\n    passwordGenerated,\n    socialMedia,\n    setSnackbarVisible,\n    setSnackbarMessage,\n    navigation,\n  } = props;\n\n  return (\n    <View style={item.container}>\n      <View style={item.iconPasswordWrapper}>\n        <SocialMediaIcon style={icons.socialMedia} socialMedia={socialMedia} />\n        <TextInput\n          style={input.container}\n          showSoftInputOnFocus={false}\n          caretHidden={true}\n          value={passwordGenerated}\n          secureTextEntry={!passwordVisible}\n        />\n      </View>\n      <PasswordIcons\n        passwordId={passwordId}\n        socialMedia={socialMedia}\n        passwordGenerated={passwordGenerated}\n        passwordVisible={passwordVisible}\n        setPasswordVisible={setPasswordVisible}\n        setSnackbarVisible={setSnackbarVisible}\n        setSnackbarMessage={setSnackbarMessage}\n        navigation={navigation}\n      />\n    </View>\n  );\n};\n\nexport default PasswordItem;\n","import { StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#EBEAED',\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    paddingBottom: 20,\n  },\n  items: {\n    margin: 20,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 20,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    width: 250,\n    backgroundColor: '#FFF',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    borderRadius: 60,\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {\n    position: 'absolute',\n    alignItems: 'center',\n    fontSize: 45,\n    color: '#C0C0C0',\n  },\n  navWrapper: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  navButtonContainer: {\n    justifyContent: 'center',\n    backgroundColor: '#E13333',\n    width: '78%',\n    padding: 6,\n    marginTop: 2,\n    marginHorizontal: 10,\n    borderRadius: 10,\n  },\n  navButton: {\n    alignItems: 'center',\n    fontSize: 13,\n    fontWeight: '700',\n    color: 'white',\n  },\n});\n\nexport default styles;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  getPasswordsFromFirebase,\n  selectPasswords,\n  setIsCreateMode,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectRequest } from 'reduxStore/slices/applicationStatusSlice';\n\nimport { View, ScrollView, BackHandler, Platform } from 'react-native';\nimport { FAB } from 'react-native-paper';\n\nimport PasswordItem from 'components/PasswordItem/passwordItem';\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\n\nimport { passwordsCollection } from 'services/firebase';\n\nimport { appColors, PasswordI } from 'utils/constants';\nimport styles from './styles';\n\nexport const PasswordList = (props: { navigation: any }) => {\n  const [isSnackbarVisible, setSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [scrollIsClose2Bottom, setScrollIsClose2Bottom] = useState(false);\n\n  const { navigation } = props;\n  const dispatch = useDispatch();\n  const scrollViewRef = useRef();\n\n  const passwords = useSelector(selectPasswords);\n  const isRequesting = useSelector(selectRequest);\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', () => {\n      BackHandler.exitApp();\n      return true;\n    });\n    passwordsCollection.onSnapshot(() => {\n      dispatch(getPasswordsFromFirebase());\n    });\n  }, []);\n\n  const handleScrollIsClose2Bottom = (event: any) => {\n    const { layoutMeasurement, contentOffset, contentSize } = event.nativeEvent;\n    const paddingToBottom = Platform.OS === 'web' ? 7 : 10;\n    const result =\n      layoutMeasurement.height + contentOffset.y >= contentSize.height - paddingToBottom;\n\n    setScrollIsClose2Bottom(result);\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <ScrollView\n            // ref={scrollViewRef}\n            scrollEventThrottle={16}\n            onScroll={handleScrollIsClose2Bottom}\n            contentContainerStyle={{\n              flexGrow: 1,\n            }}\n            keyboardShouldPersistTaps='handled'\n          >\n            <View style={styles.items}>\n              {passwords.map((passwordItem: PasswordI) => {\n                console.log();\n                return (\n                  <PasswordItem\n                    key={passwordItem.id}\n                    passwordId={passwordItem.id}\n                    passwordGenerated={passwordItem.password_generated}\n                    socialMedia={passwordItem.social_media}\n                    setSnackbarVisible={setSnackbarVisible}\n                    setSnackbarMessage={setSnackbarMessage}\n                    navigation={navigation}\n                  />\n                );\n              })}\n            </View>\n          </ScrollView>\n          <FAB\n            style={{\n              position: 'absolute',\n              margin: 26,\n              right: 0,\n              bottom: isSnackbarVisible ? 40 : 0,\n              backgroundColor: appColors.primary,\n            }}\n            color={appColors.textTint}\n            visible={!scrollIsClose2Bottom}\n            icon='plus'\n            onPress={() => {\n              dispatch(setIsCreateMode({ isCreateMode: true }));\n              navigation.navigate('PasswordGenerator');\n            }}\n          />\n          <CustomSnackbar\n            message={snackbarMessage}\n            isSnackbarVisible={isSnackbarVisible}\n            setSnackbarVisible={setSnackbarVisible}\n          />\n        </View>\n      )}\n    </>\n  );\n};\n","import { StyleSheet, Platform } from 'react-native';\n\nexport const imageBackground = StyleSheet.create({\n  container: {\n    width: undefined,\n    padding: 16,\n    paddingTop: 48,\n  },\n  name: {\n    marginTop: 60,\n    paddingHorizontal: 5,\n    color: '#F0F0F0',\n    backgroundColor: 'rgba(48, 145, 224, 0.6)',\n    borderRadius: 5,\n    fontSize: 20,\n    fontWeight: 'bold',\n    textShadowColor: '#000',\n    textShadowOffset: { width: 5, height: 5 },\n    textShadowRadius: 10,\n  },\n});\n\nexport const divider = StyleSheet.create({\n  divider: {\n    marginHorizontal: 20,\n    marginTop: 40,\n    marginBottom: 20,\n    backgroundColor: '#464646',\n  },\n});\n\nexport const signout = StyleSheet.create({\n  container: {\n    backgroundColor: '#F3BBBB',\n    borderRadius: 5,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n    marginHorizontal: 10,\n    paddingVertical: 15,\n    paddingLeft: Platform.OS === 'web' ? 19 : 17,\n  },\n  icon: {\n    marginRight: 32,\n  },\n  text: {\n    color: '#F11D1D',\n  },\n});\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DrawerItemList, DrawerItem } from '@react-navigation/drawer';\nimport { Image, View, Text, ScrollView, ImageBackground, TouchableOpacity } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Divider, Drawer } from 'react-native-paper';\nimport { FontAwesome, MaterialCommunityIcons, MaterialIcons } from '@expo/vector-icons';\n\nimport { selectUserEmail } from 'reduxStore/slices/userSlice';\nimport { unsetPasswords, setIsCreateMode } from 'reduxStore/slices/passwordSlice';\n\nimport { signOut } from 'services/firebase';\n\nimport { imageBackground, divider, signout } from './styles';\n\nexport const CustomSidebar = (props: any) => {\n  const userEmail = useSelector(selectUserEmail);\n  const name = userEmail ? userEmail.substring(0, userEmail.indexOf('@')) : '';\n  const userName = name.charAt(0).toUpperCase() + name.slice(1);\n  const { navigation } = props;\n  const dispatch = useDispatch();\n\n  const handleSignOut = () => {\n    signOut(dispatch(unsetPasswords()), navigation.replace('Login'));\n  };\n\n  return (\n    <SafeAreaProvider>\n      <ImageBackground\n        source={require('assets/img/sidebar-banner.png')}\n        style={imageBackground.container}\n      >\n        <Text style={imageBackground.name}>Hi there, {userName} !</Text>\n      </ImageBackground>\n      <Drawer.Section title='Pages'>\n        <ScrollView style={{ paddingTop: 10 }}>\n          <DrawerItemList {...props} />\n          <DrawerItem\n            label='Password Generator'\n            icon={({ color, size }) => (\n              <MaterialCommunityIcons name='engine-outline' size={size * 0.75} color={color} />\n            )}\n            onPress={() => {\n              navigation.closeDrawer();\n              dispatch(setIsCreateMode({ isCreateMode: true }));\n              navigation.navigate('PasswordGenerator');\n            }}\n          />\n        </ScrollView>\n      </Drawer.Section>\n\n      <Drawer.Section>\n        <DrawerItem\n          icon={({ color, size }) => (\n            <MaterialIcons name='logout' size={size * 0.75} color={color} />\n          )}\n          label='Sign out'\n          onPress={handleSignOut}\n        />\n      </Drawer.Section>\n    </SafeAreaProvider>\n  );\n};\n","import React from 'react';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport { PasswordList } from 'screens/PasswordList/passwordList';\nimport { CustomSidebar } from 'components/CustomSidebar/customSidebar';\n\nimport { Feather, MaterialCommunityIcons } from '@expo/vector-icons';\nimport { Dimensions } from 'react-native';\n\nconst CustomDrawer = createDrawerNavigator();\n\nexport const Drawer = (props: { navigation: any }) => {\n  return (\n    <CustomDrawer.Navigator\n      screenOptions={{\n        drawerStyle: {\n          width: Dimensions.get('window').width * 0.7,\n        },\n        drawerActiveBackgroundColor: '#9ac8fc',\n        drawerActiveTintColor: '#3091e0',\n        drawerItemStyle: {\n          borderRadius: 5,\n        },\n      }}\n      drawerContent={(props) => <CustomSidebar {...props} />}\n    >\n      <CustomDrawer.Screen\n        name='PasswordList'\n        component={PasswordList}\n        options={{\n          title: 'Password List',\n          headerStyle: {\n            backgroundColor: '#3091e0',\n          },\n          headerTintColor: '#FFF',\n          drawerIcon: ({ color, size }) => <Feather name='list' size={size * 0.75} color={color} />,\n        }}\n      />\n    </CustomDrawer.Navigator>\n  );\n};\n","import { Platform, StyleSheet } from 'react-native';\n\nconst borderWidth = 4;\n\nexport const styles = StyleSheet.create({\n  sliderContainer: {\n    width: Platform.OS === 'web' ? '85%' : '80%',\n    paddingVertical: 10,\n    paddingLeft: 10,\n    flexDirection: 'column',\n  },\n});\n\nexport const trackMarkStyles = StyleSheet.create({\n  activeMark: {\n    borderColor: 'red',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n  inactiveMark: {\n    borderColor: 'grey',\n    borderWidth,\n    left: -borderWidth / 2,\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { generatePassword, setLength } from 'reduxStore/slices/passwordSlice';\n\nimport { View, Text } from 'react-native';\nimport Slider from '@react-native-community/slider';\n\nimport { trackMarkStyles, styles } from './styles';\nimport { appColors } from 'utils/constants';\n\n// Reference: https://youtu.be/MwSudWtT7ps?t=271\n\nconst SliderContainer = (props: { defaultValue: number; handleGeneratePassword: any }) => {\n  const { defaultValue, handleGeneratePassword } = props;\n  const [value, setValue] = useState(defaultValue);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isNaN(value)) {\n      dispatch(setLength({ length: value }));\n      dispatch(generatePassword());\n    }\n  }, [value]);\n\n  return (\n    <View style={styles.sliderContainer}>\n      <Slider\n        step={1}\n        value={defaultValue}\n        minimumValue={6}\n        maximumValue={50}\n        minimumTrackTintColor={appColors.primary}\n        maximumTrackTintColor={appColors.maximumTintColorSlider}\n        thumbTintColor={appColors.primary}\n        onValueChange={setValue}\n      />\n    </View>\n  );\n};\n\nexport default SliderContainer;\n","import {\n  generatePassword,\n  setIsCreateMode,\n  setIsEditMode,\n  resetPasswordGeneratorState,\n} from 'reduxStore/slices/passwordSlice';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport { infoMessages } from 'utils/constants';\n\n/* Password Generator utils */\nexport const resetConfigurationState = (dispatch: any) => {\n  dispatch(resetPasswordGeneratorState());\n};\n\nexport const handleGeneratePassword = (passwordFromState: string, dispatch: any) => {\n  if (!passwordFromState) {\n    dispatch(generatePassword());\n  }\n};\n\nexport const showAuthenticatedMessage = (userId: string, isCreatedMode: boolean) => {\n  if (userId && isCreatedMode) {\n    showInfoMessage(infoMessages.about2CreatePassword);\n  }\n};\n\n/* Password Generator Configurator utils */\nexport const handleLeftCheckboxes = (\n  dispatch: any,\n  setCheck1: any,\n  setCheck2: any,\n  selector1: string,\n  selector2: string,\n  value: boolean,\n  handleOtherCheckboxes: any\n) => {\n  const payloadString1 = `{ \"${selector1}\": ${value} }`;\n  const payloadString2 = `{ \"${selector2}\": ${!value} }`;\n  const payload1 = JSON.parse(payloadString1);\n  const payload2 = JSON.parse(payloadString2);\n\n  dispatch(setCheck1(payload1));\n  dispatch(setCheck2(payload2));\n\n  handleOtherCheckboxes();\n};\n\nexport const handleRightCheckboxes = (\n  value: boolean,\n  checkbox1: boolean,\n  checkbox2: boolean,\n  checkbox3: boolean,\n  dispatch: any,\n  configuratorAction: any,\n  payload: object\n) => {\n  if (checkbox1 || checkbox2 || checkbox3) {\n    dispatch(configuratorAction(payload));\n  }\n};\n\nexport const updateConfiguratorStateAndGeneratePassword = (\n  dispatch: any,\n  generatePassword: any\n) => {\n  dispatch(generatePassword());\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Text, View, ToastAndroid, Platform /*, TouchableOpacity*/ } from 'react-native';\nimport Checkbox from 'expo-checkbox';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport { checkBox } from 'screens/PasswordGenerator/styles';\nimport {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n  selectIsEasy2Read,\n  selectIsAllChar,\n  selectIsUpperCase,\n  selectIsLowerCase,\n  selectIsNumbers,\n  selectIsSymbols,\n} from 'reduxStore/slices/configuratorSlice';\nimport { generatePassword } from 'reduxStore/slices/passwordSlice';\n\nimport {\n  handleLeftCheckboxes,\n  handleRightCheckboxes,\n  updateConfiguratorStateAndGeneratePassword,\n} from 'utils/configuratorUtils';\nimport { appColors } from 'utils/constants';\n\n/* Reference for checkbox usage: [\n  https://docs.expo.dev/versions/latest/sdk/checkbox/,\n  https://snack.expo.dev/\n]\n */\n\nexport const PasswordConfigurator = () => {\n  const dispatch = useDispatch();\n\n  const isEasy2Read = useSelector(selectIsEasy2Read);\n  const isAllChar = useSelector(selectIsAllChar);\n\n  const isUpperCase = useSelector(selectIsUpperCase);\n  const isLowerCase = useSelector(selectIsLowerCase);\n  const isNumbers = useSelector(selectIsNumbers);\n  const isSymbols = useSelector(selectIsSymbols);\n\n  const handleRightCheckboxesGivenLeftCheckboxes = () => {\n    dispatch(setIsUpperCaseAndIsLowerCase({ isUpperCase: true, isLowerCase: true }));\n\n    if (!isEasy2Read || isAllChar) {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: false, isSymbols: false }));\n    } else {\n      dispatch(setIsNumbersAndIsSymbols({ isNumbers: true, isSymbols: true }));\n    }\n\n    dispatch(generatePassword());\n  };\n\n  return (\n    <View style={checkBox.container}>\n      {/* Left checkboxes */}\n      <View style={{ flexDirection: 'column', marginLeft: -20 }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Easy to read'}\n            isChecked={isEasy2Read}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsEasy2Read,\n                setIsAllChar,\n                'isEasy2Read',\n                'isAllChar',\n                !isEasy2Read,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'All characters'}\n            isChecked={isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleLeftCheckboxes(\n                dispatch,\n                setIsAllChar,\n                setIsEasy2Read,\n                'isAllChar',\n                'isEasy2Read',\n                !isAllChar,\n                handleRightCheckboxesGivenLeftCheckboxes\n              );\n            }}\n          />\n        </View>\n      </View>\n\n      {/* Right checkboxes */}\n      <View style={{ flexDirection: 'column' }}>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Uppercase'}\n            isChecked={isUpperCase}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isUpperCase,\n                isLowerCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsUpperCase,\n                { isUpperCase: !isUpperCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Lowercase'}\n            isChecked={isLowerCase}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isLowerCase,\n                isUpperCase,\n                isNumbers,\n                isSymbols,\n                dispatch,\n                setIsLowerCase,\n                { isLowerCase: !isLowerCase }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Numbers'}\n            isChecked={isNumbers}\n            disabled={!isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isNumbers,\n                isUpperCase,\n                isLowerCase,\n                isSymbols,\n                dispatch,\n                setIsNumbers,\n                {\n                  isNumbers: !isNumbers,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n        <View style={checkBox.section}>\n          <CustomCheckBox\n            label={'Symbols'}\n            isChecked={isSymbols}\n            disabled={!isAllChar}\n            color={appColors.primary}\n            onPress={() => {\n              handleRightCheckboxes(\n                !isSymbols,\n                isUpperCase,\n                isLowerCase,\n                isNumbers,\n                dispatch,\n                setIsSymbols,\n                {\n                  isSymbols: !isSymbols,\n                }\n              );\n\n              updateConfiguratorStateAndGeneratePassword(dispatch, generatePassword);\n            }}\n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n","import { StyleSheet } from 'react-native';\n\nexport const savePassword = StyleSheet.create({\n  container: {\n    padding: 10,\n  },\n\n  dropdown: {\n    flexDirection: 'column',\n    justifyContent: 'flex-start',\n    padding: 10,\n    marginBottom: 10,\n  },\n\n  textLabel: { fontSize: 17, marginRight: 5, marginBottom: 5 },\n\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold',\n  },\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  savePassword2Firebase,\n  editPasswordFromFirebase,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n} from 'reduxStore/slices/passwordSlice';\nimport {\n  getSocialMediaListFromFirebase,\n  selectSocialMediaList,\n  selectSocialMediaPicked,\n  setSocialMediaPicked,\n} from 'reduxStore/slices/socialMediaSlice';\n\nimport { Picker, Text, View } from 'react-native';\nimport { Entypo } from '@expo/vector-icons';\n\nimport { cardView, shadow } from 'screens/PasswordGenerator/styles';\nimport { savePassword } from 'components/CreateEditPasswordConfigurator/styles';\nimport { appColors } from 'utils/constants';\nimport { socialMediaCollection } from 'services/firebase';\n\nexport const CreateEditPasswordConfigurator = (props: { navigation: any }) => {\n  const dispatch = useDispatch();\n  const socialMediaPicked = useSelector(selectSocialMediaPicked);\n  const socialMediaList = useSelector(selectSocialMediaList);\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const password = useSelector(selectPassword);\n\n  const { navigation } = props;\n  const createEditButtonLabel = isCreateMode ? 'Save' : 'Edit';\n\n  useEffect(() => {\n    if (isCreateMode || isEditMode) {\n      socialMediaCollection.onSnapshot(() => {\n        dispatch(getSocialMediaListFromFirebase());\n      });\n    }\n  }, []);\n\n  return (\n    <View style={[cardView.container, shadow.container, savePassword.container]}>\n      <View style={savePassword.dropdown}>\n        <Text style={savePassword.textLabel}>Social media:</Text>\n        <Picker\n          // ref={pickerRef}\n          selectedValue={socialMediaPicked}\n          onValueChange={(itemValue, itemIndex) => {\n            dispatch(setSocialMediaPicked({ socialMediaPicked: itemValue }));\n          }}\n        >\n          {socialMediaList.map((item: { id: string; name: string }) => {\n            const label = item.name.charAt(0).toUpperCase() + item.name.slice(1);\n            return <Picker.Item key={item.id} label={label} value={item.name} />;\n          })}\n        </Picker>\n      </View>\n\n      <Entypo.Button\n        style={savePassword.button}\n        name={isCreateMode ? 'save' : 'edit'}\n        size={24}\n        color={appColors.textTint}\n        backgroundColor={appColors.primary}\n        onPress={() => {\n          if (socialMediaPicked !== '') {\n            const data = {\n              password,\n              socialMedia: socialMediaPicked,\n            };\n            if (isEditMode) {\n              dispatch(editPasswordFromFirebase(data));\n            } else {\n              dispatch(savePassword2Firebase(data));\n            }\n            navigation.navigate('PasswordList');\n          }\n        }}\n      >\n        {createEditButtonLabel}\n      </Entypo.Button>\n    </View>\n  );\n};\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  generatePassword,\n  selectIsCreateMode,\n  selectIsEditMode,\n  selectPassword,\n  selectPasswordLength,\n  selectPasswordPicked,\n} from 'reduxStore/slices/passwordSlice';\nimport { selectUserId } from 'reduxStore/slices/userSlice';\n\nimport { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  Clipboard,\n  BackHandler,\n  Platform,\n  ScrollView,\n} from 'react-native';\nimport { Divider } from 'react-native-paper';\nimport Checkbox from 'expo-checkbox';\n\nimport { CustomCheckBox } from 'components/PasswordConfigurator/CustomCheckBox/customCheckBox';\nimport SliderContainer from 'components/SliderContainer/sliderContainer';\nimport { PasswordConfigurator } from 'components/PasswordConfigurator/passwordConfigurator';\nimport { CreateEditPasswordConfigurator } from 'components/CreateEditPasswordConfigurator/createEditPasswordConfigurator';\nimport { CustomSnackbar } from 'components/CustomSnackbar/customSnackbar';\n\nimport { cardView, shadow, screen, passwordStyle, configuration, checkBox } from './styles';\nimport { getPasswordGenerated } from 'utils/localStorageFuncs';\nimport { infoMessages } from 'utils/constants';\nimport { showInfoMessage } from 'utils/infoMessages';\nimport {\n  resetConfigurationState,\n  handleGeneratePassword,\n  showAuthenticatedMessage,\n} from 'utils/configuratorUtils';\n\nexport const PasswordGenerator = (props: { navigation: any }) => {\n  const { navigation } = props;\n  const [isSnackbarVisible, setSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  const passwordFromState = useSelector(selectPassword);\n  const passwordLength = useSelector(selectPasswordLength);\n\n  const isCreateMode = useSelector(selectIsCreateMode);\n  const isEditMode = useSelector(selectIsEditMode);\n  const passwordPicked = useSelector(selectPasswordPicked);\n\n  const userId = useSelector(selectUserId);\n\n  const screenTitle = isEditMode\n    ? 'Password Edit'\n    : `Password Generator ${!userId ? '(Only)' : ''}`;\n\n  const dispatch = useDispatch();\n\n  const _handleGeneratePassword = () => {\n    handleGeneratePassword(passwordFromState, dispatch);\n  };\n\n  const handleCopyButton = () => {\n    getPasswordGenerated()\n      .then((password: any | string) => {\n        const password2Clipboard = isEditMode ? passwordFromState : password.password;\n\n        if (Platform.OS === 'android') {\n          showInfoMessage(infoMessages.copied2Clipboard);\n        } else {\n          setSnackbarMessage(infoMessages.copied2Clipboard);\n          setSnackbarVisible(true);\n        }\n\n        Clipboard.setString(password2Clipboard);\n      })\n      .catch((err: any) => {\n        console.log({ err });\n        Clipboard.setString('');\n      });\n  };\n\n  const handleRefreshButton = () => {\n    if (Platform.OS === 'android') {\n      showInfoMessage(infoMessages.newPassword);\n    } else {\n      setSnackbarMessage(infoMessages.newPassword);\n      setSnackbarVisible(true);\n    }\n\n    dispatch(generatePassword());\n  };\n\n  const handleBackAction = () => {\n    resetConfigurationState(dispatch);\n    navigation.navigate(userId ? 'PasswordList' : 'Login');\n    return true;\n  };\n\n  useEffect(() => {\n    BackHandler.addEventListener('hardwareBackPress', handleBackAction);\n\n    if (Platform.OS === 'android') {\n      showAuthenticatedMessage(userId, isCreateMode);\n    } else {\n      setSnackbarMessage(infoMessages.about2CreatePassword);\n      setSnackbarVisible(true);\n    }\n\n    return () => {\n      resetConfigurationState(dispatch);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: screenTitle,\n    });\n  });\n\n  return (\n    <>\n      <ScrollView>\n        <View style={screen.container}>\n          <View style={[cardView.container, passwordStyle.container, shadow.container]}>\n            <View style={passwordStyle.inputContainer}>\n              <TextInput\n                showSoftInputOnFocus={false}\n                caretHidden={true}\n                style={passwordStyle.input}\n                value={passwordFromState}\n              />\n              <View style={passwordStyle.icons}>\n                <TouchableOpacity onPress={handleCopyButton}>\n                  <MaterialCommunityIcons\n                    style={{ marginRight: 10 }}\n                    name='content-copy'\n                    size={24}\n                    color='grey'\n                  />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={handleRefreshButton}>\n                  <Ionicons name='reload' size={24} color='grey' />\n                </TouchableOpacity>\n              </View>\n            </View>\n          </View>\n\n          <View style={[cardView.container, configuration.container, shadow.container]}>\n            <View style={configuration.textContainer}>\n              <Text style={configuration.textHeader}>Configure your password</Text>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <View style={configuration.passwordLengthContainer}>\n              <Text style={{ fontSize: 17 }}>Password length</Text>\n              <View style={configuration.lengthSliderContainer}>\n                <TextInput\n                  showSoftInputOnFocus={false}\n                  caretHidden={true}\n                  style={configuration.inputLength}\n                  keyboardType={'numeric'}\n                  value={passwordFromState.length.toString()}\n                />\n                <SliderContainer\n                  defaultValue={isEditMode ? passwordFromState.length : 10}\n                  handleGeneratePassword={_handleGeneratePassword}\n                />\n              </View>\n            </View>\n\n            <Divider style={{ backgroundColor: 'grey' }} />\n\n            <PasswordConfigurator />\n          </View>\n\n          {(isCreateMode || isEditMode) && (\n            <CreateEditPasswordConfigurator navigation={navigation} />\n          )}\n        </View>\n      </ScrollView>\n\n      <CustomSnackbar\n        message={snackbarMessage}\n        isSnackbarVisible={isSnackbarVisible}\n        setSnackbarVisible={setSnackbarVisible}\n      />\n    </>\n  );\n};\n","import { Dimensions, StyleSheet } from 'react-native';\n\nexport const popoverStyles = StyleSheet.create({\n  content: {\n    width: Dimensions.get('screen').width * 0.45,\n    padding: 16,\n    backgroundColor: 'white',\n    borderRadius: 8,\n  },\n  arrow: {\n    borderTopColor: 'white',\n  },\n  background: {\n    backgroundColor: 'rgba(66,66,66,0.5)',\n  },\n});\n","import React from 'react';\nimport { Text, TouchableOpacity, View } from 'react-native';\nimport { Popover } from 'react-native-modal-popover';\nimport { Feather } from '@expo/vector-icons';\n\nimport { popoverMessage } from 'utils/constants';\nimport { popoverStyles } from './styles';\n\nexport const CustomPopover = (props: {\n  popoverVisible: boolean;\n  closePopover: any;\n  popoverAnchorRect: any;\n  touchableRef: any;\n  onPress: any;\n}) => {\n  const { popoverVisible, closePopover, popoverAnchorRect, touchableRef, onPress } = props;\n  return (\n    <>\n      <TouchableOpacity ref={touchableRef} onPress={onPress}>\n        <Feather name='info' size={20} color='black' />\n      </TouchableOpacity>\n      <Popover\n        contentStyle={popoverStyles.content}\n        arrowStyle={popoverStyles.arrow}\n        backgroundStyle={popoverStyles.background}\n        visible={popoverVisible}\n        onClose={closePopover}\n        fromRect={popoverAnchorRect}\n        placement='top'\n        supportedOrientations={['portrait', 'landscape']}\n      >\n        <Text>{popoverMessage}</Text>\n      </Popover>\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  selectRequest,\n  setIsRequest,\n  unsetIsRequest,\n} from 'reduxStore/slices/applicationStatusSlice';\n\nimport { setUserData, unsetUserData } from 'reduxStore/slices/userSlice';\n\nimport { Image, Text, TextInput, Platform, View, TouchableOpacity } from 'react-native';\nimport { usePopover } from 'react-native-modal-popover';\n\nimport { LoadingIndicator } from 'components/LoadingIndicator/loadingIndicator';\nimport { PasswordToggle } from 'components/PasswordToggle/passwordToggle';\nimport { CustomPopover } from 'components/Popover/popover';\nimport { shadow } from 'screens/PasswordGenerator/styles';\n\nimport { setUserData2LS } from 'utils/localStorageFuncs';\nimport { auth, signIn } from 'services/firebase';\n\nimport styles from './styles';\n\n// Reference for popover: https://github.com/eveningkid/react-native-popable\n\nexport const Login = (props: { navigation: any }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [hidePassword, setHidePassword] = useState(true);\n\n  const dispatch = useDispatch();\n  const isRequesting = useSelector(selectRequest);\n  const { navigation } = props;\n\n  const { openPopover, closePopover, popoverVisible, touchableRef, popoverAnchorRect } =\n    usePopover();\n\n  useEffect(() => {\n    dispatch(setIsRequest({ isRequest: true }));\n  }, []);\n\n  useEffect(\n    () =>\n      auth.onAuthStateChanged((user) => {\n        if (user) {\n          dispatch(setUserData({ id: user.uid, email: user.email }));\n          dispatch(unsetIsRequest());\n          navigation.replace('Drawer');\n        } else {\n          dispatch(unsetUserData());\n          dispatch(unsetIsRequest());\n        }\n      }),\n    [navigation]\n  );\n\n  const handleLogin = () => {\n    signIn(username, password);\n  };\n\n  const handleHidePassword = () => {\n    setHidePassword(!hidePassword);\n  };\n\n  return (\n    <>\n      {isRequesting && <LoadingIndicator />}\n      {!isRequesting && (\n        <View style={styles.container}>\n          <Image style={styles.loginImage} source={require('assets/main/passvault-512px.png')} />\n          <View style={styles.inputContainer}>\n            <TextInput\n              placeholder='Username'\n              value={username}\n              style={[styles.input, shadow.container]}\n              onChangeText={(text: string) => setUsername(text)}\n            />\n            <TextInput\n              placeholder='Password'\n              value={password}\n              style={[styles.input, shadow.container]}\n              onChangeText={(text: string) => setPassword(text)}\n              secureTextEntry={hidePassword}\n            />\n            <PasswordToggle hidePassword={!hidePassword} action={handleHidePassword} />\n          </View>\n\n          <View style={styles.buttonContainer}>\n            <TouchableOpacity onPress={handleLogin} style={styles.button}>\n              <Text style={styles.buttonText}>Login</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('SignUp');\n              }}\n              style={[styles.button, styles.buttonOutLine]}\n            >\n              <Text style={styles.buttonOutLineText}>Sign up</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.linkContainer}>\n            <TouchableOpacity\n              onPress={() => {\n                // @ts-ignore\n                navigation.navigate('PasswordGenerator');\n              }}\n              style={styles.link}\n            >\n              <Text style={styles.linkText}>Use it without an account </Text>\n            </TouchableOpacity>\n\n            <CustomPopover\n              popoverVisible={popoverVisible}\n              closePopover={closePopover}\n              popoverAnchorRect={popoverAnchorRect}\n              touchableRef={touchableRef}\n              onPress={openPopover}\n            />\n          </View>\n        </View>\n      )}\n    </>\n  );\n};\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","import { Platform, StyleSheet } from 'react-native';\n\nexport const screen = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n    marginBottom: 5,\n  },\n});\n\nexport const shadow = StyleSheet.create({\n  container: {\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n});\n\nexport const cardView = StyleSheet.create({\n  container: {\n    width: '90%',\n    padding: 10,\n    backgroundColor: '#FFF',\n    borderRadius: 5,\n    marginBottom: 15,\n    justifyContent: 'center',\n  },\n});\n\nexport const passwordStyle = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  inputContainer: {\n    margin: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  input: {\n    width: Platform.OS === 'web' ? '85%' : '75%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 7,\n    borderRadius: 10,\n    textAlign: 'left',\n    fontFamily: Platform.OS === 'ios' ? 'Courier New' : 'monospace',\n    fontWeight: 'bold',\n    fontSize: Platform.OS === 'web' ? 16 : 20,\n  },\n  icons: {\n    marginLeft: 15,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n});\n\nexport const configuration = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  textContainer: {\n    margin: 10,\n    justifyContent: 'flex-start',\n  },\n  textHeader: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  passwordLengthContainer: {\n    padding: 10,\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n  inputLength: {\n    width: Platform.OS === 'web' ? '15%' : '20%',\n    borderWidth: 1,\n    borderColor: '#000',\n    backgroundColor: 'white',\n    paddingHorizontal: 7,\n    paddingVertical: 10,\n    marginRight: 5,\n    borderRadius: 10,\n    textAlign: 'center',\n    fontWeight: 'bold',\n  },\n  lengthSliderContainer: {\n    padding: 10,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  },\n});\n\nexport const checkBox = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    marginTop: 15,\n    justifyContent: 'space-around',\n  },\n  section: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  paragraph: {\n    fontSize: 15,\n  },\n  checkbox: {\n    margin: 8,\n  },\n});\n","module.exports = __webpack_public_path__ + \"static/media/amazon.4c033704.png\";","module.exports = __webpack_public_path__ + \"static/media/discord.17c0e41c.png\";","module.exports = __webpack_public_path__ + \"static/media/google.647ac848.png\";","module.exports = __webpack_public_path__ + \"static/media/slack.d9f7a674.png\";","module.exports = __webpack_public_path__ + \"static/media/okta.c20fa4f6.png\";","module.exports = __webpack_public_path__ + \"static/media/outlook.217ab4b3.png\";","module.exports = __webpack_public_path__ + \"static/media/twitch.8e8dc9e1.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-banner.8c7d09ca.png\";","import { StyleSheet } from 'react-native';\nimport { appColors } from 'utils/constants';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  inputContainer: { width: '80%' },\n  input: {\n    backgroundColor: 'white',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    borderRadius: 10,\n    marginTop: 10,\n  },\n  buttonContainer: {\n    width: '60%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  button: {\n    backgroundColor: appColors.primary,\n    width: '70%',\n    padding: 10,\n    borderRadius: 10,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: 'white',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  buttonOutLine: {\n    backgroundColor: 'white',\n    marginTop: 5,\n    borderColor: appColors.primary,\n    borderWidth: 2,\n  },\n  buttonOutLineText: {\n    color: '#4F4F4F',\n    fontWeight: '700',\n    fontSize: 16,\n  },\n  loginImage: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n  tooltipImage: {},\n  linkContainer: {\n    width: '60%',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  link: {\n    marginRight: 3,\n  },\n  linkText: {\n    fontSize: 15,\n  },\n});\n\nexport default styles;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  isEasy2Read: boolean;\n  isAllChar: boolean;\n  isUpperCase: boolean;\n  isLowerCase: boolean;\n  isNumbers: boolean;\n  isSymbols: boolean;\n} = {\n  isEasy2Read: true,\n  isAllChar: false,\n  isUpperCase: true,\n  isLowerCase: true,\n  isNumbers: false,\n  isSymbols: false,\n};\n\nexport const configuratorSlice = createSlice({\n  name: 'configurator',\n  initialState,\n  reducers: {\n    setIsEasy2Read: (state, { payload }) => ({\n      ...state,\n      isEasy2Read: payload.isEasy2Read,\n    }),\n    setIsAllChar: (state, { payload }) => ({\n      ...state,\n      isAllChar: payload.isAllChar,\n    }),\n    setIsUpperCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n    }),\n    setIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbers: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n    }),\n    setIsSymbols: (state, { payload }) => ({\n      ...state,\n      isSymbols: payload.isSymbols,\n    }),\n    setIsUpperCaseAndIsLowerCase: (state, { payload }) => ({\n      ...state,\n      isUpperCase: payload.isUpperCase,\n      isLowerCase: payload.isLowerCase,\n    }),\n    setIsNumbersAndIsSymbols: (state, { payload }) => ({\n      ...state,\n      isNumbers: payload.isNumbers,\n      isSymbols: payload.isSymbols,\n    }),\n  },\n});\n\nexport const {\n  setIsEasy2Read,\n  setIsAllChar,\n  setIsUpperCase,\n  setIsLowerCase,\n  setIsNumbers,\n  setIsSymbols,\n  setIsUpperCaseAndIsLowerCase,\n  setIsNumbersAndIsSymbols,\n} = configuratorSlice.actions;\n\nexport const selectIsEasy2Read = (state: { configurator: { isEasy2Read: boolean } }) =>\n  state.configurator.isEasy2Read;\nexport const selectIsAllChar = (state: { configurator: { isAllChar: boolean } }) =>\n  state.configurator.isAllChar;\nexport const selectIsUpperCase = (state: { configurator: { isUpperCase: boolean } }) =>\n  state.configurator.isUpperCase;\nexport const selectIsLowerCase = (state: { configurator: { isLowerCase: boolean } }) =>\n  state.configurator.isLowerCase;\nexport const selectIsNumbers = (state: { configurator: { isNumbers: boolean } }) =>\n  state.configurator.isNumbers;\nexport const selectIsSymbols = (state: { configurator: { isSymbols: boolean } }) =>\n  state.configurator.isSymbols;\n","// Import the functions you need from the SDKs you need\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { clearUserDataFromLS, setUserData2LS } from 'utils/localStorageFuncs';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n};\n\nconst appLength: number = firebase.apps.length;\n\nconst app = appLength === 0 ? firebase.initializeApp(firebaseConfig) : firebase.app();\nconst database = firebase.firestore(app);\n\nexport const auth = firebase.auth();\nexport const passwordsCollection = database.collection('passwords');\nexport const socialMediaCollection = database.collection('social_media');\n\nexport const signIn = (username: string, password: string) => {\n  auth\n    .signInWithEmailAndPassword(`${username}@example.com`, password)\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n\n      setUserData2LS(user?.uid, user?.email);\n    })\n    .catch((error) => {\n      alert(error.message);\n      console.log({ exception: error.message });\n    });\n};\n\nexport const signOut = (reduxAction: any, navigation: any) => {\n  auth\n    .signOut()\n    .then(() => {\n      clearUserDataFromLS();\n      reduxAction();\n      navigation.replace('Login');\n    })\n    .catch((error) => {\n      console.log({ exception: error.message });\n    });\n};\n\nexport const signUp = (username: string, password: string) => {\n  auth\n    .createUserWithEmailAndPassword(`${username}@example.com`, password)\n    .then((userCredentials) => {\n      const { user } = userCredentials;\n      console.log({ user });\n    })\n    .catch((error) => {\n      alert(error.message);\n      console.log({ exception: error.message });\n    });\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nimport { getUserDataFromLS } from 'utils/localStorageFuncs';\n\nexport const initialState = {\n  id: '',\n  email: '',\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUserData: (state, { payload }) => ({\n      ...state,\n      id: payload.id,\n      email: payload.email,\n    }),\n    unsetUserData: () => ({\n      ...initialState,\n    }),\n  },\n});\n\nexport const { setUserData, unsetUserData } = userSlice.actions;\n\nexport const selectUserId = (state: { user: { id: string } }) => state.user.id;\nexport const selectUserEmail = (state: { user: { email: string } }) => state.user.email;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState: {\n  socialMediaPicked: string;\n  socialMediaList: any;\n} = {\n  socialMediaPicked: '',\n  socialMediaList: [],\n};\n\nexport const socialMediaSlice = createSlice({\n  name: 'socialMedia',\n  initialState,\n  reducers: {\n    setSocialMediaPicked: (state, { payload }) => ({\n      ...state,\n      socialMediaPicked: payload.socialMediaPicked,\n    }),\n    setSocialMediaList: (state, { payload }) => ({\n      ...state,\n      socialMediaList: payload.socialMediaList,\n    }),\n    getSocialMediaListFromFirebase: () => {},\n  },\n});\n\nexport const { setSocialMediaPicked, setSocialMediaList, getSocialMediaListFromFirebase } =\n  socialMediaSlice.actions;\n\nexport const selectSocialMediaPicked = (state: { socialMedia: { socialMediaPicked: any } }) =>\n  state.socialMedia.socialMediaPicked;\nexport const selectSocialMediaList = (state: { socialMedia: { socialMediaList: any } }) =>\n  state.socialMedia.socialMediaList;\n"],"sourceRoot":""}